{"version":3,"sources":["../src/util.ts","../src/events.ts","../src/context.ts","../src/observables.ts","../src/text.ts","../src/tag.ts","../src/css-generator.ts","../src/style-manager.ts","../src/state.ts","../src/each.ts","../src/lifecycle.ts","../src/all-tags.ts","../src/cardboard.ts"],"sourcesContent":["/** Removes an item from an array if it exists. It returns whether it was removed or not */\nexport const removeFromList = <T>(item: T, list?: T[]) => {\n  if (!list) return false;\n\n  const index = list.indexOf(item);\n\n  if (index !== -1) {\n    list.splice(index, 1);\n    return true;\n  }\n\n  return false;\n};\n\nexport const camelToDash = str => str.replace(/([A-Z])/g, val => `-${val.toLowerCase()}`);\n\nexport const isObject = (obj: any): boolean => {\n  return typeof obj === 'object' && !(obj instanceof Array);\n};\nexport const isArray = (obj) => {\n  return Object.prototype.toString.call(obj) === '[object Array]';\n};\nexport const val = <T>(val: T | ((...args: any) => T), ...args): T => {\n  if (typeof val === 'function') {\n    return (val as any)(...args);\n  }\n  return val;\n};\nexport const swapItems = (array: any[], from: number, to: number) => {\n  const temp = array[from];\n  array[from] = array[to];\n  array[to] = temp;\n  return array;\n};\nexport const arraysEqual = (a?: any[], b?: any[]) => {\n  if (a === b) return true;\n  if (a == null || b == null) return false;\n  if (a.length !== b.length) return false;\n\n  // If you don't care about the order of the elements inside\n  // the array, you should sort both arrays here.\n  // Please note that calling sort on an array will modify that array.\n  // you might want to clone your array first.\n\n  for (let i = 0; i < a.length; ++i) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n};\n\n/* eslint-disable  */\n/* istanbul ignore next */\nexport const deepEquals = (a, b) => {\n  if (a === b) return true;\n  if (a && b && a.length !== b.length) return false;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!deepEquals(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!deepEquals(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a !== a && b !== b;\n}\n\n/**\n * Generates a unique ID for a Cardboard tag.\n * If an `idNumber` is provided, it will return a string in the format `c_<idNumber>`.\n * If no `idNumber` is provided, it will generate a random UUID in the format `c_xxxxxxxxxx`.\n * \n * @returns A unique ID string for a Cardboard tag.\n */\nexport function generateUID(idNumber?: number): string {\n  if (!idNumber) return uuidv4();\n  return `c_${idNumber}`;\n}\n\nexport function uuidv4() {\n  return \"c_1000000010\".replace(/[018]/g, c =>\n    (+c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> +c / 4).toString(16)\n  );\n}","import { removeFromList } from './util.js';\n\n/**\n * Single event listener/emitter, listen to, and trigger events. (for mapped events use {@link CMappedEvent}).\n *\n * @example\n * ```ts\n * const evt = new CEvent<bool>();\n * evt.listen(listener);\n * evt.dispatch(true);\n * evt.remove(listener);\n * ```\n */\nexport class CEvent<T> {\n  protected _lstrs: Array<(data: T | undefined) => void> = [];\n\n  listen(fn: (data?: T) => void) {\n    this._lstrs.push(fn);\n  }\n\n  remove(fn: (data?: T) => void) {\n    removeFromList(fn, this._lstrs);\n  }\n\n  dispatch(data?: T) {\n    this._lstrs.forEach((el) => el(data));\n  }\n\n  destroy() {\n    this._lstrs = [];\n  }\n}\n\n/**\n * Mapped event listener/emitter, listen to, and trigger events. (for single events use {@link CEvent}).\n *\n * @example\n * ```ts\n * const evt = new CMappedEvent<bool>();\n * evt.listen('evt', listener);\n * evt.dispatch('evt', true);\n * evt.remove('evt', listener);\n * ```\n */\n\nexport class CMappedEvent<T> {\n  private _lstrs: Record<string, Array<(data?: T) => void>> = {};\n\n  listen(evt: string, fn: (data?: T) => void) {\n    if (!(evt in this._lstrs)) {\n      this._lstrs[evt] = [fn];\n    }\n    else if (this._lstrs[evt]) {\n      this._lstrs[evt].push(fn);\n    }\n  }\n\n  remove(evt: string, fn: (data?: T) => void) {\n    removeFromList(fn, this._lstrs[evt]);\n  }\n\n  dispatch(evt: string, data?: T) {\n    if (evt in this._lstrs) {\n      this._lstrs[evt].forEach((el) => el(data));\n    }\n  }\n\n  destroy() {\n    this._lstrs = {};\n  }\n}\n\nexport const singleEvent = <T>() => {\n  return new CEvent<T>();\n};\n\nexport const mappedEvent = <T>() => {\n  return new CMappedEvent<T>();\n};\n","import { singleEvent, type CEvent } from \"./events.js\";\nimport { CTag } from \"./tag.js\";\nimport type { StyleManager } from \"./types.js\";\n\nexport type CardboardContext = {\n    intObs?: IntersectionObserver;\n    styleManager?: StyleManager;\n    mp?: CTag;\n    mpHistory: CTag[];\n    obs?: {\n        onAdded: CEvent<Node>;\n        onRemoved: CEvent<Node>;\n    };\n    init?: boolean;\n};\n\nexport const context: CardboardContext = {\n    mp: undefined,\n    mpHistory: [],\n    styleManager: undefined,\n    intObs: undefined,\n    obs: undefined,\n    init: false,\n};\n\nexport const isInitialized = () => context.init === true;\nexport const checkInitialized = () => {\n    if (!isInitialized()) {\n        throw new Error(\"Cardboard is not initialized. Please call `init()`, as some features will not work.\");\n    }\n};\n\n/**\n * Returns the current mountPoint {@link CTag}. See {@link mountPoint} for more information.\n */\nexport const getMountPoint = () => context.mp;\n\n/**\n * Makes the given tag the mount point. This means that when other tags are created with \"mountToParent\" or  (using `<tag_name>.mount()`, `tag('<tag_name>', [], true)`),\n * they will be added as children of this tag.\n * You can call mountPoint multiple times, and the last mount point tag will be used.\n * Then when you've finished, you can call {@link restoreMountPoint} to go back to the previously mounted tag if there is one.\n * You can clear all mount points using {@link clearMountPoints}.\n *\n * @example\n * ```ts\n * mountPoint(div()); // Div 1\n * div.mount();  // added as child of div\n * p.mount();    // added as child of div\n *\n * mountPoint(div()); // Div 2\n * div.mount();  // added as child of new div\n * p.mount();    // added as child of new div\n *\n * restoreMountPoint();      // Back to div 1\n * clearMountPoints();       // Clears all mount points, no mount point after this call\n * ```\n */\nexport const mountPoint = (tag: CTag) => {\n    if (context.mp) {\n        context.mpHistory.push(context.mp);\n    }\n    context.mp = tag;\n    return tag;\n};\n\n/**\n * Restore the currently mounted tag ({@link mountPoint}). \n * Goes back in the stack of mount points tags.\n * If there is no previous mount point tag, it will not do anything.\n */\nexport const restoreMountPoint = () => {\n    context.mp = context.mpHistory.pop();\n};\n\n/**\n * Restores all mount points. There will be no mount points tag after calling this function.\n */\nexport const clearMountPoints = () => {\n    context.mp = undefined;\n    context.mpHistory = [];\n};\n\n/**\n * Clears the mount point history and resets the mount point to the first one.\n * This means that the mount point will be the first tag that was mounted, \n * and all other mount points will be cleared.\n */\nexport const resetMountPoints = () => {\n    let first = context.mpHistory.shift();\n    context.mp = first;\n    context.mpHistory = [];\n};\n\nexport type ScopedCallback = (tag: CTag) => void;\n\n/**\n * Sets the mount point to the given tag, calls the scoped callback, and then restores the mount point.\n * Useful for creating a temporary mount point for a specific tag, and then restoring the previous mount point.\n * \n * @param tag \n * @param scopedCallback \n */\nexport const withMountPoint = (tag: CTag, scopedCallback: ScopedCallback) => {\n    mountPoint(tag);\n    scopedCallback(tag);\n    restoreMountPoint();\n}\n\n// TODO: Optimize this. Instead of observing everything, let lifecycles listen just to the parent of the element instead of everything.\nexport const createGlobalObserver = () => {\n    const _addedEvt = singleEvent<Node>();\n    const _removedEvt = singleEvent<Node>();\n\n    const observer = new window.MutationObserver((mutations, observer) => {\n        for (const mut of mutations) {\n            for (const n of Array.from(mut.addedNodes)) {\n                _addedEvt.dispatch(n);\n            }\n            for (const n of Array.from(mut.removedNodes)) {\n                _removedEvt.dispatch(n);\n            }\n        }\n    });\n\n    observer.observe(window.document.body, {\n        childList: true,\n        subtree: true,\n    });\n\n    return {\n        onAdded: _addedEvt,\n        onRemoved: _removedEvt,\n    };\n};","import { CEvent } from './events.js';\nimport { isArray, isObject } from './util.js';\nimport type { IObservable, IObservableOr, WithLength } from './types.js';\n\n/**\n * A class that holds a value and notifies whenever the value changes.\n * @see https://github.com/nombrekeff/cardboard-js/wiki/Observers\n */\nexport class Observable<T = any> extends CEvent<T> implements IObservable<T> {\n  private _value: T;\n  private readonly _destroyer?: () => void;\n\n  get value(): T {\n    return this._value;\n  }\n\n  /** Set the value, and dispatch to all listeners. */\n  set value(val: T) {\n    this.dispatch(val);\n  }\n\n  constructor(val: T, destroyer?: () => void) {\n    super();\n\n    if (val && (isObject(val) || isArray(val))) {\n      val = new Proxy((val as any), {\n        get(target, p, receiver) {\n          return target[p];\n        },\n        set: (target, p, newValue, receiver) => {\n          if (target[p] === newValue) return true;\n\n          target[p] = newValue;\n          super.dispatch(target);\n          return true;\n        },\n        deleteProperty: (target, p) => {\n          delete target[p];\n          super.dispatch(target);\n          return true;\n        },\n      });\n    }\n\n    this._value = val;\n    this._destroyer = destroyer;\n  }\n\n  valueOf() {\n    return this._value;\n  }\n\n  toString() {\n    return (this._value as any).toString();\n  }\n\n  /**\n   * Add a listener for when this Observable changes.\n   */\n  changed(callback: (val: T) => void) {\n    this.listen(callback);\n    return this;\n  }\n\n  /**\n  * Remove a listener for when this Observable changes.\n  */\n  remove(callback: (val: T) => void) {\n    super.remove(callback);\n    return this;\n  }\n\n  /**\n   * Set's the new value, and calls all the listeners.\n   * You can additionaly set the {@link value} directly.\n   */\n  dispatch(val: T) {\n    if (val === this._value) {\n      return this;\n    }\n    this._value = val;\n    super.dispatch(val);\n    return this;\n  }\n\n  destroy() {\n    if (this._destroyer) this._destroyer();\n    (this._value as any) = null;\n    super.destroy();\n  }\n\n  /**\n   * Creates a new {@link Observable} whose value is derived from another {@link Observable}.\n   * The new {@link Observable} automatically updates and notifies listeners whenever the source {@link Observable} changes.\n   *\n   * @example\n   * ```ts\n   * const value = createObservable(2);\n   * const isGreater = value.computed((value) => value > 5);\n   * // > isGreater == false;\n   * value.dispatch(6);\n   * // > isGreater == true;\n   * ```\n   */\n  computed = <K>(transform: (val: T) => K) => compute(this, transform);\n\n  /** @see {@link greaterThan} */\n  greaterThan = (val: IObservableOr<number> | number = 0) => greaterThan(this as any, val);\n  /** @see {@link greaterThanOr} */\n  greaterThanOr = (val: IObservableOr<number> = 0) => greaterThanOr(this as any, val);\n  /** @see {@link lessThan} */\n  lessThan = (val: IObservableOr<number> = 0) => lessThan(this as any, val);\n  /** @see {@link lessThanOr} */\n  lessThanOr = (val: IObservableOr<number> = 0) => lessThanOr(this as any, val);\n  /** @see {@link equalTo} */\n  equalTo = <K>(val: IObservableOr<K>) => equalTo(this as any, val);\n  /** @see {@link notEqualTo} */\n  notEqualTo = <K>(val: IObservableOr<K>) => notEqualTo(this as any, val);\n  /** @see {@link isEmpty} */\n  isEmpty = <K extends WithLength>() => isEmpty(this as any as IObservable<K>);\n  /** @see {@link notEmpty} */\n  notEmpty = <K extends WithLength>() => notEmpty(this as any as IObservable<K>);\n  /** @see {@link grab} */\n  grab = <K extends keyof T>(key: K, defaultVal?: T[K]) => grab(this as any, key, defaultVal);\n}\n\n/** \n * Check if a given object `obj` is a {@link Observable}  \n * * @param obj - The object to check.\n * @returns `true` if the object is an {@link Observable}, `false` otherwise\n */\nexport const isObservable = (obj: any) => {\n  return obj instanceof Observable;\n};\n\n/**\n * Create a new {@link Observable}  \n * > Consider using `state(...)` instead.\n * @see https://github.com/nombrekeff/cardboard-js/wiki/Observers\n * \n * @param val - The initial value of the observable.\n * @param destroyer - An optional function to call when the observable is destroyed.\n * @returns A new {@link Observable} instance.\n */\nexport const createObservable = <T>(val: T, destroyer?: () => void): IObservable<T> => {\n  return new Observable<T>(val, destroyer);\n};\n\n/**\n * Creates a new {@link Observable} whose value is derived from another {@link Observable}.\n * The new {@link Observable} automatically updates and notifies listeners whenever the source {@link Observable} changes.\n *\n * @param other - The source {@link Observable} to derive the value from.\n * @param transform - A function that takes the value of the source {@link Observable} and returns the derived value.\n * @return A new {@link Observable} that will contain the derived value.\n * \n * @example\n * ```ts\n * const value = createObservable(2);\n * // Create a derived observable that is true if value > 5\n * const isGreater = compute(value, (v) => v > 5);\n * // isGreater.value == false\n * value.dispatch(6);\n * // isGreater.value == true\n * ```\n */\nexport const compute = <T, K>(\n  other: IObservable<T>,\n  transform: (val: T) => K,\n): IObservable<K> => {\n  // eslint-disable-next-line prefer-const\n  let observable: IObservable<K> | null;\n\n  const cb = (val) => observable?.dispatch(transform(val));\n\n  observable = createObservable<K>(transform(other.value), () => {\n    // remove callback in other observable when destroyed\n    // remove references, free memory\n    other.remove(cb);\n    observable = null;\n    (other as any) = null;\n  });\n\n  other.changed(cb);\n\n  return observable as any;\n};\n\nexport type ExtractValue<T extends Array<IObservable<any>>> =\n  { [K in keyof T]: T[K] extends IObservable<infer V> ? V : never };\n\n/**\n * Computes a new {@link Observable} from multiple observables.\n * The new {@link Observable} will automatically update and notify listeners whenever any of the source observables change.\n * \n * @param observables - An array of source {@link Observable}s to derive the value from.\n * @param transform - A function that takes the values of the source observables and returns the derived value.\n * @returns A new {@link Observable} that will contain the derived value. \n */\nexport const computeMultiple = <T extends IObservable[], K>(\n  observables: [...T],\n  transform: (...v: [...ExtractValue<T>]) => K,\n): IObservable<K> => {\n  const cons = createObservable<K>(transform(...(observables.map(c => c.value) as any)));\n\n  for (const other of observables) {\n    other.changed(() => cons.dispatch(\n      transform(...(observables.map(c => c.value) as any))\n    ));\n  }\n  return cons as any;\n};\n\n/** Returns the value from an observable. Convenience method if you prefer it instead of `observable.value` */\nexport const getValue = <T>(val: IObservableOr<T>): T => {\n  return isObservable(val) ? (val as IObservable<T>).value : val as T;\n};\n\n/** {@link compute} an observable and return a new {@link Observable} indicating if the value is greater than `val` */\nexport const greaterThan = (observable: IObservable<number>, val: IObservable<number> | number = 0) => {\n  return compute(observable, (newVal) => newVal > getValue(val));\n};\n\n/** {@link compute} an observable and return a new {@link Observable} indicating if the value is greater than or equal `val` */\nexport const greaterThanOr = (observable: IObservable<number>, val: IObservableOr<number> = 0) => {\n  return compute(observable, (newVal) => newVal >= getValue(val));\n};\n\n/** {@link compute} an observable and return a new {@link Observable} indicating if the value is less than `val` */\nexport const lessThan = (observable: IObservable<number>, val: IObservableOr<number> = 0) => {\n  return compute(observable, (newVal) => newVal < getValue(val));\n};\n\n/** {@link compute} an observable and return a new {@link Observable} indicating if the value is less than or equal `val` */\nexport const lessThanOr = (observable: IObservable<number>, val: IObservableOr<number> = 0) => {\n  return compute(observable, (newVal) => newVal <= getValue(val));\n};\n\n/** {@link compute} an observable and return a new {@link Observable} indicating if the value is equal to `val` */\nexport const equalTo = <T>(observable: IObservable<T>, val: IObservableOr<T>) => {\n  return compute(observable, (newVal) => newVal === getValue(val));\n};\n\n/** {@link compute} an observable and return a new {@link Observable} indicating if the value is NOT equal to `val` */\nexport const notEqualTo = <T>(observable: IObservable<T>, val: IObservableOr<T>) => {\n  return compute(observable, (newVal) => newVal !== getValue(val));\n};\n\n/** {@link compute} an observable and return a new {@link Observable} indicating if the value is NOT empty */\nexport const isEmpty = <T extends WithLength>(observable: IObservable<T>) => {\n  return compute(observable, (newVal) => newVal.length <= 0);\n};\n\n/** {@link compute} an observable and return a new {@link Observable} indicating if the value is NOT empty */\nexport const notEmpty = <T extends WithLength>(observable: IObservable<T>) => {\n  return compute(observable, (newVal) => newVal.length > 0);\n};\n\n/** {@link compute} an observable and return a new {@link Observable} that is equal to some property of the original {@link Observable} */\nexport const grab = <T, K extends keyof T>(observable: IObservable<T>, key: K, defaultVal?: T[K]) => {\n  return compute(observable, (newVal) => newVal ? (newVal[key] ? newVal[key] : defaultVal) : defaultVal);\n};\n\n","import type { IObservable, Primitive, TextObj } from './types.js';\nimport { isObservable } from './observables.js';\nimport { isObject } from './util.js';\n\n/**\n * Create a **TextNode** from text, and optionally reacts to a {@link IObservable}, interpolating the defined variables in the text each time the state changes.\n *\n * If you provide a {@link IObservable} as the second argument, the text will act as a template\n * and can reference properties in the state: `$count`, `$someValue`.\n *\n * When the state properties changes, the text node will be automatically updated with the new text.\n * Only the properties that are referenced in the template will be listened to.\n *\n * **NOTE** If you're not interpolating, and dont need to change the text, you can directly pass in a string ('string') instead of (`text('string')`).\n *\n * @see https://github.com/nombrekeff/cardboard-js/wiki/Managing-Text\n *\n * @example\n * ```ts\n * const st = state({ count: 0 });\n *\n * p(text('Raw text!'));\n * p(text(`Count: $count`, st));\n * ```\n */\nexport const text = <T extends Record<string, Primitive>, K extends TextObj>(textTemplate: string, obj?: IObservable<T> | K): Node => {\n  const node = document.createTextNode(''),\n    interpolatePattern = /\\B\\$([0-9]+|[a-z][a-z0-9_$]*)/gi;\n\n  if (!obj) {\n    node.nodeValue = textTemplate;\n    return node;\n  }\n\n  const updateNode = (data: Record<string, Primitive>) => {\n    node.nodeValue = !data\n      ? textTemplate\n      : textTemplate.replace(interpolatePattern, (m, g1) =>\n        (data[g1] ?? m).toString(),\n      );\n  };\n\n  if (isObservable(obj)) {\n    (obj as IObservable<Record<string, any>>).changed((val) => updateNode(val));\n    updateNode((obj as IObservable).value);\n  }\n  else if (isObject(obj)) {\n    for (const key of Object.getOwnPropertyNames(obj)) {\n      // We're just interested in listening to the obj that are references in the text.\n      if (textTemplate.includes(`$${key}`) && isObservable(obj[key])) {\n        obj[key].changed(() => updateNode(obj as any));\n      }\n    }\n\n    updateNode(obj as any);\n  }\n\n  return node;\n};\n","import type {\n  IObservable,\n  NestedStyleMap,\n  NoOp,\n  Primitive,\n  StyleMap,\n  TagChild,\n  TagChildren,\n  TagConfig,\n  TextObj,\n} from './types';\nimport { CssProperty } from './css-properties.js';\nimport { PickPropertyValues } from './css-property-values.js';\nimport { TagName } from './tag-names.js';\nimport { val, camelToDash, uuidv4 } from './util.js';\nimport { text } from './text.js';\nimport { createObservable, isObservable } from './observables.js';\nimport { CommonAttributes } from './attributes.js';\nimport { checkInitialized, context } from './context.js';\n\n\n/**\n * This is the main class in Cardboard. Even though Cardboard is designed to not need to use this class directly, you can if you want.\n *\n * CTag contains a reference to an HTMLElement, its parent, and provides a set of methods to interact with it.\n */\nexport class CTag {\n  /** Reference to the HTMLElement that this @type {CTag} represents */\n  el: HTMLElement & { remove: () => (Promise<boolean> | any) };\n\n\n  private _visible = false;\n  get visible() {\n    return this._visible;\n  }\n\n  set visible(newValue: boolean) {\n    this._visible = newValue;\n    this.el.dispatchEvent(new CustomEvent('visible', {\n      detail: {\n        visible: newValue,\n        tag: this,\n      },\n      bubbles: true,\n      composed: true,\n    }));\n  }\n\n  /**\n   * Any function inside this array, will be called whenever the CTag is {@link destroy}ed\n   * Used to remove HTML Event Listeners and Observable listeners\n   * @hidden\n   */\n  private readonly _destroyers: NoOp[] = [];\n\n  /** @param parent Reference to the parent @type {CTag} of this element. */\n  private _parent?: CTag;\n\n  get parent(): CTag | undefined {\n    return this._parent;\n  }\n\n  set parent(newParent: CTag) {\n    this._parent = newParent;\n  }\n\n  /** Holds the list of all children, the ones that are currently in the DOM and those that are not. */\n  private _children: TagChild[] = [];\n\n  private _cachedChildren: Node[] = [];\n  get children() {\n    return this._getChildren(this.el);\n  }\n\n  private readonly _meta = {\n    isHidden: false,\n    nextSiblingID: null,\n  };\n\n  /**\n   * Gets the value of the `HTMLElement` that this CTag represents, if it has a value.\n   */\n  get value() {\n    return (this.el as any).value;\n  }\n\n  /**\n   * Sets the value of the `HTMLElement` that this CTag represents.\n   */\n  setValue(newValue?: string) {\n    (this.el as any).value = newValue;\n    return this;\n  }\n\n  /** \n   * Gets the checked state of the `HTMLElement` that this CTag represents, \n   * if it is a checkbox or radio button.\n   */\n  get checked() {\n    return (this.el as any).checked;\n  }\n\n  /** \n   * Sets the checked state of the element, if it is a checkbox or radio button.\n   */\n  setChecked(checked: boolean) {\n    (this.el as any).checked = checked;\n    return this;\n  }\n\n  /** \n   * Gets the style of the `HTMLElement` that this CTag represents.\n   */\n  get style() {\n    return this.el.style;\n  }\n\n  /** \n  * Gets the classname of the `HTMLElement` that this CTag represents.\n  */\n  get className() {\n    return this.el.className;\n  }\n\n  /** \n   * Gets the classlist of the `HTMLElement` that this CTag represents.\n   */\n  get classList() {\n    return this.el.classList;\n  }\n\n  /** Gets the value of the element and clears the value */\n  get consumeValue() {\n    const value = this.value;\n    this.clear();\n    return value;\n  }\n\n  /**\n   * Get's the id of the `HTMLElement` that this CTag represents.\n   */\n  get id() {\n    return this.el.id;\n  }\n\n  /**\n   * Set's the id of the `HTMLElement` that this CTag represents.\n   */\n  setId(id: string) {\n    this.el.id = id;\n    return this;\n  }\n\n  constructor(arg0: TagName | HTMLElement, children: TagChildren = [], mountToParent: boolean = false) {\n    const isSelector = typeof arg0 === 'string' && arg0.match(/\\(.+\\)/);\n\n    if (isSelector) {\n      const match = arg0.match(/\\(([\\.\\#]?[a-zA-Z][a-zA-Z0-9_$]+)\\)/);\n      const selector = match ? match[1] : null;\n      if (!selector) {\n        throw new Error(`'${arg0}' is not a valid selector`);\n      }\n\n      const element = document.querySelector(selector);\n\n      if (!element) {\n        throw new Error('Can\\'t find element for selector: ' + arg0);\n      }\n\n      this.el = element as HTMLElement;\n    }\n    else if (typeof arg0 === 'string') {\n      this.el = document.createElement(arg0);\n\n      if (context.mp && mountToParent) {\n        context.mp.append(this);\n      }\n    }\n    else if (arg0 instanceof HTMLElement) {\n      this.el = arg0;\n    }\n    else {\n      throw new Error('Invalid argument: ' + arg0);\n    }\n\n    if (children.length > 0) this.setChildren(children);\n\n    // Used by other parts of Cardboard to identify this tag\n    (this.el as any).tag = this;\n  }\n\n  /** \n   * Sets the children, removes previous children  \n   */\n  setChildren(children: TagChildren) {\n    this.el.replaceChildren(...this._mapChildren(children));\n    this._children = children;\n    return this;\n  }\n\n  // TODO: Consider if passing `children` as a single argument is better than spreading it.\n  /**\n   * Appends the given `children` to the element.\n   * \n   * @param {...TagChildren} children - The children to append to the element.\n   * @return {CTag} - The current CTag instance, allowing for method chaining.\n   * @example\n   * ```ts\n   * const tag = new CTag('div');\n   * tag.append(\n   *   new CTag('span', ['Child 1']),\n   *   new CTag('span', ['Child 2']),\n   * );\n   * ```\n   */\n  append(...children: TagChildren) {\n    this.el.append(...this._mapChildren(children));\n    this._children.push(...children);\n    return this;\n  }\n\n  /**\n   * Prepends the given `children` to the element.\n   * \n   * @param {...TagChildren} children - The children to append to the element.\n   * @return {CTag} - The current CTag instance, allowing for method chaining.\n   * @example\n   * ```ts\n   * const tag = new CTag('div');\n   * tag.prepend(\n   *   new CTag('span', ['Child 1']),\n   *   new CTag('span', ['Child 2']),\n   * );\n   * ```\n   */\n  prepend(...children: TagChildren) {\n    this.el.prepend(...this._mapChildren(children));\n    this._children.unshift(...children);\n    return this;\n  }\n\n  /**\n   * If the element is currently hidden it will add this element to the page wherever it's supposed to be.\n   * I will be placed exactly in the correct position, even if there are other elements hidden.\n   * **USE WITH CAUTION**: Not intended to be used in most cases.\n   * @hidden\n   */\n  async show() {\n    if (this.parent && !this.parent.children.includes(this.el)) {\n      const parentEl = this.parent.el;\n      // Get's the position of the element if all the children are visible\n      const expectedIndex = this.parent._children.indexOf(this);\n\n      // If the element should be the first child in the parent\n      if (expectedIndex === 0) {\n        parentEl.prepend(this.el);\n      }\n      // If the element should be the last child in the parent\n      else if (expectedIndex === this.parent._children.length - 1) {\n        parentEl.append(this.el);\n      }\n      // If the element should be the nth child in the parent\n      else {\n        // Calculate how many hidden children are before this element\n        let hiddenBefore = 0;\n        for (let i = expectedIndex - 1; i >= 0; i--) {\n          const child = this.parent._children[i];\n          if (child instanceof CTag && child._meta.isHidden) {\n            hiddenBefore++;\n          }\n        }\n\n        // Get the \"real\" children in the dom.\n        // The index takes into account the items that are hidden\n        const nextEl = parentEl.childNodes[expectedIndex - hiddenBefore];\n        parentEl.insertBefore(this.el, nextEl);\n      }\n    }\n    this._meta.isHidden = false;\n    return true;\n  }\n\n  /** \n   * Hide this element (removed from DOM) \n   * **USE WITH CAUTION**: Not intended to be used in most cases.\n   * @hidden\n   */\n  async hide() {\n    if (this.parent && this.parent.children.includes(this.el)) {\n      this.parent.el.insertBefore(document.createComment(this.el.id), this.el as any);\n      await this.remove();\n      this._meta.isHidden = true;\n    }\n  }\n\n  /** \n   * Whenever the `observable` changes, it will call the `callback`.\n   * This is helpful to react to changes in observables and update the tag accordingly.\n   * \n   * You can also do it directly, although you need to keep a reference to the tag yourself.\n   * \n   * @param observable - The observable to listen to.\n   * @param callback - The callback to call when the observable changes.\n   * @returns {CTag} - The current CTag instance, allowing for method chaining.\n   * \n   * @example\n   * ```ts\n   * const disabled = createObservable(false);\n   * const tag = new CTag('div');\n   * tag.consume(disabled, (self, isDisabled) => {\n   *   console.log('New value:', isDisabled);\n   *   self.setDisabled(isDisabled);\n   * });\n   * ```\n   */\n  consume<T>(observable: IObservable<T>, callback: (self: CTag, newValue?: T) => void) {\n    if (observable.changed) {\n      const cb = (newValue) => callback(this, newValue);\n      observable.changed(cb);\n\n      this._destroyers.push(() => {\n        // Destroy reference to the observable, we don't need it anymore\n        observable.remove(cb);\n        (observable as any) = null;\n      });\n    }\n    else {\n      console.warn('An invalid Observable was supplied to `tag.consume`');\n    }\n\n    callback(this, ('value' in observable) ? observable.value : observable);\n    return this;\n  }\n\n  /**\n   * When the observable changes, it will call `ifTrue` when the observable is true. Or `ifFalse` when the observable is false.\n   * If `invert` is set to true, the condition will be inversed, but you can also use {@link doIfNot}\n   * \n   * @param {IObservable} observable - The observable to listen to.\n   * @param {function} ifTrue - The function to call when the observable is truey.\n   * @param {function} ifFalse - The function to call when the observable is falsey.\n   * @param {boolean} [invert=false] - If true, the condition will be inversed.\n   * @returns {CTag} - The current CTag instance, allowing for method chaining.\n   */\n  doIf<T>(observable: IObservable<T>, ifTrue: (value?: T) => void, ifFalse: (value?: T) => void, invert = false) {\n    if (invert) {\n      const temp = ifTrue;\n      ifTrue = ifFalse;\n      ifFalse = temp;\n    }\n\n    const callback = (_, value) => {\n      // eslint-disable-next-line no-extra-boolean-cast\n      if (!!value) ifTrue(value);\n      else ifFalse(value);\n    };\n\n    return this.consume(observable, callback);\n  }\n\n  /**\n   * The oposite of {@link doIf}\n   * When the observable changes, it will call `ifTrue` if the observable is false. Or `ifFalse` if the observable is true.\n   * \n   * @param {IObservable} observable - The observable to listen to.\n   * @param {function} ifTrue - The function to call when the observable is falsy.\n   * @param {function} ifFalse - The function to call when the observable is truthy.\n   * @return {CTag} - The current CTag instance, allowing for method chaining.\n   */\n  doIfNot<T>(observable: IObservable<T>, ifTrue: (value: T) => void, ifFalse: (value: T) => void) {\n    return this.doIf(observable, ifTrue, ifFalse, true);\n  }\n\n  /**\n   * Hide this element when the consumer is truthy. Updates whenever the observable changes.\n   * If `invert` is set to true, the condition will be inversed, but you can also use {@link hideIfNot}\n   * \n   * @param {IObservable} observable - The observable to listen to.\n   * @param {boolean} [invert=false] - If true, the condition will be inversed.\n   * @return {CTag} - The current CTag instance, allowing for method chaining.\n   * \n   * @example\n   * ```ts\n   * const isHidden = createObservable(false);\n   * const tag = new CTag('div');\n   * tag.hideIf(isHidden); // Hides the tag when isHidden is true\n   * ```\n   */\n  hideIf<T>(observable: IObservable<T>, invert = false) {\n    const handleHide = (_, value: any) => {\n      const correctedValue = invert ? !value : !!value;\n      this._meta.isHidden = correctedValue;\n\n      if (!this.parent) return;\n      if (!correctedValue) void this.show();\n      else void this.hide();\n    };\n\n    return this.consume(observable, handleHide);\n  }\n\n  /** \n   * Hide this element when the `observable` is falsy. Updates whenever the `observable` changes. \n   * \n   * @param {IObservable} observable - The observable to listen to.\n   * @return {CTag} - The current CTag instance, allowing for method chaining.\n   * \n   * @example\n   * ```ts\n   * const isVisible = createObservable(false);\n   * const tag = new CTag('div');\n   * tag.hideIfNot(isVisible); // Hides the tag when isVisible is false\n   * ```\n   */\n  hideIfNot<T>(observable: IObservable<T>) {\n    return this.hideIf(observable, true);\n  }\n\n  /**\n   * Adds classes to the element when the `observable` is truthy, and removes them when it is falsy.\n   * Updates whenever the `observable` changes.\n   * You can pass in an array of classes, or a function that returns a list of classes.\n   * If `invert` is set to true, the condition will be inversed, but you can also use {@link classIfNot}\n   * \n   * @param {IObservable} observable - The observable to listen to.\n   * @param {string[] | ((self: CTag) => string[])} classes - The classes to add to the element. Can be an array of strings or a function that returns an array of strings.\n   * @param {boolean} [invert=false] - If true, the condition will be inversed.\n   * @return {CTag} - The current CTag instance, allowing for method chaining.\n   * \n   * @example\n   * ```ts\n   * const isActive = createObservable(true);\n   * const tag = new CTag('div');\n   * \n   * // Adds 'active' and 'highlighted' classes when isActive is true\n   * tag.classIf(isActive, ['active', 'highlighted']); \n   * ```\n   */\n  classIf<T>(observable: IObservable<T>, classes: string[] | ((self: CTag) => string[]), invert = false) {\n    return this.doIf(\n      observable,\n      () => this.addClass(...val(classes, this)),\n      () => this.rmClass(...val(classes, this)),\n      invert,\n    );\n  }\n\n  /**\n   * Adds classes to the element when the `observable` is falsy, and removes them when it is truthy.\n   * Updates whenever the `observable` changes.\n   * You can pass in an array of classes, or a function that returns a list of classes.\n   * \n   * @param {IObservable} observable - The observable to listen to.\n   * @param {string[] | ((self: CTag) => string[])} classes - The classes to add to the element. Can be an array of strings or a function that returns an array of strings.\n   * @return {CTag} - The current CTag instance, allowing for method chaining.\n   * \n   * @example\n   * ```ts\n   * const isActive = createObservable(true);\n   * const tag = new CTag('div');\n   * \n   * // Adds 'inactive' classes when isActive is false\n   * tag.classIfNot(isActive, ['inactive']); \n   * ```\n   */\n  classIfNot<T>(observable: IObservable<T>, classes: string[] | ((self: CTag) => string[])) {\n    return this.classIf(observable, classes, true);\n  }\n\n  /**\n   * Sets `text` when the consumer is true, and sets `elseText (default='')` when the consumer is false.\n   * Both `text` and `elseText` can be a string or a function that returns a string.\n   * Updates whenever the observable changes.\n   * If `invert` is set to true, the condition will be inversed, but you can also use {@link textIfNot}\n   * \n   * @param {IObservable} observable - The observable to listen to.\n   * @param {string | ((self: CTag) => string)} text - The text to set when the observable is truthy. Can be a string or a function that returns a string.\n   * @param {string | ((self: CTag) => string)} [elseText=''] - The text to set when the observable is falsy. Can be a string or a function that returns a string. Defaults to an empty string.\n   * @param {boolean} [invert=false] - If true, the condition will be inversed.\n   * @return {CTag} - The current CTag instance, allowing for method chaining.\n   */\n  textIf<T>(\n    observable: IObservable<T>,\n    text: string | ((self: CTag) => string),\n    elseText: string | ((self: CTag) => string) = '',\n    invert = false,\n  ) {\n    return this.doIf(\n      observable,\n      () => this.text(val(text, this)),\n      () => this.text(val(elseText, this)),\n      invert,\n    );\n  }\n\n  /**\n   * Sets text when the consumer is falsy, and sets `elseText (default='')` when the consumer is truthy.\n   * Both text and `elseText` can be a string or a function that returns a string.\n   * Updates whenever the observable changes.\n   */\n  textIfNot<T>(\n    observable: IObservable<T>,\n    text: string | ((self: CTag) => string),\n    elseText: string | ((self: CTag) => string) = '',\n  ) {\n    return this.textIf(observable, text, elseText, true);\n  }\n\n  /**\n   * Add attribute to the element when the consumer is truthy. Updates whenever the observable changes.\n   * `value` can be a string or a function that returns a string.\n   * If `invert` is set to true, the condition will be inversed, but you can also use {@link attrIfNot}\n   */\n  attrIf<T>(observable: IObservable<T>, attr: CommonAttributes, value: string | ((self: CTag) => string) = '', invert = false) {\n    return this.doIf(\n      observable,\n      () => this.addAttr(attr, val(value, this)),\n      () => this.rmAttr(attr),\n      invert,\n    );\n  }\n\n  /**\n   * Add attribute to the element when the consumer is falsy. Updates whenever the observable changes.\n   * `value` can be a string or a function that returns a string.\n   * If `invert` is set to true, the condition will be inversed\n   */\n  attrIfNot<T>(observable: IObservable<T>, attr: CommonAttributes, value: string | ((self: CTag) => string) = '') {\n    return this.attrIf(observable, attr, value, true);\n  }\n\n  /**\n   * Disable this element when the consumer is truthy. Updates whenever the observable changes.\n   * If `invert` is set to true, the condition will be inversed, but you can also use {@link disableIfNot}\n   */\n  disableIf<T>(observable: IObservable<T>, invert = false) {\n    return this.attrIf(observable, 'disabled', '', invert);\n  }\n\n  /** Disable this element when the consumer is falsy. Updates whenever the observable changes. */\n  disableIfNot<T>(observable: IObservable<T>) {\n    return this.disableIf(observable, true);\n  }\n\n  /**\n   * Add style to the element when the consumer is truthy. Updates whenever the observable changes.\n   * If `invert` is set to true, the condition will be inversed, but you can also use {@link styleIfNot}\n   * `value` can be a string or a function that returns a string.\n   */\n  styleIf<T>(observable: IObservable<T>, style: string, value: string | ((self: CTag) => string) = '', invert = false) {\n    return this.doIf(\n      observable,\n      () => this.addStyle(style, val(value, this)),\n      () => this.rmStyle(style),\n      invert,\n    );\n  }\n\n  /**\n   * Add style to the element when the consumer is falsy. Updates whenever the observable changes.\n   * `value` can be a string or a function that returns a string.\n   */\n  styleIfNot<T>(observable: IObservable<T>, style: string, value: string | ((self: CTag) => string) = '') {\n    return this.styleIf(observable, style, value, true);\n  }\n\n  /**\n   * Add multiple styles to the element when the consumer is truthy. Updates whenever the observable changes.\n   * `styles` can be a {@link StyleMap} or a function that returns a {@link StyleMap}.\n   * If `invert` is set to true, the condition will be inversed, but you can also use {@link stylesIfNot}\n   */\n  stylesIf<T>(observable: IObservable<T>, styles: StyleMap | ((self: CTag) => StyleMap), invert = false) {\n    return this.doIf(\n      observable,\n      () => this.setStyle(val(styles, this)),\n      () => this.rmStyle(...Object.keys(styles)),\n      invert,\n    );\n  }\n\n  /**\n   * Add multiple styles to the element when the consumer is falsy. Updates whenever the observable changes.\n   * `styles` can be a {@link StyleMap} or a function that returns a {@link StyleMap}.\n   * For the oposite use  {@link stylesIf}\n   */\n  stylesIfNot<T>(observable: IObservable<T>, styles: StyleMap | ((self: CTag) => StyleMap)) {\n    return this.stylesIf(observable, styles, true);\n  }\n\n  /**\n   * Adds a `stylesheet` to main style manager, and adds the `className` to the element.\n   * This is useful for adding styles to the element that are not inline styles.\n   * By doing this we can have just one style definition for tags that will have the same styles.\n   * \n   * @see https://github.com/nombrekeff/cardboard-js/wiki/Styling#6-advanced-styling-child-elements\n   * \n   * @param {NestedStyleMap} stylesheet - The stylesheet to add to the style manager.\n   * @param {string} [className] - The class name to add to the element. If not provided, a random UUID will be generated.\n   * @return {CTag} - The current CTag instance, allowing for method chaining.\n   */\n  styled(stylesheet: NestedStyleMap | undefined, className?: string): CTag {\n    // TODO(nombrekeff): sanitizing className might be a good idea\n    className ??= uuidv4();\n\n    if (stylesheet) {\n      context.styleManager?.add({\n        [`.${className}`]: stylesheet,\n      });\n    }\n\n    return this.addClass(className);\n  }\n\n  /**\n   * If {textTemplate} is provided, it sets the `textContent` of the element.\n   * If {textTemplate} is provided, and a state is provided. It will use the {textTemplate} as a template,\n   * that will be interpolated with the values in the state, each time the state changes. It acts like {@link text}\n   *\n   * If no argument is provided, it returns the `textContent` of the element.\n   * @see https://github.com/nombrekeff/cardboard-js/wiki/Managing-Text\n   */\n  text<T extends Record<string, Primitive>, K extends TextObj, J extends string>(textTemplate?: string, obj?: IObservable<T> | K): J extends string ? CTag : string {\n    if (textTemplate == null) {\n      return this.el.textContent as any;\n    }\n\n    if (obj && textTemplate) {\n      return this.setChildren([text(textTemplate, obj)]) as any;\n    }\n\n    this.el.textContent = textTemplate;\n\n    return this as any;\n  }\n\n  /**\n   * Configure the element in a single call by passing @param {TagConfig} c\n   * instead of having to call a method for each property you want to change\n   * \n   * @param {TagConfig} c - The configuration object containing properties to set on the element.\n   * @returns {CTag} - The current CTag instance, allowing for method chaining\n   * \n   * @example\n   * ```ts\n   * const tag = new CTag('div');\n   * tag.config({\n   *   attr: { id: 'my-div', 'data-custom': 'value' },\n   *   classList: ['class1', 'class2'],\n   *   className: 'my-class',\n   *   style: { color: 'red', backgroundColor: 'blue' },\n   *   text: 'Hello World',\n   *   value: 'Initial Value',\n   *   children: [new CTag('span', ['Child Text'])],\n   *   on: {\n   *     click: (self, evt) => console.log('Clicked!', self),\n   *   },\n   * });\n   * ```\n   */\n  config(c: TagConfig) {\n    if (c.attr) this.setAttrs(c.attr);\n    if (c.classList) this.addClass(...c.classList);\n    if (c.className) this.setClassName(c.className);\n    if (c.style) this.setStyle(c.style);\n    if (c.text) this.text(c.text);\n    if (c.value) this.setValue(c.value);\n    if (c.children) this.append(...c.children);\n    if (c.on) {\n      for (const key of Object.keys(c.on)) {\n        this.on(key, c.on[key]);\n      }\n    }\n\n    return this;\n  }\n\n  /** \n   * Add classes to the elements class list.\n   * \n   * @param {...string} classes - The classes to add to the element's class list.\n   * @returns {CTag} - The current CTag instance, allowing for method chaining\n   * \n   * @example\n   * ```ts\n   * const tag = new CTag('div');\n   * tag.addClass('class1', 'class2');\n   * ```\n   */\n  addClass(...classes: string[]) {\n    this.classList.add(...classes);\n    return this;\n  }\n\n  /** Set the elements class name */\n  setClassName(className: string) {\n    this.el.className = className;\n    return this;\n  }\n\n  /** Remove classes from class list */\n  rmClass(...classes: string[]) {\n    for (const key of classes) {\n      this.classList.remove(key);\n    }\n    return this;\n  }\n\n  /** Check if classes are present in this element */\n  hasClass(...classes: string[]) {\n    for (const key of classes) {\n      if (!this.classList.contains(key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /** Replace a class with another */\n  replaceClass(targetClass: string, replaceClass: string) {\n    this.classList.replace(targetClass, replaceClass);\n    return this;\n  }\n\n  /** Toggle a class. If it's present it's removed, if it's not present its added. */\n  toggleClass(targetClass: string): CTag {\n    return this.hasClass(targetClass) ? this.rmClass(targetClass) : this.addClass(targetClass);\n  }\n\n  /** Add a single style */\n  addStyle<K extends CssProperty>(property: K, value: PickPropertyValues<K>) {\n    this.el.style[property as string] = value;\n    return this;\n  }\n\n  /** Set multiple styles at once */\n  setStyle(styles: StyleMap) {\n    for (const key in styles) {\n      this.addStyle(key, styles[key] ?? '');\n    }\n    return this;\n  }\n\n  /** Remove styles */\n  rmStyle(...styleNames: string[]) {\n    for (const key of styleNames) {\n      this.style.removeProperty(camelToDash(key));\n    }\n    return this;\n  }\n\n  /** Check if this element has styles */\n  hasStyle(...styles: CssProperty[]) {\n    for (const key of styles) {\n      if (!this.style.getPropertyValue(camelToDash(key))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /** Adds a set of attributes to the element */\n  setAttrs(attrs: Record<string, string | undefined>) {\n    for (const key in attrs) {\n      this.addAttr(key, attrs[key]);\n    }\n    return this;\n  }\n\n  /** Adds a single attribute to the element */\n  addAttr(key: CommonAttributes, value: string = '') {\n    this.el.attributes[key as string] = value;\n    this.el.setAttribute(key, value);\n    return this;\n  }\n\n  /** Remove attributes from the element */\n  rmAttr(...attrs: CommonAttributes[]) {\n    for (const key of attrs) {\n      this.el.removeAttribute(key);\n      delete this.el.attributes[key];\n    }\n    return this;\n  }\n\n  /** Check if this element has attributes */\n  hasAttr(...attr: CommonAttributes[]) {\n    for (const key of attr) {\n      if (!(key in this.el.attributes)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /** Get an attributes value */\n  getAttr(attr: CommonAttributes) {\n    return this.el.attributes[attr];\n  }\n\n  // TODO: Might be a good idea to return the listener so it can be removed later\n  /**\n   * Listen to an event on the element. Like addEventListener.\n   */\n  listen<K extends keyof HTMLElementEventMap>(\n    tag: CTag,\n    evt: K,\n    consumer: (self: CTag, other: CTag, evt: HTMLElementEventMap[K]) => void,\n  ) {\n    return tag.on(evt, (other, evt) => {\n      consumer(this, other, evt);\n    });\n  }\n\n  /**\n   * Returns a {@link IObservable} that fires when the Event `evtName` is fired in this element\n   * The return value of `fn` will be passed to the listeners of the {@link IObservable}\n   * \n   * @param {K} evtName - The name of the event to listen for. For a list of valid event names, see {@link HTMLElementEventMap \"available event names\"}.\n   * @param {fn} fn - The callback function to execute when the event is triggered.\n   * @returns {IObservable<any>} - An observable that emits the return value of the callback function when the event is triggered.\n   */\n  when<K extends keyof HTMLElementEventMap>(\n    evtName: K | string,\n    fn: (self: CTag, evt: HTMLElementEventMap[K]) => any,\n  ): IObservable<any> {\n    const cons = createObservable<any>({});\n    this.on(evtName, (t, evt) => {\n      cons.dispatch(fn(t, evt));\n    });\n    return cons;\n  }\n\n  // TODO: Might be a good idea to return the listener so it can be removed later\n  /** \n   * Add an event listener for a particular HTMLElement event \n   * \n   * @param {K} evtName - The name of the event to listen for. For a list of valid event names, see {@link HTMLElementEventMap \"available event names\"}.\n   * @param {fn} fn - The callback function to execute when the event is triggered.\n   * @returns {CTag} - The current CTag instance, allowing for method chaining\n   */\n  on<K extends keyof HTMLElementEventMap>(\n    evtName: K | string,\n    fn: (tag: CTag, evt: HTMLElementEventMap[K]) => void\n  ): CTag {\n    if (fn) {\n      const cb = (evt: any) => fn(this, evt);\n      this.el.addEventListener(evtName, cb);\n      this._destroyers.push(() => {\n        this.el.removeEventListener(evtName, cb);\n      });\n    }\n    return this;\n  }\n\n  /** \n   * Add an event listener for a particular event that will only fire once\n   * @param {K} evtName - The name of the event to listen for. For a list of valid event names, see {@link HTMLElementEventMap \"available event names\"}.\n   * @param {fn} fn - The callback function to execute when the event is triggered.\n   * @returns {CTag} - The current CTag instance, allowing for method chaining\n   */\n  once<K extends keyof HTMLElementEventMap>(\n    evtName: K & string,\n    fn: (tag: CTag, evt: HTMLElementEventMap[K]) => void\n  ): CTag {\n    const listener = (evt) => {\n      fn(this, evt);\n      this.el.removeEventListener(evtName, listener);\n    };\n    this.el.addEventListener(evtName, listener);\n    return this;\n  }\n\n  // TODO: nombrekeff: maybe remove these convenience methods. Would free some space in the bundle\n  /** Add a **click** event listener */\n  clicked(fn: (tag: CTag, evt: MouseEvent) => void): CTag {\n    return this.on('click', fn);\n  }\n\n  /** Add a **keypress** event listener */\n  keyPressed(fn: (tag: CTag, evt: KeyboardEvent) => void, key?: string): CTag {\n    if (key) {\n      return this.on('keypress', (_, evt) => {\n        if (evt.code === key || evt.key === key) {\n          fn(this, evt);\n        }\n      });\n    }\n\n    return this.on('keypress', fn);\n  }\n\n  /** Add a **change** event listener */\n  changed(fn: (tag: CTag, evt: Event) => void): CTag {\n    return this.on('change', fn);\n  }\n\n  /** Add a **submit** event listener */\n  submited(fn: (tag: CTag, evt: SubmitEvent) => void): CTag {\n    return this.on('submit', fn);\n  }\n\n  /**\n   * Remove element from the DOM, but keep data as is. Can then be added again.\n   * To fully remove the element use {@link destroy}\n   * \n   * **USE WITH CAUTION!** Not intended to be used in most cases.\n   */\n  async remove(): Promise<CTag> {\n    // Might be a promise (it's overriden by `withLifecycle`)\n    const result: any = this.el.remove();\n    if (result instanceof Promise) {\n      await result;\n    }\n\n    await (this.el as any).remove();\n    return this;\n  }\n\n  /**\n   * Destroy the element, should not be used afterwards\n   * \n   * **USE WITH CAUTION!** Not intended to be used in most cases.\n   */\n  destroy(): void {\n    context.intObs?.unobserve(this.el);\n    this._children.forEach((cl) => {\n      if (cl instanceof CTag) {\n        cl.destroy();\n      }\n    });\n\n    this._destroyers.forEach(listener => listener());\n    this._children = [];\n    this._cachedChildren = [];\n    void this.remove();\n  }\n\n  /**\n   * Clears the `value` of the element. If you are getting the value and then clearing, consider using {@link consumeValue}\n   */\n  clear(): CTag {\n    (this.el as any).value = '';\n    // Trigger input event, so clearing is treated as input!\n    this.el.dispatchEvent(new InputEvent('input'));\n    return this;\n  }\n\n  /** Disable the element */\n  disable(): CTag {\n    return this.setDisabled(true);\n  }\n\n  /** Enable the element */\n  enable(): CTag {\n    return this.setDisabled(false);\n  }\n\n  /** \n   * Set whether the element should be disabled or not. It sets the `disabled` attribute.\n   */\n  setDisabled(disabled: boolean): CTag {\n    return disabled ? this.addAttr('disabled') : this.rmAttr('disabled');\n  }\n\n  /** \n   * Query a child in this element (in the DOM)\n   * \n   * @param {string} selector - The CSS selector to query the child element.\n   * @returns {CTag | undefined} - Returns a CTag instance if the element is found, or undefined if not found.\n   * \n   * @example\n   * ```ts\n   * const childTag = parentTag.q('.child-class');\n   * ```\n   */\n  q(selector): CTag | undefined {\n    const element = this.el.querySelector(selector);\n    if (element) return new CTag(element);\n  }\n\n  /** \n   * Find a child in this element (in the DOM or NOT)\n   * @param {function} predicate - A function that takes a TagChild and returns true if it matches the condition.\n   * @returns {TagChild | undefined} - Returns the first TagChild that matches the predicate, or undefined if no match is found.\n   */\n  find(predicate: (el: TagChild) => boolean): TagChild | undefined {\n    for (const child of this._children) {\n      if (predicate(child)) {\n        return child;\n      }\n    }\n  }\n\n  /**\n   * Find a CTag child in this element (in the DOM or NOT)\n   * @param {function} predicate - A function that takes a CTag and returns true if it matches the condition.\n   * @returns {CTag | undefined} - Returns the first CTag that matches the predicate, or undefined if no match is found.\n   */\n  findTag(predicate: (el: CTag) => boolean): CTag | undefined {\n    for (const child of this._children) {\n      if (child instanceof CTag && predicate(child)) {\n        return child;\n      }\n    }\n  }\n\n\n  private _childrenFilterPredicate(item) {\n    if (item instanceof CTag && item._meta.isHidden) {\n      return false;\n    }\n    return true;\n  }\n\n\n  private _getElementForChild(cl: TagChild): Node | null {\n    if (typeof cl === 'string') return document.createTextNode(cl);\n    if (isObservable(cl)) {\n      return text('$val', { val: (cl as IObservable) });\n    }\n    if (cl instanceof CTag) return cl.el;\n    if (cl instanceof Node) return cl;\n    return null;\n  }\n\n  // Update cached child nodes whenever this elements childs change\n  // This makes it a lot faster to get children.\n  // If the children have not changed, there's no need to set the children, use the previous ones\n\n  private _observer: MutationObserver;\n\n  private _getChildren(element: HTMLElement) {\n    if (!this._observer) {\n      this._observer = new window.MutationObserver(() => {\n        this._cacheChildren(element);\n      });\n      this._observer.observe(this.el, { childList: true });\n      this._cacheChildren(element);\n    }\n    return this._cachedChildren;\n  }\n\n\n  private _cacheChildren(element: HTMLElement) {\n    const nodes = element.childNodes,\n      children: Node[] = [];\n    let i = nodes.length;\n\n    while (i--) {\n      if (nodes[i].nodeType === 1) {\n        children.unshift(nodes[i]);\n      }\n    }\n\n    this._cachedChildren = children;\n  }\n\n\n  private _mapChildren(children: TagChildren): Node[] {\n    const mapped: Node[] = [];\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      // for (const child of children) {\n      if (child instanceof CTag) {\n        child.parent = this;\n      }\n\n      if (this._childrenFilterPredicate(child)) {\n        const element = this._getElementForChild(child);\n        if (element != null) mapped.push(element);\n      }\n    }\n    return mapped;\n  }\n}\n\n/**\n * This function can do the following based on the first argument:\n * * create a tag if you provide a tag name: (`div`, `abbr`, `custom-tag`, ...),\n * * wrap around an existing element in the page if you pass in a selector: (`'(body)'`, `'(#id)'`, `'(.class)'`), any selector is allowed.\n * * wrap around an element passed in\n *\n * Then it can receive a list of children to be added.\n * Receives a third argument for mounting this tag to the currently mounted tag ({@link context.mp}).\n *\n * @example\n * ```ts\n * tag('div');\n * tag('(body)');\n * tag('(.someclass)');\n * tag(document.querySelector('#something'));\n * ```\n */\nexport const tag = (arg0: string | HTMLElement, children: TagChildren = [], mountToParent: boolean = false) => {\n  checkInitialized();\n  return new CTag(arg0, children, mountToParent);\n};\n","import type { NestedStyleMap } from './types';\nimport { camelToDash, isObject } from './util.js';\n\nexport const genCss = (\n  styleSheet:\n    | Record<string, NestedStyleMap>\n    | Array<Record<string, NestedStyleMap>>,\n) => {\n  const stylesheets = styleSheet instanceof Array ? styleSheet : [styleSheet];\n  let generatedCss = '';\n\n  for (const sheet of stylesheets) {\n    for (const key in sheet) {\n      generatedCss += genBlock(key, sheet[key]);\n    }\n  }\n  return generatedCss;\n};\n\nexport const genBlock = (selector: string, style: NestedStyleMap): string => {\n  return genBlockContent(selector, style).join('');\n};\n\nexport const genBlockContent = (\n  selector: string,\n  style: NestedStyleMap,\n): string[] => {\n  let inside = '';\n  const blocks: string[] = [];\n\n  for (const key in style) {\n    if (isObject(style[key])) {\n      let newSelector = selector;\n\n      newSelector += key;\n\n      blocks.push(...genBlockContent(newSelector, style[key] as NestedStyleMap));\n    }\n    else if (style[key]) {\n      inside += `${camelToDash(key)}:${style[key] as string};`;\n    }\n  }\n\n  blocks.unshift(`${selector}{${inside}}`);\n\n  return blocks;\n};\n","import { genCss } from \"./css-generator.js\";\nimport { tag, CTag } from \"./tag.js\";\nimport { NestedStyleMap } from \"./types.js\";\n\nconst STYLE_TAG_ID = 'cardboard-styles';\n\nexport class StyleManager {\n    styleTag: CTag;\n    rules: Set<string>;\n\n    generatedIdsCount: number = 0;\n\n    constructor() {\n        this.rules = new Set();\n        let styleTag: CTag | null = null;\n\n        try {\n            styleTag = tag(`(#${STYLE_TAG_ID})`);\n        } catch (error) {\n            styleTag = tag('style').setId(STYLE_TAG_ID);\n        }\n\n        tag('(head)').append(styleTag);\n\n        this.styleTag = styleTag;\n    }\n\n    public add(styleSheet: Record<string, NestedStyleMap> | Array<Record<string, NestedStyleMap>>) {\n        const css = genCss(styleSheet);\n\n        if (!this.rules.has(css)) {\n            this.rules.add(css);\n            this.styleTag.append(css);\n        }\n    }\n}\n","import type { IObservable, State } from './types';\nimport { createObservable, getValue } from './observables.js';\n\n/**\n * `state` creates a reactive value that can the be used with tags to create dinamic and reactive apps.\n *\n * @see https://github.com/nombrekeff/cardboard-js/wiki/State\n *\n * @example\n * ```ts\n * const count = state(0);\n * count.changed(() => { ... });\n * count.dispatch(2);\n * count.value++;\n *\n * div().hideIf(count);\n * div().disableIf(count);\n * div(template('Count is: $count', { count: count }));\n * ```\n */\nexport const state = <T>(initialValue: T): State<T> => {\n  return createObservable(initialValue);\n};\n\n/**\n * `listState` creates a reactive list of values that can be used with tags to manage dynamic and reactive apps.\n * It wraps each item with a {@link State} (aka. {@link IObservable}) to allow for individual item reactivity.\n * @see https://github.com/nombrekeff/cardboard-js/wiki/ListState\n *\n * @example\n * ```javascript\n * const myList = listState([1, 2, 3]);\n *\n * myList.add(4);\n * myList.addAt(0, 0);\n * myList.remove(2);\n * myList.removeWhere(item => item === 3);\n * const listValues = myList.listValue;\n * const listLength = myList.length;\n *\n * // Listen to changes in the list\n * myList.list.changed(() => {\n *   // List has changed\n * });\n * ```\n */\nexport const listState = <T>(initialData: T[]) => {\n  const _list = state<Array<State<T>>>(\n    initialData.map((d) => createObservable(d)),\n  );\n\n  const add = (item: T) => {\n    stateAdd(_list, createObservable(item));\n  };\n\n  const addAt = (item: T, index: number) => {\n    stateAddAt(_list, createObservable(item), index);\n  };\n\n  return {\n    /**\n     * The reactive list of items.\n     * Each item is wrapped in a {@link State} to allow for individual reactivity.\n     */\n    get list() {\n      return _list;\n    },\n    /**\n     * The raw list of items.\n     */\n    get listValue() {\n      return _list.value;\n    },\n    add,\n    addAt,\n    remove: stateRemove.bind({}, _list),\n    removeWhere: stateRemoveWhere.bind({}, _list),\n    length: _list.computed((_list) => _list.length),\n  };\n};\n/**\n * `stateAdd` adds an item to a reactive list.\n * It creates a new array with the existing items and the new item, then updates the state.\n * \n * @example\n * ```typescript\n * const myList = state([]);\n * stateAdd(myList, 'new item');\n * ```\n */\nexport const stateAdd = <T>(state: State<T[]>, item: T) => {\n  state.value = [...state.value, item];\n};\n\n/**\n * `stateAddAt` adds an item to a reactive list at a specific index.\n * It creates a new array with the existing items and the new item at the specified index, then updates the state.\n * \n * @example\n * ```typescript\n * const myList = state([]);\n * stateAddAt(myList, 'new item', 0);\n * ```\n */\nexport const stateAddAt = <T>(state: State<T[]>, item: T, index: number) => {\n  let newData: any = [...state.value];\n  newData.splice(index, 0, item);\n  state.value = newData;\n  newData = [];\n};\n\n/**\n * `stateRemoveWhere` removes items from a reactive list based on a callback function.\n * It filters the list and updates the state with the remaining items.\n * \n * @example\n * ```typescript\n * const myList = state([1, 2, 3, 4]);\n * stateRemoveWhere(myList, (item) => item % 2 === 0); // Removes even numbers\n * ```\n */\nexport const stateRemoveWhere = <T>(state: State<T[]>, cb: (item: T, index: number) => boolean) => {\n  state.value = state.value.filter((el, i) => !cb(el, i));\n};\n\n/**\n * `stateRemove` removes a specific item from a reactive list.\n * It finds the index of the item in the list and calls `stateRemoveWhere` to remove it.\n * \n * @example\n * ```typescript\n * const myList = state([1, 2, 3, 4]);\n * stateRemove(myList, 2); // Removes the item with value 2\n * ```\n */\nexport const stateRemove = <T>(state: State<T[]>, item: T) => {\n  const index = state.value.findIndex(state => getValue(state) === getValue(item));\n  stateRemoveWhere(state, (_, i) => {\n    return index === i;\n  });\n};\n","import { isObservable } from './observables.js';\nimport { deepEquals } from './util.js';\nimport type { CTag } from './tag.js';\nimport type { IObservable, IObservableOr } from './types.js';\n\n/**\n * @enum {string}\n * @property {string} unchanged - The entry is unchanged.\n * @property {string} added - The entry was added.  \n * @property {string} removed - The entry was removed.\n * @property {string} swap - The entry was swapped with another entry.\n */\nexport enum DiffState {\n  unchanged = 'unchanged',\n  added = 'added',\n  removed = 'removed',\n  swap = 'swap',\n}\n\n/**\n * Represents a single entry in the diff process.\n * This interface is used to describe the state of an entry in the diff process,\n * including its index, the entry itself, and optionally the target entry and target index if it was swapped.\n * @property {DiffState} state - The state of the entry in the diff process.\n * @property {number} index - The index of the entry in the old data.\n * @property {T} entry - The entry itself.\n * @property {T} targetEntry - The target entry if the entry was swapped\n * @property {number} targetIndex - The index of the target entry if the entry was swapped.\n */\nexport interface DiffEntry<T = unknown> {\n  state: DiffState,\n  index: number,\n  entry: T,\n  targetEntry?: T;\n  targetIndex?: number,\n}\n\n/**\n * Render a {@link CTag} for each item in the provided list.\n *\n * `each` can work with a goold old array, or with a {@link IObservable}.\n * If you provide a `Observable`, the list will update whenever the `Observable` changes.\n *\n * @param observable - An array or an {@link IObservable} that contains the list of items to render.\n * @param builder - A function that takes an item from the list and returns a {@link CTag} to render.\n * @param key - An optional function that returns a unique key for each item in the list. This is used to optimize the rendering process.\n * \n * @see https://github.com/nombrekeff/cardboard-js/wiki/Logic\n *\n * @example\n * Static list\n * ```ts\n * const colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'];\n * div(\n *     each(colors, (color) =>\n *        button(color).addStyle('color', color)\n *     )\n * );\n * ```\n *\n * @example\n * Dynamic list\n * ```ts\n *  const colors = state(['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']);\n *  const selectedColor = state('red');\n *  div(\n *    each(colors, (color) =>\n *        button(color)\n *         .addStyle('color', color)\n *         .stylesIf(equalTo(selectedColor, color), { fontWeight: 'bold' });\n *    )\n *  );\n * ```\n */\nexport function each<T>(\n  observable: IObservableOr<T[]>,\n  builder: (val: T) => CTag,\n  key?: (val: T) => any,\n): Node {\n  const node = document.createTextNode(''), elements: CTag[] = [];\n  let oldData: T[] = [],\n    nodeParentIndex: number = 0,\n    elementsCopy: CTag[] = [];\n\n  // Inserts a new element into the DOM and the elements array at the specified index.\n  // Uses the transform function to create the element and places it before the next sibling or anchor node.\n  const actionAdd = (entry: DiffEntry<T>) => {\n    if (entry.index >= 0) {\n      const el = builder(entry.entry);\n      const elAt = elements[entry.index];\n      elements.splice(entry.index, 0, el);\n      node.parentElement?.insertBefore(el.el, elAt ? elAt.el : node);\n    }\n  };\n\n  // Removes the element at the specified index from the DOM and calls its destroy method.\n  // Also removes the element from the internal elements array to keep it in sync.\n  const actionRemove = (entry: DiffEntry<T>) => {\n    node.parentElement?.removeChild(elementsCopy[entry.index].el);\n    elementsCopy[entry.index].destroy();\n\n    // This is done because if we use the original index, and the array changes size,\n    // the indexes will not match\n    const i = elements.indexOf(elementsCopy[entry.index]);\n    elements.splice(i, 1);\n  };\n\n  // Swaps two elements in the DOM and updates their positions in the internal arrays.\n  // Ensures the visual order matches the new data order after a swap operation.\n  const actionSwap = (entry: DiffEntry<T>) => {\n    const fromIndex = entry.index,\n      toIndex = entry.targetIndex ?? 0;\n\n    if (fromIndex >= 0 && toIndex >= 0) {\n      const elementFrom = elementsCopy[fromIndex];\n      const elementTo = elementsCopy[toIndex];\n\n      const parentNode = elementFrom.el.parentNode;\n      const nextSiblingNode = elementFrom.el.nextSibling;\n\n      if (parentNode && nextSiblingNode === elementTo.el) {\n        parentNode.insertBefore(elementTo.el, elementFrom.el);\n      }\n      else if (elementTo.el.parentNode) {\n        elementTo.el.parentNode.insertBefore(elementFrom.el, elementTo.el);\n\n        if (nextSiblingNode && parentNode) {\n          parentNode.insertBefore(elementTo.el, nextSiblingNode);\n        }\n        else if (parentNode) {\n          parentNode.appendChild(elementTo.el);\n        }\n      }\n\n      const tempCopy = elementsCopy[fromIndex];\n      elementsCopy[fromIndex] = elementsCopy[toIndex];\n      elementsCopy[toIndex] = tempCopy;\n\n      const temp = elements[fromIndex];\n      elements[fromIndex] = elements[toIndex];\n      elements[toIndex] = temp;\n    }\n  };\n\n  // Map of actions to perform based on the diff state\n  // This is used to avoid using a switch statement, which is slower\n  // and to keep the code cleaner.\n  const actionMap = {\n    [DiffState.added]: actionAdd,\n    [DiffState.removed]: actionRemove,\n    [DiffState.swap]: actionSwap,\n  };\n\n  // Maximum number of tries to find the parent element\n  // This is used to avoid infinite loops in case the parent element is not found\n  const MAX_UPDATE_TRIES = 100;\n\n  // This function updates the list of elements based on the new data.\n  // It calculates the differences between the old and new data using `diffList`,\n  // and applies the necessary actions to the DOM.\n  const updateList = (newData: T[], tries = 0) => {\n    // If the node has no parent element, it means it has not been mounted yet,\n    // so we wait a bit and try again.\n    if (!node.parentElement) {\n      // If we have not reached the max tries, we wait a bit and try again\n      if (tries < MAX_UPDATE_TRIES) {\n        setTimeout(() => updateList(newData, tries + 1), 1);\n      } else {\n        console.warn(`[each]: parentElement not found after max retries`);\n      }\n      return;\n    }\n\n    if (!nodeParentIndex) {\n      const children = Array.from(node.parentElement?.childNodes ?? []);\n      nodeParentIndex = children.indexOf(node);\n    }\n\n    // Create the diff between the new data and the old data\n    const diff = diffList(newData, oldData, key);\n\n    // If the diff is empty, it means the data has not changed, so we do nothing\n    if (diff.length <= 0) return;\n\n    // Process the diff and apply the actions\n    for (let index = 0; index < diff.length; index++) {\n      const data = diff[index];\n      const nextIndex = diff[index + 1] ? diff[index + 1].index : null;\n      const nextState = diff[index + 1] ? diff[index + 1].state : null;\n      actionMap[data.state](data);\n      if (nextState === DiffState.swap && nextIndex === data.targetIndex) {\n        index++;\n      }\n    }\n\n    // Set the new data as the old data for the next update\n    oldData = [...newData].slice(0);\n\n    // Update the elementsCopy to match the new data\n    elementsCopy = elements.slice(0);\n  };\n\n  updateList('value' in observable ? observable.value : observable);\n\n  if (isObservable(observable)) {\n    (observable as IObservable).changed(updateList);\n  }\n\n  return node;\n}\n\n/**\n * Compares 2 lists, returns an array of {@link DiffEntry} with the operations needed to make in the `oldData` to create the new list.\n * It only returns the actions that are needed, if an element does not need to move, then it's not returned\n * \n * @param newData - The new data to compare against the old data.\n * @param oldData - The old data to compare against the new data.\n * @param key - A function that returns a unique key for each item in the list. This is used to optimize the rendering process.\n * @returns An array of {@link DiffEntry} objects that describe the differences between the two lists.\n */\nexport function diffList<T>(\n  newData: T[], oldData: T[],\n  key: (item: T) => any = (item: T) => item\n): Array<DiffEntry<T>> {\n  const diff: Array<DiffEntry<T>> = [],\n    newLength = newData.length,\n    oldLength = oldData.length;\n\n  // If the data is the same, don't do anything\n  if (newLength === oldLength && (newData == oldData || deepEquals(oldData, newData))) {\n    return diff;\n  }\n\n  // If all items have been removed, just remove them, no need to diff\n  if (newLength <= 0) {\n    for (let i = 0; i < oldLength; i++) {\n      diff[i] = {\n        entry: oldData[i],\n        state: DiffState.removed,\n        index: i,\n      };\n    }\n    return diff;\n  }\n\n  // If there was no data before, add all items\n  if (!oldLength) {\n    for (let i = 0; i < newLength; i++) {\n      diff[i] = {\n        entry: newData[i],\n        state: DiffState.added,\n        index: i,\n      };\n    }\n    return diff;\n  }\n\n  // Count of how many items have been removed so far (inside the loop)\n  let removedCount = 0;\n\n  // diff the old data with the new one\n  for (let oi = 0; oi < oldLength; oi++) {\n    const newEntry = newData[oi - removedCount],\n      oldEntry = oldData[oi],\n      areEqual = key(oldEntry) == key(newEntry);\n\n    if (areEqual || deepEquals(oldEntry, newEntry)) {\n      continue;\n    }\n\n    const existsNew = !!newData.find(item => key(oldEntry) == key(item)),\n      existsOld = !!oldData.find(item => key(newEntry) == key(item));\n\n    // If the new entry does not exist in the old data, it means it was added\n    if (!existsOld && existsNew) {\n      diff.push({\n        entry: newEntry,\n        state: DiffState.added,\n        index: oi - removedCount,\n      });\n      removedCount--;\n      continue;\n    }\n\n    // If the old entry does not exist in the new data, it means it was removed\n    // `newEntry` can be undefined if the newData is shorter than the oldData\n    // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n    if ((existsOld && !existsNew) || newEntry == null) {\n      diff.push({\n        entry: oldEntry,\n        state: DiffState.removed,\n        index: oi,\n      });\n      removedCount++;\n      continue;\n    }\n\n    // If the new entry exists in the old data, it means it was swapped\n    if (newData.indexOf(oldEntry) >= 0) {\n      diff.push({\n        entry: newEntry,\n        targetEntry: oldEntry,\n        state: DiffState.swap,\n        index: oldData.indexOf(newData[oi - removedCount]),\n        targetIndex: oldData.indexOf(oldData[oi]),\n      });\n\n      // This swaps items, this is needed to create cohesive swapping\n      const oldIndex = oldData.indexOf(newEntry);\n      const temp = oldData[oi];\n      oldData[oi] = newData[oi - removedCount];\n      oldData[oldIndex] = temp;\n      continue;\n    }\n  }\n\n  // Add any new items that were not in the old data\n  if (removedCount != oldLength) {\n    for (let i = oldLength - removedCount; i < newLength; i++) {\n      const newEntry = newData[i];\n      diff.push({\n        entry: newEntry,\n        state: DiffState.added,\n        index: i,\n      });\n    }\n  }\n\n  return diff;\n}\n","import { context, createGlobalObserver } from './cardboard.js';\nimport { type CTag } from './tag.js';\nimport { type AtLeastOne } from './types.js';\n\n\n/**\n * Will call {mounted} when the element is added to the DOM.\n * And will call {beforeUnmounted} before the element is removed from the DOM.\n * Finally will call {onUnmounted} when the element is removed from the DOM.\n */\nexport function onLifecycle(\n    tag: CTag,\n    onMounted?: (tag: CTag) => Promise<boolean> | boolean,\n    onUnmounted?: (tag: CTag) => void,\n    beforeUnmounted?: (tag: CTag) => Promise<boolean> | boolean,\n) {\n    if (beforeUnmounted) {\n        const tempElRemove = tag.el.remove;\n        tag.el.remove = async () => {\n            const result = beforeUnmounted(tag);\n            if (!result || (result instanceof Promise && (await result))) {\n                tempElRemove.call(tag.el);\n            }\n            return result.valueOf();\n        };\n    }\n\n    if (onMounted) {\n        const tempOnStart = tag.show;\n        tag.show = async () => {\n            const result = tempOnStart.call(tag);\n            if (result instanceof Promise) {\n                return await result;\n            }\n            return result;\n        };\n    }\n\n    if (!context.obs) {\n        context.obs = createGlobalObserver();\n    }\n\n    let onAddedCb, onRemovedCb;\n    context.obs.onAdded.listen(onAddedCb = async (node: Node) => {\n        let isAdded = node === tag.el || node.contains(tag.el);\n        if (isAdded && onMounted) {\n            const result = onMounted(tag);\n            if (result instanceof Promise) {\n                await result;\n            }\n        }\n    });\n    context.obs.onRemoved.listen(onRemovedCb = (node: Node) => {\n        let isRemoved = node === tag.el || node.contains(tag.el);\n        if (isRemoved && onUnmounted) {\n            onUnmounted(tag);\n        }\n    });\n\n    // Using `any` here to avoid TypeScript errors, as `_destroyers` is not typed in the CTag interface.\n    (tag as any)._destroyers.push(() => {\n        // Remove listeners and references (clear memory)\n        context.obs?.onRemoved.remove(onRemovedCb);\n        context.obs?.onAdded.remove(onAddedCb);\n        onUnmounted = undefined;\n        onMounted = undefined;\n    });\n};\n\n/**\n * `withLifecycle` is a utility function that adds lifecycle hooks to a Cardboard tag.\n * \n * Will call `handler.mounted` when the element is added to the DOM.  \n * Then call `handler.beforeUnmount` **before** the element is removed from the DOM.  \n * Finally call `handler.unmounted` **when** the element is removed from the DOM.  \n * \n * @example\n * ```typescript\n * const myTag = withLifecycle(\n *   div('Hello World'),\n *   {\n *     mounted: (tag) => {\n *       console.log('Mounted:', tag);\n *       return true; // or false to prevent mounting\n *     },                                       \n *     unmounted: (tag) => {\n *       console.log('Unmounted:', tag);\n *     },\n *     beforeUnmount: (tag) => {\n *       console.log('Before Unmount:', tag);\n *       return true; // or false to prevent unmounting\n *     },\n *    }\n *  );\n */\nexport const withLifecycle = (\n    tag: CTag,\n    handler: AtLeastOne<{\n        // Add object here so handlers can be seen when instecting the `withLifecycle` function.\n        // This is useful for IDEs to show the available properties.\n        mounted?: (tag: CTag) => Promise<boolean> | boolean;\n        unmounted?: (tag: CTag) => void;\n        beforeUnmounted?: (tag: CTag) => Promise<boolean> | boolean;\n    }>,\n): CTag => {\n    onLifecycle(tag, handler.mounted, handler.unmounted, handler.beforeUnmounted);\n    return tag;\n};\n","import { genCss } from \"./css-generator.js\";\nimport { CTag, tag } from \"./tag.js\";\nimport type { AllTags, StyleSet, TagBuilder, TagChildren } from \"./types.js\";\n\n\n/** Override any tag function we want, to give it some custom behaviour, process the children, etc... */\nconst interceptors: Record<string, TagBuilder | ((styles: StyleSet[]) => CTag)> = {\n  ul: (children: TagChildren, mountToParent: boolean = false) => {\n    return tag(\n      'ul',\n      children.map((cl) => {\n        return tag('li', [cl], mountToParent);\n      }),\n    );\n  },\n  style: (styles: StyleSet[], mountToParent: boolean = false) => {\n    return tag('style', [genCss(styles)], mountToParent);\n  },\n};\n\n/**\n * List of all HTML tag functions. From `div` to `abbr` :)\n * If you want to create any other tag, use the {@link tag} function.\n *\n * @type {AllTags}\n * @example\n * ```ts\n * const { div, p, abbr, img, style, ... } = allTags;\n * ```\n */\nexport const allTags: AllTags = new Proxy(\n  {},\n  {\n    get: (t, p, r) => {\n      const tagName = p.toString();\n      const fn = (...children: any[]) => {\n        return interceptors[tagName] ? interceptors[tagName](children, false) : tag(tagName, children);\n      };\n\n      Object.defineProperty(fn, 'mount', {\n        get: () => {\n          return (...children: any[]) => {\n            return interceptors[tagName] ? interceptors[tagName](children, true) : tag(tagName, children, true);\n          };\n        },\n      });\n\n      return fn;\n    },\n  },\n) as AllTags;\n","import * as _context from './context.js';\nimport * as _tag from './tag.js';\nimport * as _styles from './style-manager.js';\n\nexport * from './context.js';\nexport * from './tag.js';\nexport * from './state.js';\nexport * from './css-generator.js';\nexport * from './util.js';\nexport * from './text.js';\nexport * from './events.js';\nexport * from './each.js';\nexport * from './lifecycle.js';\nexport * from './observables.js';\nexport * from './all-tags.js';\nexport type * from './types';\n\n\n/**\n * It initializes the framework & makes the body tag the mount point ({@link mountPoint}).\n * You can pass in a selector for an element you want to be the default tag (\"body\" by default).\n */\nexport const init = (options: { selector: string } = { selector: 'body' }) => {\n  _context.context.init = true;\n  _context.context.obs = _context.createGlobalObserver();\n  _context.context.styleManager = new _styles.StyleManager();\n\n  const tag = new _tag.CTag(`(${options.selector})`);\n  return _context.mountPoint(tag);\n};\n\nexport const version = '0.0.7-alpha.2'; // This should be replaced with the actual version from package.json during the build process\n"],"mappings":"6MACO,IAAMA,EAAiB,CAAIC,EAASC,IAAe,CACxD,GAAI,CAACA,EAAM,MAAO,GAElB,IAAMC,EAAQD,EAAK,QAAQD,CAAI,EAE/B,OAAIE,IAAU,IACZD,EAAK,OAAOC,EAAO,CAAC,EACb,IAGF,EACT,EAEaC,EAAcC,GAAOA,EAAI,QAAQ,WAAYC,GAAO,IAAIA,EAAI,YAAY,CAAC,EAAE,EAE3EC,EAAYC,GAChB,OAAOA,GAAQ,UAAY,EAAEA,aAAe,OAExCC,EAAWD,GACf,OAAO,UAAU,SAAS,KAAKA,CAAG,IAAM,iBAEpCF,EAAM,CAAIA,KAAmCI,IACpD,OAAOJ,GAAQ,WACTA,EAAY,GAAGI,CAAI,EAEtBJ,EAEIK,GAAY,CAACC,EAAcC,EAAcC,IAAe,CACnE,IAAMC,EAAOH,EAAMC,CAAI,EACvB,OAAAD,EAAMC,CAAI,EAAID,EAAME,CAAE,EACtBF,EAAME,CAAE,EAAIC,EACLH,CACT,EACaI,GAAc,CAACC,EAAWC,IAAc,CACnD,GAAID,IAAMC,EAAG,MAAO,GAEpB,GADID,GAAK,MAAQC,GAAK,MAClBD,EAAE,SAAWC,EAAE,OAAQ,MAAO,GAOlC,QAASC,EAAI,EAAGA,EAAIF,EAAE,OAAQ,EAAEE,EAC9B,GAAIF,EAAEE,CAAC,IAAMD,EAAEC,CAAC,EAAG,MAAO,GAE5B,MAAO,EACT,EAIaC,EAAa,CAACH,EAAGC,IAAM,CAClC,GAAID,IAAMC,EAAG,MAAO,GACpB,GAAID,GAAKC,GAAKD,EAAE,SAAWC,EAAE,OAAQ,MAAO,GAE5C,GAAID,GAAKC,GAAK,OAAOD,GAAK,UAAY,OAAOC,GAAK,SAAU,CAC1D,GAAID,EAAE,cAAgBC,EAAE,YAAa,MAAO,GAE5C,IAAIG,EAAQF,EAAGG,EACf,GAAI,MAAM,QAAQL,CAAC,EAAG,CAEpB,GADAI,EAASJ,EAAE,OACPI,GAAUH,EAAE,OAAQ,MAAO,GAC/B,IAAKC,EAAIE,EAAQF,MAAQ,GACvB,GAAI,CAACC,EAAWH,EAAEE,CAAC,EAAGD,EAAEC,CAAC,CAAC,EAAG,MAAO,GACtC,MAAO,EACT,CAIA,GAAIF,EAAE,cAAgB,OAAQ,OAAOA,EAAE,SAAWC,EAAE,QAAUD,EAAE,QAAUC,EAAE,MAC5E,GAAID,EAAE,UAAY,OAAO,UAAU,QAAS,OAAOA,EAAE,QAAQ,IAAMC,EAAE,QAAQ,EAC7E,GAAID,EAAE,WAAa,OAAO,UAAU,SAAU,OAAOA,EAAE,SAAS,IAAMC,EAAE,SAAS,EAIjF,GAFAI,EAAO,OAAO,KAAKL,CAAC,EACpBI,EAASC,EAAK,OACVD,IAAW,OAAO,KAAKH,CAAC,EAAE,OAAQ,MAAO,GAE7C,IAAKC,EAAIE,EAAQF,MAAQ,GACvB,GAAI,CAAC,OAAO,UAAU,eAAe,KAAKD,EAAGI,EAAKH,CAAC,CAAC,EAAG,MAAO,GAEhE,IAAKA,EAAIE,EAAQF,MAAQ,GAAI,CAC3B,IAAII,EAAMD,EAAKH,CAAC,EAEhB,GAAI,CAACC,EAAWH,EAAEM,CAAG,EAAGL,EAAEK,CAAG,CAAC,EAAG,MAAO,EAC1C,CAEA,MAAO,EACT,CAGA,OAAON,IAAMA,GAAKC,IAAMA,CAC1B,EASO,SAASM,GAAYC,EAA2B,CACrD,OAAKA,EACE,KAAKA,CAAQ,GADEC,EAAO,CAE/B,CAEO,SAASA,GAAS,CACvB,MAAO,eAAe,QAAQ,SAAUC,IACrC,CAACA,EAAI,OAAO,gBAAgB,IAAI,WAAW,CAAC,CAAC,EAAE,CAAC,EAAI,IAAM,CAACA,EAAI,GAAG,SAAS,EAAE,CAChF,CACF,CCjGO,IAAMC,EAAN,KAAgB,CAAhB,cACL,KAAU,OAA+C,CAAC,EAE1D,OAAOC,EAAwB,CAC7B,KAAK,OAAO,KAAKA,CAAE,CACrB,CAEA,OAAOA,EAAwB,CAC7BC,EAAeD,EAAI,KAAK,MAAM,CAChC,CAEA,SAASE,EAAU,CACjB,KAAK,OAAO,QAASC,GAAOA,EAAGD,CAAI,CAAC,CACtC,CAEA,SAAU,CACR,KAAK,OAAS,CAAC,CACjB,CACF,EAcaE,EAAN,KAAsB,CAAtB,cACL,KAAQ,OAAoD,CAAC,EAE7D,OAAOC,EAAaL,EAAwB,CACpCK,KAAO,KAAK,OAGT,KAAK,OAAOA,CAAG,GACtB,KAAK,OAAOA,CAAG,EAAE,KAAKL,CAAE,EAHxB,KAAK,OAAOK,CAAG,EAAI,CAACL,CAAE,CAK1B,CAEA,OAAOK,EAAaL,EAAwB,CAC1CC,EAAeD,EAAI,KAAK,OAAOK,CAAG,CAAC,CACrC,CAEA,SAASA,EAAaH,EAAU,CAC1BG,KAAO,KAAK,QACd,KAAK,OAAOA,CAAG,EAAE,QAASF,GAAOA,EAAGD,CAAI,CAAC,CAE7C,CAEA,SAAU,CACR,KAAK,OAAS,CAAC,CACjB,CACF,EAEaI,EAAc,IAClB,IAAIP,EAGAQ,GAAc,IAClB,IAAIH,EC7DN,IAAMI,EAA4B,CACrC,GAAI,OACJ,UAAW,CAAC,EACZ,aAAc,OACd,OAAQ,OACR,IAAK,OACL,KAAM,EACV,EAEaC,EAAgB,IAAMD,EAAQ,OAAS,GACvCE,EAAmB,IAAM,CAClC,GAAI,CAACD,EAAc,EACf,MAAM,IAAI,MAAM,qFAAqF,CAE7G,EAKaE,GAAgB,IAAMH,EAAQ,GAuB9BI,EAAcC,IACnBL,EAAQ,IACRA,EAAQ,UAAU,KAAKA,EAAQ,EAAE,EAErCA,EAAQ,GAAKK,EACNA,GAQEC,GAAoB,IAAM,CACnCN,EAAQ,GAAKA,EAAQ,UAAU,IAAI,CACvC,EAKaO,GAAmB,IAAM,CAClCP,EAAQ,GAAK,OACbA,EAAQ,UAAY,CAAC,CACzB,EAOaQ,GAAmB,IAAM,CAClC,IAAIC,EAAQT,EAAQ,UAAU,MAAM,EACpCA,EAAQ,GAAKS,EACbT,EAAQ,UAAY,CAAC,CACzB,EAWaU,GAAiB,CAACL,EAAWM,IAAmC,CACzEP,EAAWC,CAAG,EACdM,EAAeN,CAAG,EAClBC,GAAkB,CACtB,EAGaM,EAAuB,IAAM,CACtC,IAAMC,EAAYC,EAAkB,EAC9BC,EAAcD,EAAkB,EAatC,OAXiB,IAAI,OAAO,iBAAiB,CAACE,EAAWC,IAAa,CAClE,QAAWC,KAAOF,EAAW,CACzB,QAAWG,KAAK,MAAM,KAAKD,EAAI,UAAU,EACrCL,EAAU,SAASM,CAAC,EAExB,QAAWA,KAAK,MAAM,KAAKD,EAAI,YAAY,EACvCH,EAAY,SAASI,CAAC,CAE9B,CACJ,CAAC,EAEQ,QAAQ,OAAO,SAAS,KAAM,CACnC,UAAW,GACX,QAAS,EACb,CAAC,EAEM,CACH,QAASN,EACT,UAAWE,CACf,CACJ,EC9HO,IAAMK,EAAN,cAAkCC,CAAoC,CAa3E,YAAYC,EAAQC,EAAwB,CAC1C,MAAM,EAkFR,cAAeC,GAA6BC,EAAQ,KAAMD,CAAS,EAGnE,iBAAc,CAACF,EAAsC,IAAMI,GAAY,KAAaJ,CAAG,EAEvF,mBAAgB,CAACA,EAA6B,IAAMK,GAAc,KAAaL,CAAG,EAElF,cAAW,CAACA,EAA6B,IAAMM,GAAS,KAAaN,CAAG,EAExE,gBAAa,CAACA,EAA6B,IAAMO,GAAW,KAAaP,CAAG,EAE5E,aAAcA,GAA0BQ,GAAQ,KAAaR,CAAG,EAEhE,gBAAiBA,GAA0BS,GAAW,KAAaT,CAAG,EAEtE,aAAU,IAA4BU,GAAQ,IAA6B,EAE3E,cAAW,IAA4BC,GAAS,IAA6B,EAE7E,UAAO,CAAoBC,EAAQC,IAAsBC,GAAK,KAAaF,EAAKC,CAAU,EAnGpFb,IAAQe,EAASf,CAAG,GAAKgB,EAAQhB,CAAG,KACtCA,EAAM,IAAI,MAAOA,EAAa,CAC5B,IAAIiB,EAAQC,EAAGC,EAAU,CACvB,OAAOF,EAAOC,CAAC,CACjB,EACA,IAAK,CAACD,EAAQC,EAAGE,EAAUD,KACrBF,EAAOC,CAAC,IAAME,IAElBH,EAAOC,CAAC,EAAIE,EACZ,MAAM,SAASH,CAAM,GACd,IAET,eAAgB,CAACA,EAAQC,KACvB,OAAOD,EAAOC,CAAC,EACf,MAAM,SAASD,CAAM,EACd,GAEX,CAAC,GAGH,KAAK,OAASjB,EACd,KAAK,WAAaC,CACpB,CAlCA,IAAI,OAAW,CACb,OAAO,KAAK,MACd,CAGA,IAAI,MAAMD,EAAQ,CAChB,KAAK,SAASA,CAAG,CACnB,CA6BA,SAAU,CACR,OAAO,KAAK,MACd,CAEA,UAAW,CACT,OAAQ,KAAK,OAAe,SAAS,CACvC,CAKA,QAAQqB,EAA4B,CAClC,YAAK,OAAOA,CAAQ,EACb,IACT,CAKA,OAAOA,EAA4B,CACjC,aAAM,OAAOA,CAAQ,EACd,IACT,CAMA,SAASrB,EAAQ,CACf,OAAIA,IAAQ,KAAK,OACR,MAET,KAAK,OAASA,EACd,MAAM,SAASA,CAAG,EACX,KACT,CAEA,SAAU,CACJ,KAAK,YAAY,KAAK,WAAW,EACpC,KAAK,OAAiB,KACvB,MAAM,QAAQ,CAChB,CAmCF,EAOasB,EAAgBC,GACpBA,aAAezB,EAYX0B,EAAmB,CAAIxB,EAAQC,IACnC,IAAIH,EAAcE,EAAKC,CAAS,EAqB5BE,EAAU,CACrBsB,EACAvB,IACmB,CAEnB,IAAIwB,EAEEC,EAAM3B,GAAQ0B,GAAA,YAAAA,EAAY,SAASxB,EAAUF,CAAG,GAEtD,OAAA0B,EAAaF,EAAoBtB,EAAUuB,EAAM,KAAK,EAAG,IAAM,CAG7DA,EAAM,OAAOE,CAAE,EACfD,EAAa,KACZD,EAAgB,IACnB,CAAC,EAEDA,EAAM,QAAQE,CAAE,EAETD,CACT,EAaaE,GAAkB,CAC7BC,EACA3B,IACmB,CACnB,IAAM4B,EAAON,EAAoBtB,EAAU,GAAI2B,EAAY,IAAIE,GAAKA,EAAE,KAAK,CAAS,CAAC,EAErF,QAAWN,KAASI,EAClBJ,EAAM,QAAQ,IAAMK,EAAK,SACvB5B,EAAU,GAAI2B,EAAY,IAAIE,GAAKA,EAAE,KAAK,CAAS,CACrD,CAAC,EAEH,OAAOD,CACT,EAGaE,EAAehC,GACnBsB,EAAatB,CAAG,EAAKA,EAAuB,MAAQA,EAIhDI,GAAc,CAACsB,EAAiC1B,EAAoC,IACxFG,EAAQuB,EAAaO,GAAWA,EAASD,EAAShC,CAAG,CAAC,EAIlDK,GAAgB,CAACqB,EAAiC1B,EAA6B,IACnFG,EAAQuB,EAAaO,GAAWA,GAAUD,EAAShC,CAAG,CAAC,EAInDM,GAAW,CAACoB,EAAiC1B,EAA6B,IAC9EG,EAAQuB,EAAaO,GAAWA,EAASD,EAAShC,CAAG,CAAC,EAIlDO,GAAa,CAACmB,EAAiC1B,EAA6B,IAChFG,EAAQuB,EAAaO,GAAWA,GAAUD,EAAShC,CAAG,CAAC,EAInDQ,GAAU,CAAIkB,EAA4B1B,IAC9CG,EAAQuB,EAAaO,GAAWA,IAAWD,EAAShC,CAAG,CAAC,EAIpDS,GAAa,CAAIiB,EAA4B1B,IACjDG,EAAQuB,EAAaO,GAAWA,IAAWD,EAAShC,CAAG,CAAC,EAIpDU,GAAiCgB,GACrCvB,EAAQuB,EAAaO,GAAWA,EAAO,QAAU,CAAC,EAI9CtB,GAAkCe,GACtCvB,EAAQuB,EAAaO,GAAWA,EAAO,OAAS,CAAC,EAI7CnB,GAAO,CAAuBY,EAA4Bd,EAAQC,IACtEV,EAAQuB,EAAaO,GAAWA,GAAUA,EAAOrB,CAAG,EAAIqB,EAAOrB,CAAG,EAAkBC,CAAU,EC3OhG,IAAMqB,EAAO,CAAyDC,EAAsBC,IAAmC,CACpI,IAAMC,EAAO,SAAS,eAAe,EAAE,EACrCC,EAAqB,kCAEvB,GAAI,CAACF,EACH,OAAAC,EAAK,UAAYF,EACVE,EAGT,IAAME,EAAcC,GAAoC,CACtDH,EAAK,UAAaG,EAEdL,EAAa,QAAQG,EAAoB,CAACG,EAAGC,IAAI,CArCzD,IAAAC,EAsCS,QAAAA,EAAAH,EAAKE,CAAE,IAAP,KAAAC,EAAYF,GAAG,SAAS,EAC3B,EAHEN,CAIN,EAEA,GAAIS,EAAaR,CAAG,EACjBA,EAAyC,QAASS,GAAQN,EAAWM,CAAG,CAAC,EAC1EN,EAAYH,EAAoB,KAAK,UAE9BU,EAASV,CAAG,EAAG,CACtB,QAAWW,KAAO,OAAO,oBAAoBX,CAAG,EAE1CD,EAAa,SAAS,IAAIY,CAAG,EAAE,GAAKH,EAAaR,EAAIW,CAAG,CAAC,GAC3DX,EAAIW,CAAG,EAAE,QAAQ,IAAMR,EAAWH,CAAU,CAAC,EAIjDG,EAAWH,CAAU,CACvB,CAEA,OAAOC,CACT,EChCO,IAAMW,EAAN,MAAMC,CAAK,CA+HhB,YAAYC,EAA6BC,EAAwB,CAAC,EAAGC,EAAyB,GAAO,CA1HrG,KAAQ,SAAW,GAsBnB,KAAiB,YAAsB,CAAC,EAcxC,KAAQ,UAAwB,CAAC,EAEjC,KAAQ,gBAA0B,CAAC,EAKnC,KAAiB,MAAQ,CACvB,SAAU,GACV,cAAe,IACjB,EA+EE,GAFmB,OAAOF,GAAS,UAAYA,EAAK,MAAM,QAAQ,EAElD,CACd,IAAMG,EAAQH,EAAK,MAAM,qCAAqC,EACxDI,EAAWD,EAAQA,EAAM,CAAC,EAAI,KACpC,GAAI,CAACC,EACH,MAAM,IAAI,MAAM,IAAIJ,CAAI,2BAA2B,EAGrD,IAAMK,EAAU,SAAS,cAAcD,CAAQ,EAE/C,GAAI,CAACC,EACH,MAAM,IAAI,MAAM,oCAAuCL,CAAI,EAG7D,KAAK,GAAKK,CACZ,SACS,OAAOL,GAAS,SACvB,KAAK,GAAK,SAAS,cAAcA,CAAI,EAEjCM,EAAQ,IAAMJ,GAChBI,EAAQ,GAAG,OAAO,IAAI,UAGjBN,aAAgB,YACvB,KAAK,GAAKA,MAGV,OAAM,IAAI,MAAM,qBAAuBA,CAAI,EAGzCC,EAAS,OAAS,GAAG,KAAK,YAAYA,CAAQ,EAGjD,KAAK,GAAW,IAAM,IACzB,CA7JA,IAAI,SAAU,CACZ,OAAO,KAAK,QACd,CAEA,IAAI,QAAQM,EAAmB,CAC7B,KAAK,SAAWA,EAChB,KAAK,GAAG,cAAc,IAAI,YAAY,UAAW,CAC/C,OAAQ,CACN,QAASA,EACT,IAAK,IACP,EACA,QAAS,GACT,SAAU,EACZ,CAAC,CAAC,CACJ,CAYA,IAAI,QAA2B,CAC7B,OAAO,KAAK,OACd,CAEA,IAAI,OAAOC,EAAiB,CAC1B,KAAK,QAAUA,CACjB,CAMA,IAAI,UAAW,CACb,OAAO,KAAK,aAAa,KAAK,EAAE,CAClC,CAUA,IAAI,OAAQ,CACV,OAAQ,KAAK,GAAW,KAC1B,CAKA,SAASD,EAAmB,CAC1B,OAAC,KAAK,GAAW,MAAQA,EAClB,IACT,CAMA,IAAI,SAAU,CACZ,OAAQ,KAAK,GAAW,OAC1B,CAKA,WAAWE,EAAkB,CAC3B,OAAC,KAAK,GAAW,QAAUA,EACpB,IACT,CAKA,IAAI,OAAQ,CACV,OAAO,KAAK,GAAG,KACjB,CAKA,IAAI,WAAY,CACd,OAAO,KAAK,GAAG,SACjB,CAKA,IAAI,WAAY,CACd,OAAO,KAAK,GAAG,SACjB,CAGA,IAAI,cAAe,CACjB,IAAMC,EAAQ,KAAK,MACnB,YAAK,MAAM,EACJA,CACT,CAKA,IAAI,IAAK,CACP,OAAO,KAAK,GAAG,EACjB,CAKA,MAAMC,EAAY,CAChB,YAAK,GAAG,GAAKA,EACN,IACT,CA2CA,YAAYV,EAAuB,CACjC,YAAK,GAAG,gBAAgB,GAAG,KAAK,aAAaA,CAAQ,CAAC,EACtD,KAAK,UAAYA,EACV,IACT,CAiBA,UAAUA,EAAuB,CAC/B,YAAK,GAAG,OAAO,GAAG,KAAK,aAAaA,CAAQ,CAAC,EAC7C,KAAK,UAAU,KAAK,GAAGA,CAAQ,EACxB,IACT,CAgBA,WAAWA,EAAuB,CAChC,YAAK,GAAG,QAAQ,GAAG,KAAK,aAAaA,CAAQ,CAAC,EAC9C,KAAK,UAAU,QAAQ,GAAGA,CAAQ,EAC3B,IACT,CAQM,MAAO,QAAAW,EAAA,sBACX,GAAI,KAAK,QAAU,CAAC,KAAK,OAAO,SAAS,SAAS,KAAK,EAAE,EAAG,CAC1D,IAAMC,EAAW,KAAK,OAAO,GAEvBC,EAAgB,KAAK,OAAO,UAAU,QAAQ,IAAI,EAGxD,GAAIA,IAAkB,EACpBD,EAAS,QAAQ,KAAK,EAAE,UAGjBC,IAAkB,KAAK,OAAO,UAAU,OAAS,EACxDD,EAAS,OAAO,KAAK,EAAE,MAGpB,CAEH,IAAIE,EAAe,EACnB,QAASC,EAAIF,EAAgB,EAAGE,GAAK,EAAGA,IAAK,CAC3C,IAAMC,EAAQ,KAAK,OAAO,UAAUD,CAAC,EACjCC,aAAiBlB,GAAQkB,EAAM,MAAM,UACvCF,GAEJ,CAIA,IAAMG,EAASL,EAAS,WAAWC,EAAgBC,CAAY,EAC/DF,EAAS,aAAa,KAAK,GAAIK,CAAM,CACvC,CACF,CACA,YAAK,MAAM,SAAW,GACf,EACT,GAOM,MAAO,QAAAN,EAAA,sBACP,KAAK,QAAU,KAAK,OAAO,SAAS,SAAS,KAAK,EAAE,IACtD,KAAK,OAAO,GAAG,aAAa,SAAS,cAAc,KAAK,GAAG,EAAE,EAAG,KAAK,EAAS,EAC9E,MAAM,KAAK,OAAO,EAClB,KAAK,MAAM,SAAW,GAE1B,GAsBA,QAAWO,EAA4BC,EAA8C,CACnF,GAAID,EAAW,QAAS,CACtB,IAAME,EAAMd,GAAaa,EAAS,KAAMb,CAAQ,EAChDY,EAAW,QAAQE,CAAE,EAErB,KAAK,YAAY,KAAK,IAAM,CAE1BF,EAAW,OAAOE,CAAE,EACnBF,EAAqB,IACxB,CAAC,CACH,MAEE,QAAQ,KAAK,qDAAqD,EAGpE,OAAAC,EAAS,KAAO,UAAWD,EAAcA,EAAW,MAAQA,CAAU,EAC/D,IACT,CAYA,KAAQA,EAA4BG,EAA6BC,EAA8BC,EAAS,GAAO,CAC7G,GAAIA,EAAQ,CACV,IAAMC,EAAOH,EACbA,EAASC,EACTA,EAAUE,CACZ,CAEA,IAAML,EAAW,CAACM,EAAGhB,IAAU,CAEvBA,EAAOY,EAAOZ,CAAK,EACpBa,EAAQb,CAAK,CACpB,EAEA,OAAO,KAAK,QAAQS,EAAYC,CAAQ,CAC1C,CAWA,QAAWD,EAA4BG,EAA4BC,EAA6B,CAC9F,OAAO,KAAK,KAAKJ,EAAYG,EAAQC,EAAS,EAAI,CACpD,CAiBA,OAAUJ,EAA4BK,EAAS,GAAO,CACpD,IAAMG,EAAa,CAACD,EAAGhB,IAAe,CACpC,IAAMkB,EAAiBJ,EAAS,CAACd,EAAQ,CAAC,CAACA,EAC3C,KAAK,MAAM,SAAWkB,EAEjB,KAAK,SACLA,EACK,KAAK,KAAK,EADM,KAAK,KAAK,EAEtC,EAEA,OAAO,KAAK,QAAQT,EAAYQ,CAAU,CAC5C,CAeA,UAAaR,EAA4B,CACvC,OAAO,KAAK,OAAOA,EAAY,EAAI,CACrC,CAsBA,QAAWA,EAA4BU,EAAgDL,EAAS,GAAO,CACrG,OAAO,KAAK,KACVL,EACA,IAAM,KAAK,SAAS,GAAGW,EAAID,EAAS,IAAI,CAAC,EACzC,IAAM,KAAK,QAAQ,GAAGC,EAAID,EAAS,IAAI,CAAC,EACxCL,CACF,CACF,CAoBA,WAAcL,EAA4BU,EAAgD,CACxF,OAAO,KAAK,QAAQV,EAAYU,EAAS,EAAI,CAC/C,CAcA,OACEV,EACAY,EACAC,EAA8C,GAC9CR,EAAS,GACT,CACA,OAAO,KAAK,KACVL,EACA,IAAM,KAAK,KAAKW,EAAIC,EAAM,IAAI,CAAC,EAC/B,IAAM,KAAK,KAAKD,EAAIE,EAAU,IAAI,CAAC,EACnCR,CACF,CACF,CAOA,UACEL,EACAY,EACAC,EAA8C,GAC9C,CACA,OAAO,KAAK,OAAOb,EAAYY,EAAMC,EAAU,EAAI,CACrD,CAOA,OAAUb,EAA4Bc,EAAwBvB,EAA2C,GAAIc,EAAS,GAAO,CAC3H,OAAO,KAAK,KACVL,EACA,IAAM,KAAK,QAAQc,EAAMH,EAAIpB,EAAO,IAAI,CAAC,EACzC,IAAM,KAAK,OAAOuB,CAAI,EACtBT,CACF,CACF,CAOA,UAAaL,EAA4Bc,EAAwBvB,EAA2C,GAAI,CAC9G,OAAO,KAAK,OAAOS,EAAYc,EAAMvB,EAAO,EAAI,CAClD,CAMA,UAAaS,EAA4BK,EAAS,GAAO,CACvD,OAAO,KAAK,OAAOL,EAAY,WAAY,GAAIK,CAAM,CACvD,CAGA,aAAgBL,EAA4B,CAC1C,OAAO,KAAK,UAAUA,EAAY,EAAI,CACxC,CAOA,QAAWA,EAA4Be,EAAexB,EAA2C,GAAIc,EAAS,GAAO,CACnH,OAAO,KAAK,KACVL,EACA,IAAM,KAAK,SAASe,EAAOJ,EAAIpB,EAAO,IAAI,CAAC,EAC3C,IAAM,KAAK,QAAQwB,CAAK,EACxBV,CACF,CACF,CAMA,WAAcL,EAA4Be,EAAexB,EAA2C,GAAI,CACtG,OAAO,KAAK,QAAQS,EAAYe,EAAOxB,EAAO,EAAI,CACpD,CAOA,SAAYS,EAA4BgB,EAA+CX,EAAS,GAAO,CACrG,OAAO,KAAK,KACVL,EACA,IAAM,KAAK,SAASW,EAAIK,EAAQ,IAAI,CAAC,EACrC,IAAM,KAAK,QAAQ,GAAG,OAAO,KAAKA,CAAM,CAAC,EACzCX,CACF,CACF,CAOA,YAAeL,EAA4BgB,EAA+C,CACxF,OAAO,KAAK,SAAShB,EAAYgB,EAAQ,EAAI,CAC/C,CAaA,OAAOC,EAAwCC,EAA0B,CAxlB3E,IAAAC,EA0lBI,OAAAD,GAAA,OAAAA,EAAcE,EAAO,GAEjBH,KACFE,EAAAhC,EAAQ,eAAR,MAAAgC,EAAsB,IAAI,CACxB,CAAC,IAAID,CAAS,EAAE,EAAGD,CACrB,IAGK,KAAK,SAASC,CAAS,CAChC,CAUA,KAA+EG,EAAuBC,EAA4D,CAChK,OAAID,GAAgB,KACX,KAAK,GAAG,YAGbC,GAAOD,EACF,KAAK,YAAY,CAACT,EAAKS,EAAcC,CAAG,CAAC,CAAC,GAGnD,KAAK,GAAG,YAAcD,EAEf,KACT,CA0BA,OAAOE,EAAc,CAQnB,GAPIA,EAAE,MAAM,KAAK,SAASA,EAAE,IAAI,EAC5BA,EAAE,WAAW,KAAK,SAAS,GAAGA,EAAE,SAAS,EACzCA,EAAE,WAAW,KAAK,aAAaA,EAAE,SAAS,EAC1CA,EAAE,OAAO,KAAK,SAASA,EAAE,KAAK,EAC9BA,EAAE,MAAM,KAAK,KAAKA,EAAE,IAAI,EACxBA,EAAE,OAAO,KAAK,SAASA,EAAE,KAAK,EAC9BA,EAAE,UAAU,KAAK,OAAO,GAAGA,EAAE,QAAQ,EACrCA,EAAE,GACJ,QAAWC,KAAO,OAAO,KAAKD,EAAE,EAAE,EAChC,KAAK,GAAGC,EAAKD,EAAE,GAAGC,CAAG,CAAC,EAI1B,OAAO,IACT,CAcA,YAAYd,EAAmB,CAC7B,YAAK,UAAU,IAAI,GAAGA,CAAO,EACtB,IACT,CAGA,aAAaQ,EAAmB,CAC9B,YAAK,GAAG,UAAYA,EACb,IACT,CAGA,WAAWR,EAAmB,CAC5B,QAAWc,KAAOd,EAChB,KAAK,UAAU,OAAOc,CAAG,EAE3B,OAAO,IACT,CAGA,YAAYd,EAAmB,CAC7B,QAAWc,KAAOd,EAChB,GAAI,CAAC,KAAK,UAAU,SAASc,CAAG,EAC9B,MAAO,GAGX,MAAO,EACT,CAGA,aAAaC,EAAqBC,EAAsB,CACtD,YAAK,UAAU,QAAQD,EAAaC,CAAY,EACzC,IACT,CAGA,YAAYD,EAA2B,CACrC,OAAO,KAAK,SAASA,CAAW,EAAI,KAAK,QAAQA,CAAW,EAAI,KAAK,SAASA,CAAW,CAC3F,CAGA,SAAgCE,EAAapC,EAA8B,CACzE,YAAK,GAAG,MAAMoC,CAAkB,EAAIpC,EAC7B,IACT,CAGA,SAASyB,EAAkB,CA/tB7B,IAAAG,EAguBI,QAAWK,KAAOR,EAChB,KAAK,SAASQ,GAAKL,EAAAH,EAAOQ,CAAG,IAAV,KAAAL,EAAe,EAAE,EAEtC,OAAO,IACT,CAGA,WAAWS,EAAsB,CAC/B,QAAWJ,KAAOI,EAChB,KAAK,MAAM,eAAeC,EAAYL,CAAG,CAAC,EAE5C,OAAO,IACT,CAGA,YAAYR,EAAuB,CACjC,QAAWQ,KAAOR,EAChB,GAAI,CAAC,KAAK,MAAM,iBAAiBa,EAAYL,CAAG,CAAC,EAC/C,MAAO,GAGX,MAAO,EACT,CAGA,SAASM,EAA2C,CAClD,QAAWN,KAAOM,EAChB,KAAK,QAAQN,EAAKM,EAAMN,CAAG,CAAC,EAE9B,OAAO,IACT,CAGA,QAAQA,EAAuBjC,EAAgB,GAAI,CACjD,YAAK,GAAG,WAAWiC,CAAa,EAAIjC,EACpC,KAAK,GAAG,aAAaiC,EAAKjC,CAAK,EACxB,IACT,CAGA,UAAUuC,EAA2B,CACnC,QAAWN,KAAOM,EAChB,KAAK,GAAG,gBAAgBN,CAAG,EAC3B,OAAO,KAAK,GAAG,WAAWA,CAAG,EAE/B,OAAO,IACT,CAGA,WAAWV,EAA0B,CACnC,QAAWU,KAAOV,EAChB,GAAI,EAAEU,KAAO,KAAK,GAAG,YACnB,MAAO,GAGX,MAAO,EACT,CAGA,QAAQV,EAAwB,CAC9B,OAAO,KAAK,GAAG,WAAWA,CAAI,CAChC,CAMA,OACEiB,EACAC,EACAC,EACA,CACA,OAAOF,EAAI,GAAGC,EAAK,CAACE,EAAOF,IAAQ,CACjCC,EAAS,KAAMC,EAAOF,CAAG,CAC3B,CAAC,CACH,CAUA,KACEG,EACAC,EACkB,CAClB,IAAMC,EAAOC,EAAsB,CAAC,CAAC,EACrC,YAAK,GAAGH,EAAS,CAACI,EAAGP,IAAQ,CAC3BK,EAAK,SAASD,EAAGG,EAAGP,CAAG,CAAC,CAC1B,CAAC,EACMK,CACT,CAUA,GACEF,EACAC,EACM,CACN,GAAIA,EAAI,CACN,IAAMlC,EAAM8B,GAAaI,EAAG,KAAMJ,CAAG,EACrC,KAAK,GAAG,iBAAiBG,EAASjC,CAAE,EACpC,KAAK,YAAY,KAAK,IAAM,CAC1B,KAAK,GAAG,oBAAoBiC,EAASjC,CAAE,CACzC,CAAC,CACH,CACA,OAAO,IACT,CAQA,KACEiC,EACAC,EACM,CACN,IAAMI,EAAYR,GAAQ,CACxBI,EAAG,KAAMJ,CAAG,EACZ,KAAK,GAAG,oBAAoBG,EAASK,CAAQ,CAC/C,EACA,YAAK,GAAG,iBAAiBL,EAASK,CAAQ,EACnC,IACT,CAIA,QAAQJ,EAAgD,CACtD,OAAO,KAAK,GAAG,QAASA,CAAE,CAC5B,CAGA,WAAWA,EAA6CZ,EAAoB,CAC1E,OAAIA,EACK,KAAK,GAAG,WAAY,CAACjB,EAAGyB,IAAQ,EACjCA,EAAI,OAASR,GAAOQ,EAAI,MAAQR,IAClCY,EAAG,KAAMJ,CAAG,CAEhB,CAAC,EAGI,KAAK,GAAG,WAAYI,CAAE,CAC/B,CAGA,QAAQA,EAA2C,CACjD,OAAO,KAAK,GAAG,SAAUA,CAAE,CAC7B,CAGA,SAASA,EAAiD,CACxD,OAAO,KAAK,GAAG,SAAUA,CAAE,CAC7B,CAQM,QAAwB,QAAA3C,EAAA,sBAE5B,IAAMgD,EAAc,KAAK,GAAG,OAAO,EACnC,OAAIA,aAAkB,UACpB,MAAMA,GAGR,MAAO,KAAK,GAAW,OAAO,EACvB,IACT,GAOA,SAAgB,CA35BlB,IAAAtB,GA45BIA,EAAAhC,EAAQ,SAAR,MAAAgC,EAAgB,UAAU,KAAK,IAC/B,KAAK,UAAU,QAASuB,GAAO,CACzBA,aAAc9D,GAChB8D,EAAG,QAAQ,CAEf,CAAC,EAED,KAAK,YAAY,QAAQF,GAAYA,EAAS,CAAC,EAC/C,KAAK,UAAY,CAAC,EAClB,KAAK,gBAAkB,CAAC,EACnB,KAAK,OAAO,CACnB,CAKA,OAAc,CACZ,OAAC,KAAK,GAAW,MAAQ,GAEzB,KAAK,GAAG,cAAc,IAAI,WAAW,OAAO,CAAC,EACtC,IACT,CAGA,SAAgB,CACd,OAAO,KAAK,YAAY,EAAI,CAC9B,CAGA,QAAe,CACb,OAAO,KAAK,YAAY,EAAK,CAC/B,CAKA,YAAYG,EAAyB,CACnC,OAAOA,EAAW,KAAK,QAAQ,UAAU,EAAI,KAAK,OAAO,UAAU,CACrE,CAaA,EAAE1D,EAA4B,CAC5B,IAAMC,EAAU,KAAK,GAAG,cAAcD,CAAQ,EAC9C,GAAIC,EAAS,OAAO,IAAIN,EAAKM,CAAO,CACtC,CAOA,KAAK0D,EAA4D,CAC/D,QAAW9C,KAAS,KAAK,UACvB,GAAI8C,EAAU9C,CAAK,EACjB,OAAOA,CAGb,CAOA,QAAQ8C,EAAoD,CAC1D,QAAW9C,KAAS,KAAK,UACvB,GAAIA,aAAiBlB,GAAQgE,EAAU9C,CAAK,EAC1C,OAAOA,CAGb,CAGQ,yBAAyB+C,EAAM,CACrC,MAAI,EAAAA,aAAgBjE,GAAQiE,EAAK,MAAM,SAIzC,CAGQ,oBAAoBH,EAA2B,CACrD,OAAI,OAAOA,GAAO,SAAiB,SAAS,eAAeA,CAAE,EACzDI,EAAaJ,CAAE,EACV9B,EAAK,OAAQ,CAAE,IAAM8B,CAAmB,CAAC,EAE9CA,aAAc9D,EAAa8D,EAAG,GAC9BA,aAAc,KAAaA,EACxB,IACT,CAQQ,aAAaxD,EAAsB,CACzC,OAAK,KAAK,YACR,KAAK,UAAY,IAAI,OAAO,iBAAiB,IAAM,CACjD,KAAK,eAAeA,CAAO,CAC7B,CAAC,EACD,KAAK,UAAU,QAAQ,KAAK,GAAI,CAAE,UAAW,EAAK,CAAC,EACnD,KAAK,eAAeA,CAAO,GAEtB,KAAK,eACd,CAGQ,eAAeA,EAAsB,CAC3C,IAAM6D,EAAQ7D,EAAQ,WACpBJ,EAAmB,CAAC,EAClBe,EAAIkD,EAAM,OAEd,KAAOlD,KACDkD,EAAMlD,CAAC,EAAE,WAAa,GACxBf,EAAS,QAAQiE,EAAMlD,CAAC,CAAC,EAI7B,KAAK,gBAAkBf,CACzB,CAGQ,aAAaA,EAA+B,CAClD,IAAMkE,EAAiB,CAAC,EACxB,QAASnD,EAAI,EAAGA,EAAIf,EAAS,OAAQe,IAAK,CACxC,IAAMC,EAAQhB,EAASe,CAAC,EAMxB,GAJIC,aAAiBlB,IACnBkB,EAAM,OAAS,MAGb,KAAK,yBAAyBA,CAAK,EAAG,CACxC,IAAMZ,EAAU,KAAK,oBAAoBY,CAAK,EAC1CZ,GAAW,MAAM8D,EAAO,KAAK9D,CAAO,CAC1C,CACF,CACA,OAAO8D,CACT,CACF,EAmBajB,EAAM,CAAClD,EAA4BC,EAAwB,CAAC,EAAGC,EAAyB,MACnGkE,EAAiB,EACV,IAAItE,EAAKE,EAAMC,EAAUC,CAAa,GCpkCxC,IAAMmE,EACXC,GAGG,CACH,IAAMC,EAAcD,aAAsB,MAAQA,EAAa,CAACA,CAAU,EACtEE,EAAe,GAEnB,QAAWC,KAASF,EAClB,QAAWG,KAAOD,EAChBD,GAAgBG,GAASD,EAAKD,EAAMC,CAAG,CAAC,EAG5C,OAAOF,CACT,EAEaG,GAAW,CAACC,EAAkBC,IAClCC,EAAgBF,EAAUC,CAAK,EAAE,KAAK,EAAE,EAGpCC,EAAkB,CAC7BF,EACAC,IACa,CACb,IAAIE,EAAS,GACPC,EAAmB,CAAC,EAE1B,QAAWN,KAAOG,EAChB,GAAII,EAASJ,EAAMH,CAAG,CAAC,EAAG,CACxB,IAAIQ,EAAcN,EAElBM,GAAeR,EAEfM,EAAO,KAAK,GAAGF,EAAgBI,EAAaL,EAAMH,CAAG,CAAmB,CAAC,CAC3E,MACSG,EAAMH,CAAG,IAChBK,GAAU,GAAGI,EAAYT,CAAG,CAAC,IAAIG,EAAMH,CAAG,CAAW,KAIzD,OAAAM,EAAO,QAAQ,GAAGJ,CAAQ,IAAIG,CAAM,GAAG,EAEhCC,CACT,EC1CA,IAAMI,EAAe,mBAERC,EAAN,KAAmB,CAMtB,aAAc,CAFd,uBAA4B,EAGxB,KAAK,MAAQ,IAAI,IACjB,IAAIC,EAAwB,KAE5B,GAAI,CACAA,EAAWC,EAAI,KAAKH,CAAY,GAAG,CACvC,OAASI,EAAO,CACZF,EAAWC,EAAI,OAAO,EAAE,MAAMH,CAAY,CAC9C,CAEAG,EAAI,QAAQ,EAAE,OAAOD,CAAQ,EAE7B,KAAK,SAAWA,CACpB,CAEO,IAAIG,EAAoF,CAC3F,IAAMC,EAAMC,EAAOF,CAAU,EAExB,KAAK,MAAM,IAAIC,CAAG,IACnB,KAAK,MAAM,IAAIA,CAAG,EAClB,KAAK,SAAS,OAAOA,CAAG,EAEhC,CACJ,ECfO,IAAME,GAAYC,GAChBC,EAAiBD,CAAY,EAyBzBE,GAAgBC,GAAqB,CAChD,IAAMC,EAAQL,GACZI,EAAY,IAAKE,GAAMJ,EAAiBI,CAAC,CAAC,CAC5C,EAUA,MAAO,CAKL,IAAI,MAAO,CACT,OAAOD,CACT,EAIA,IAAI,WAAY,CACd,OAAOA,EAAM,KACf,EACA,IAtBWE,GAAY,CACvBC,GAASH,EAAOH,EAAiBK,CAAI,CAAC,CACxC,EAqBE,MAnBY,CAACA,EAASE,IAAkB,CACxCC,GAAWL,EAAOH,EAAiBK,CAAI,EAAGE,CAAK,CACjD,EAkBE,OAAQE,GAAY,KAAK,CAAC,EAAGN,CAAK,EAClC,YAAaO,EAAiB,KAAK,CAAC,EAAGP,CAAK,EAC5C,OAAQA,EAAM,SAAUA,GAAUA,EAAM,MAAM,CAChD,CACF,EAWaG,GAAW,CAAIR,EAAmBO,IAAY,CACzDP,EAAM,MAAQ,CAAC,GAAGA,EAAM,MAAOO,CAAI,CACrC,EAYaG,GAAa,CAAIV,EAAmBO,EAASE,IAAkB,CAC1E,IAAII,EAAe,CAAC,GAAGb,EAAM,KAAK,EAClCa,EAAQ,OAAOJ,EAAO,EAAGF,CAAI,EAC7BP,EAAM,MAAQa,EACdA,EAAU,CAAC,CACb,EAYaD,EAAmB,CAAIZ,EAAmBc,IAA4C,CACjGd,EAAM,MAAQA,EAAM,MAAM,OAAO,CAACe,EAAIC,IAAM,CAACF,EAAGC,EAAIC,CAAC,CAAC,CACxD,EAYaL,GAAc,CAAIX,EAAmBO,IAAY,CAC5D,IAAME,EAAQT,EAAM,MAAM,UAAUA,GAASiB,EAASjB,CAAK,IAAMiB,EAASV,CAAI,CAAC,EAC/EK,EAAiBZ,EAAO,CAACkB,EAAGF,IACnBP,IAAUO,CAClB,CACH,EChIO,IAAKG,QACVA,EAAA,UAAY,YACZA,EAAA,MAAQ,QACRA,EAAA,QAAU,UACVA,EAAA,KAAO,OAJGA,QAAA,IA8DL,SAASC,GACdC,EACAC,EACAC,EACM,CACN,IAAMC,EAAO,SAAS,eAAe,EAAE,EAAGC,EAAmB,CAAC,EAC1DC,EAAe,CAAC,EAClBC,EAA0B,EAC1BC,EAAuB,CAAC,EAiEpBC,EAAY,CACf,MA9DgBC,GAAwB,CAtF7C,IAAAC,EAuFI,GAAID,EAAM,OAAS,EAAG,CACpB,IAAME,EAAKV,EAAQQ,EAAM,KAAK,EACxBG,EAAOR,EAASK,EAAM,KAAK,EACjCL,EAAS,OAAOK,EAAM,MAAO,EAAGE,CAAE,GAClCD,EAAAP,EAAK,gBAAL,MAAAO,EAAoB,aAAaC,EAAG,GAAIC,EAAOA,EAAK,GAAKT,EAC3D,CACF,EAwDG,QApDmBM,GAAwB,CAjGhD,IAAAC,GAkGIA,EAAAP,EAAK,gBAAL,MAAAO,EAAoB,YAAYH,EAAaE,EAAM,KAAK,EAAE,IAC1DF,EAAaE,EAAM,KAAK,EAAE,QAAQ,EAIlC,IAAMI,EAAIT,EAAS,QAAQG,EAAaE,EAAM,KAAK,CAAC,EACpDL,EAAS,OAAOS,EAAG,CAAC,CACtB,EA6CG,KAzCiBJ,GAAwB,CA7G9C,IAAAC,EA8GI,IAAMI,EAAYL,EAAM,MACtBM,GAAUL,EAAAD,EAAM,cAAN,KAAAC,EAAqB,EAEjC,GAAII,GAAa,GAAKC,GAAW,EAAG,CAClC,IAAMC,EAAcT,EAAaO,CAAS,EACpCG,EAAYV,EAAaQ,CAAO,EAEhCG,EAAaF,EAAY,GAAG,WAC5BG,EAAkBH,EAAY,GAAG,YAEnCE,GAAcC,IAAoBF,EAAU,GAC9CC,EAAW,aAAaD,EAAU,GAAID,EAAY,EAAE,EAE7CC,EAAU,GAAG,aACpBA,EAAU,GAAG,WAAW,aAAaD,EAAY,GAAIC,EAAU,EAAE,EAE7DE,GAAmBD,EACrBA,EAAW,aAAaD,EAAU,GAAIE,CAAe,EAE9CD,GACPA,EAAW,YAAYD,EAAU,EAAE,GAIvC,IAAMG,EAAWb,EAAaO,CAAS,EACvCP,EAAaO,CAAS,EAAIP,EAAaQ,CAAO,EAC9CR,EAAaQ,CAAO,EAAIK,EAExB,IAAMC,EAAOjB,EAASU,CAAS,EAC/BV,EAASU,CAAS,EAAIV,EAASW,CAAO,EACtCX,EAASW,CAAO,EAAIM,CACtB,CACF,CASA,EAIMC,EAAmB,IAKnBC,EAAa,CAACC,EAAcC,EAAQ,IAAM,CAhKlD,IAAAf,EAAAgB,EAmKI,GAAI,CAACvB,EAAK,cAAe,CAEnBsB,EAAQH,EACV,WAAW,IAAMC,EAAWC,EAASC,EAAQ,CAAC,EAAG,CAAC,EAElD,QAAQ,KAAK,mDAAmD,EAElE,MACF,CAEKnB,IAEHA,EADiB,MAAM,MAAKoB,GAAAhB,EAAAP,EAAK,gBAAL,YAAAO,EAAoB,aAApB,KAAAgB,EAAkC,CAAC,CAAC,EACrC,QAAQvB,CAAI,GAIzC,IAAMwB,EAAOC,GAASJ,EAASnB,EAASH,CAAG,EAG3C,GAAI,EAAAyB,EAAK,QAAU,GAGnB,SAASE,EAAQ,EAAGA,EAAQF,EAAK,OAAQE,IAAS,CAChD,IAAMC,EAAOH,EAAKE,CAAK,EACjBE,EAAYJ,EAAKE,EAAQ,CAAC,EAAIF,EAAKE,EAAQ,CAAC,EAAE,MAAQ,KACtDG,EAAYL,EAAKE,EAAQ,CAAC,EAAIF,EAAKE,EAAQ,CAAC,EAAE,MAAQ,KAC5DrB,EAAUsB,EAAK,KAAK,EAAEA,CAAI,EACtBE,IAAc,QAAkBD,IAAcD,EAAK,aACrDD,GAEJ,CAGAxB,EAAU,CAAC,GAAGmB,CAAO,EAAE,MAAM,CAAC,EAG9BjB,EAAeH,EAAS,MAAM,CAAC,EACjC,EAEA,OAAAmB,EAAW,UAAWvB,EAAaA,EAAW,MAAQA,CAAU,EAE5DiC,EAAajC,CAAU,GACxBA,EAA2B,QAAQuB,CAAU,EAGzCpB,CACT,CAWO,SAASyB,GACdJ,EAAcnB,EACdH,EAAyBgC,GAAYA,EAChB,CACrB,IAAMP,EAA4B,CAAC,EACjCQ,EAAYX,EAAQ,OACpBY,EAAY/B,EAAQ,OAGtB,GAAI8B,IAAcC,IAAcZ,GAAWnB,GAAWgC,EAAWhC,EAASmB,CAAO,GAC/E,OAAOG,EAIT,GAAIQ,GAAa,EAAG,CAClB,QAAS,EAAI,EAAG,EAAIC,EAAW,IAC7BT,EAAK,CAAC,EAAI,CACR,MAAOtB,EAAQ,CAAC,EAChB,MAAO,UACP,MAAO,CACT,EAEF,OAAOsB,CACT,CAGA,GAAI,CAACS,EAAW,CACd,QAAS,EAAI,EAAG,EAAID,EAAW,IAC7BR,EAAK,CAAC,EAAI,CACR,MAAOH,EAAQ,CAAC,EAChB,MAAO,QACP,MAAO,CACT,EAEF,OAAOG,CACT,CAGA,IAAIW,EAAe,EAGnB,QAASC,EAAK,EAAGA,EAAKH,EAAWG,IAAM,CACrC,IAAMC,EAAWhB,EAAQe,EAAKD,CAAY,EACxCG,EAAWpC,EAAQkC,CAAE,EAGvB,GAFarC,EAAIuC,CAAQ,GAAKvC,EAAIsC,CAAQ,GAE1BH,EAAWI,EAAUD,CAAQ,EAC3C,SAGF,IAAME,EAAY,CAAC,CAAClB,EAAQ,KAAKU,GAAQhC,EAAIuC,CAAQ,GAAKvC,EAAIgC,CAAI,CAAC,EACjES,EAAY,CAAC,CAACtC,EAAQ,KAAK6B,GAAQhC,EAAIsC,CAAQ,GAAKtC,EAAIgC,CAAI,CAAC,EAG/D,GAAI,CAACS,GAAaD,EAAW,CAC3Bf,EAAK,KAAK,CACR,MAAOa,EACP,MAAO,QACP,MAAOD,EAAKD,CACd,CAAC,EACDA,IACA,QACF,CAKA,GAAKK,GAAa,CAACD,GAAcF,GAAY,KAAM,CACjDb,EAAK,KAAK,CACR,MAAOc,EACP,MAAO,UACP,MAAOF,CACT,CAAC,EACDD,IACA,QACF,CAGA,GAAId,EAAQ,QAAQiB,CAAQ,GAAK,EAAG,CAClCd,EAAK,KAAK,CACR,MAAOa,EACP,YAAaC,EACb,MAAO,OACP,MAAOpC,EAAQ,QAAQmB,EAAQe,EAAKD,CAAY,CAAC,EACjD,YAAajC,EAAQ,QAAQA,EAAQkC,CAAE,CAAC,CAC1C,CAAC,EAGD,IAAMK,EAAWvC,EAAQ,QAAQmC,CAAQ,EACnCnB,EAAOhB,EAAQkC,CAAE,EACvBlC,EAAQkC,CAAE,EAAIf,EAAQe,EAAKD,CAAY,EACvCjC,EAAQuC,CAAQ,EAAIvB,EACpB,QACF,CACF,CAGA,GAAIiB,GAAgBF,EAClB,QAAS,EAAIA,EAAYE,EAAc,EAAIH,EAAW,IAAK,CACzD,IAAMK,EAAWhB,EAAQ,CAAC,EAC1BG,EAAK,KAAK,CACR,MAAOa,EACP,MAAO,QACP,MAAO,CACT,CAAC,CACH,CAGF,OAAOb,CACT,CC/TO,SAASkB,GACZC,EACAC,EACAC,EACAC,EACF,CACE,GAAIA,EAAiB,CACjB,IAAMC,EAAeJ,EAAI,GAAG,OAC5BA,EAAI,GAAG,OAAS,IAAYK,EAAA,sBACxB,IAAMC,EAASH,EAAgBH,CAAG,EAClC,OAAI,CAACM,GAAWA,aAAkB,UAAY,MAAMA,KAChDF,EAAa,KAAKJ,EAAI,EAAE,EAErBM,EAAO,QAAQ,CAC1B,EACJ,CAEA,GAAIL,EAAW,CACX,IAAMM,EAAcP,EAAI,KACxBA,EAAI,KAAO,IAAYK,EAAA,sBACnB,IAAMC,EAASC,EAAY,KAAKP,CAAG,EACnC,OAAIM,aAAkB,QACX,MAAMA,EAEVA,CACX,EACJ,CAEKE,EAAQ,MACTA,EAAQ,IAAMC,EAAqB,GAGvC,IAAIC,EAAWC,EACfH,EAAQ,IAAI,QAAQ,OAAOE,EAAmBE,GAAeP,EAAA,sBAEzD,IADcO,IAASZ,EAAI,IAAMY,EAAK,SAASZ,EAAI,EAAE,IACtCC,EAAW,CACtB,IAAMK,EAASL,EAAUD,CAAG,EACxBM,aAAkB,UAClB,MAAMA,EAEd,CACJ,EAAC,EACDE,EAAQ,IAAI,UAAU,OAAOG,EAAeC,GAAe,EACvCA,IAASZ,EAAI,IAAMY,EAAK,SAASZ,EAAI,EAAE,IACtCE,GACbA,EAAYF,CAAG,CAEvB,CAAC,EAGAA,EAAY,YAAY,KAAK,IAAM,CA5DxC,IAAAa,EAAAC,GA8DQD,EAAAL,EAAQ,MAAR,MAAAK,EAAa,UAAU,OAAOF,IAC9BG,EAAAN,EAAQ,MAAR,MAAAM,EAAa,QAAQ,OAAOJ,GAC5BR,EAAc,OACdD,EAAY,MAChB,CAAC,CACL,CA4BO,IAAMc,GAAgB,CACzBf,EACAgB,KAQAjB,GAAYC,EAAKgB,EAAQ,QAASA,EAAQ,UAAWA,EAAQ,eAAe,EACrEhB,GCpGX,IAAMiB,EAA4E,CAChF,GAAI,CAACC,EAAuBC,EAAyB,KAC5CC,EACL,KACAF,EAAS,IAAKG,GACLD,EAAI,KAAM,CAACC,CAAE,EAAGF,CAAa,CACrC,CACH,EAEF,MAAO,CAACG,EAAoBH,EAAyB,KAC5CC,EAAI,QAAS,CAACG,EAAOD,CAAM,CAAC,EAAGH,CAAa,CAEvD,EAYaK,GAAmB,IAAI,MAClC,CAAC,EACD,CACE,IAAK,CAACC,EAAGC,EAAGC,IAAM,CAChB,IAAMC,EAAUF,EAAE,SAAS,EACrBG,EAAK,IAAIX,IACND,EAAaW,CAAO,EAAIX,EAAaW,CAAO,EAAEV,EAAU,EAAK,EAAIE,EAAIQ,EAASV,CAAQ,EAG/F,cAAO,eAAeW,EAAI,QAAS,CACjC,IAAK,IACI,IAAIX,IACFD,EAAaW,CAAO,EAAIX,EAAaW,CAAO,EAAEV,EAAU,EAAI,EAAIE,EAAIQ,EAASV,EAAU,EAAI,CAGxG,CAAC,EAEMW,CACT,CACF,CACF,EC5BO,IAAMC,GAAO,CAACC,EAAgC,CAAE,SAAU,MAAO,IAAM,CACnEC,EAAQ,KAAO,GACfA,EAAQ,IAAeC,EAAqB,EAC5CD,EAAQ,aAAe,IAAYE,EAE5C,IAAMC,EAAM,IAASC,EAAK,IAAIL,EAAQ,QAAQ,GAAG,EACjD,OAAgBM,EAAWF,CAAG,CAChC,EAEaG,GAAU","names":["removeFromList","item","list","index","camelToDash","str","val","isObject","obj","isArray","args","swapItems","array","from","to","temp","arraysEqual","a","b","i","deepEquals","length","keys","key","generateUID","idNumber","uuidv4","c","CEvent","fn","removeFromList","data","el","CMappedEvent","evt","singleEvent","mappedEvent","context","isInitialized","checkInitialized","getMountPoint","mountPoint","tag","restoreMountPoint","clearMountPoints","resetMountPoints","first","withMountPoint","scopedCallback","createGlobalObserver","_addedEvt","singleEvent","_removedEvt","mutations","observer","mut","n","Observable","CEvent","val","destroyer","transform","compute","greaterThan","greaterThanOr","lessThan","lessThanOr","equalTo","notEqualTo","isEmpty","notEmpty","key","defaultVal","grab","isObject","isArray","target","p","receiver","newValue","callback","isObservable","obj","createObservable","other","observable","cb","computeMultiple","observables","cons","c","getValue","newVal","text","textTemplate","obj","node","interpolatePattern","updateNode","data","m","g1","_a","isObservable","val","isObject","key","CTag","_CTag","arg0","children","mountToParent","match","selector","element","context","newValue","newParent","checked","value","id","__async","parentEl","expectedIndex","hiddenBefore","i","child","nextEl","observable","callback","cb","ifTrue","ifFalse","invert","temp","_","handleHide","correctedValue","classes","val","text","elseText","attr","style","styles","stylesheet","className","_a","uuidv4","textTemplate","obj","c","key","targetClass","replaceClass","property","styleNames","camelToDash","attrs","tag","evt","consumer","other","evtName","fn","cons","createObservable","t","listener","result","cl","disabled","predicate","item","isObservable","nodes","mapped","checkInitialized","genCss","styleSheet","stylesheets","generatedCss","sheet","key","genBlock","selector","style","genBlockContent","inside","blocks","isObject","newSelector","camelToDash","STYLE_TAG_ID","StyleManager","styleTag","tag","error","styleSheet","css","genCss","state","initialValue","createObservable","listState","initialData","_list","d","item","stateAdd","index","stateAddAt","stateRemove","stateRemoveWhere","newData","cb","el","i","getValue","_","DiffState","each","observable","builder","key","node","elements","oldData","nodeParentIndex","elementsCopy","actionMap","entry","_a","el","elAt","i","fromIndex","toIndex","elementFrom","elementTo","parentNode","nextSiblingNode","tempCopy","temp","MAX_UPDATE_TRIES","updateList","newData","tries","_b","diff","diffList","index","data","nextIndex","nextState","isObservable","item","newLength","oldLength","deepEquals","removedCount","oi","newEntry","oldEntry","existsNew","existsOld","oldIndex","onLifecycle","tag","onMounted","onUnmounted","beforeUnmounted","tempElRemove","__async","result","tempOnStart","context","createGlobalObserver","onAddedCb","onRemovedCb","node","_a","_b","withLifecycle","handler","interceptors","children","mountToParent","tag","cl","styles","genCss","allTags","t","p","r","tagName","fn","init","options","context","createGlobalObserver","StyleManager","tag","CTag","mountPoint","version"]}