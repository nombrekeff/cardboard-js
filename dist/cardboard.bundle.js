var t={d:(e,n)=>{for(var s in n)t.o(n,s)&&!t.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:n[s]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)},e={};function n(t,e){const n=e.indexOf(t);return-1!==n&&e.splice(n,1),e}t.d(e,{wc:()=>m,Kh:()=>l,rU:()=>$,F0:()=>N,iF:()=>C,ub:()=>y,om:()=>f,nU:()=>h,Dk:()=>s,HO:()=>i,ZP:()=>O,og:()=>v,lW:()=>b,xZ:()=>a,S1:()=>w,Kn:()=>r,EP:()=>A,SB:()=>g,xj:()=>n,Nd:()=>T,C6:()=>S,_q:()=>p,fL:()=>c,Qs:()=>o,Uq:()=>_});const s=t=>t.replace(/([A-Z])/g,(t=>`-${t.toLowerCase()}`)),i=t=>t.replace(/(\-[a-z])/g,(t=>t.toUpperCase().replace("-","")));function r(t){return"object"==typeof t&&!(t instanceof Array)}const o=t=>JSON.parse(t),a=t=>JSON.stringify(t),h=(t,...e)=>"function"==typeof t?t(...e):t;class l{generateCss(t){let e=t instanceof Array?t:[t],n="";for(const t of e)for(const e in t)n+=this.generateBlock(e,t[e]);return n}generateBlock(t,e){return this.generateBlockContent(t,e).join("")}generateBlockContent(t,e){let n="",s=[];for(const i in e)r(e[i])?s.push(this.generateBlockContent(t+i,e[i])):e[i]&&(n+=this.generateStyle(i,e[i]));return s.unshift(`${t}{${n}}`),s}generateStyle(t,e){return`${s(t)}:${e};`}}function c(t,e){const n=document.createTextNode(""),s=/\B\$([0-9]+|[a-z][a-z0-9_$]*)/gi,i=()=>{n.nodeValue=e?t.replace(s,((t,n)=>null!=e[n]?e[n].toString():t)):t};if(e&&r(e))for(let n in e)t.includes(`$${n}`)&&e[n].changed((()=>{i()}));return i(),n}var u=function(t,e,n,s){return new(n||(n=Promise))((function(i,r){function o(t){try{h(s.next(t))}catch(t){r(t)}}function a(t){try{h(s.throw(t))}catch(t){r(t)}}function h(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}h((s=s.apply(t,e||[])).next())}))};let d={attachedTag:null,attachedTagStack:[],css:new l};function f(){return d.attachedTag}class m{get parent(){return this._parent}set parent(t){this._parent=t}get children(){return this._getElementChildren(this.element),this._cachedChildren}get value(){return this.element.value}get style(){return this.element.style}setValue(t){return this.element.value=t,this}get consumeValue(){const t=this.value;return this.clear(),t}get id(){return this.element.id}setId(t){return this.element.id=t,this}constructor(t,e=[],n=!1){if(this._parent=null,this._children=[],this._cachedChildren=[],this._attachable=!1,this._meta={isHidden:!1,nextSiblingID:null},this._attachable=n,"string"==typeof t&&t.match(/\(.+\)/))this._attachable=!1,this.element=document.querySelector(t.match(/\((.+)\)/)[1]);else if("string"==typeof t)this.element=document.createElement(t);else{if(!(t instanceof HTMLElement))throw new Error("Invalid argument 0");this._attachable=!1,this.element=t}d.attachedTag&&this._attachable&&d.attachedTag.append(this),e.length>0&&this.setChildren(e)}setChildren(t){return this.element.replaceChildren(...t.map(this._setChildrenParent.bind(this)).filter(this._childrenFilterPredicate.bind(this)).map(this._getElementForChild)),this._children=t,this}append(...t){return this.element.append(...t.map(this._setChildrenParent.bind(this)).filter(this._childrenFilterPredicate.bind(this)).map(this._getElementForChild)),this._children.push(...t),this}prepend(...t){return this.element.prepend(...t.filter(this._childrenFilterPredicate.bind(this)).map(this._getElementForChild)),this._children.unshift(...t),this}consume(t,e){return t.changed((t=>e(this,t))),e(this,t),this}show(){return u(this,void 0,void 0,(function*(){if(!this.parent.children.includes(this.element)){const t=this.parent._children.indexOf(this);if(0==t)this.parent.element.prepend(this.element);else if(t==this.parent._children.length-1)this.parent.element.append(this.element);else{let e=0;for(let n=t-1;n>=0;n--){const t=this.parent._children[n];t instanceof m&&t._meta.isHidden&&e++}const n=this.parent.element.childNodes[t-e];this.parent.element.insertBefore(this.element,n)}}return this._meta.isHidden=!1,!0}))}hide(){return u(this,void 0,void 0,(function*(){this.parent.children.includes(this.element)&&(console.log(this.remove),yield this.remove(),this._meta.isHidden=!0)}))}doIf(t,e,n,s=!1){if(s){let t=e;e=n,n=t}const i=t=>{t?e(t):n(t)};return t.changed(i),i(t),this}doIfNot(t,e,n){return this.doIf(t,e,n,!0)}hideIf(t,e=!1){const n=t=>{const n=e?!t:!!t;this._meta.isHidden=n,this.parent&&(n?this.hide():this.show())};return t.changed(n),n(t),this}hideIfNot(t){return this.hideIf(t,!0)}classIf(t,e,n=!1){return this.doIf(t,(()=>this.addClass(...h(e,this))),(()=>this.rmClass(...h(e,this))),n)}classIfNot(t,e){return this.classIf(t,e,!0)}textIf(t,e,n="",s=!1){return this.doIf(t,(()=>this.text(h(e,this))),(()=>this.text(h(n,this))),s)}textIfNot(t,e,n=""){return this.textIf(t,e,n,!0)}attrIf(t,e,n="",s=!1){return this.doIf(t,(()=>this.addAttr(e,h(n,this))),(()=>this.rmAttr(e)),s)}attrIfNot(t,e,n=""){return this.attrIf(t,e,n,!0)}disableIf(t,e=!1){return this.attrIf(t,"disabled","",e)}disableIfNot(t){return this.disableIf(t,!0)}styleIf(t,e,n="",s=!1){return this.doIf(t,(()=>this.addStyle(e,h(n,this))),(()=>this.rmStyle(e)),s)}styleIfNot(t,e,n=""){return this.styleIf(t,e,n,!0)}stylesIf(t,e,n=!1){return this.doIf(t,(()=>this.setStyle(h(e,this))),(()=>this.rmStyle(...Object.keys(e))),n)}stylesIfNot(t,e){return this.stylesIf(t,e,!0)}listen(t,e,n){return t.on(e,((t,e)=>n(this,t,e))),this}text(t,e){return null==t?this.element.textContent:e&&t?this.setChildren([c(t,e)]):(this.element.textContent=t,this)}config(t){if(t.attr&&this.setAttrs(t.attr),t.classList&&this.addClass(...t.classList),t.className&&this.className(t.className),t.style&&this.setStyle(t.style),t.text&&this.text(t.text),t.value&&this.setValue(t.value),t.children&&this.append(...t.children),t.on)for(const e in t.on)this.on(e,t.on[e]);return this}addClass(...t){return this.element.classList.add(...t),this}className(t){return this.element.className=t,this}rmClass(...t){for(let e of t)this.element.classList.remove(e);return this}hasClass(...t){for(let e of t)if(!this.element.classList.contains(e))return!1;return!0}replaceClass(t,e){return this.element.classList.replace(t,e),this}toggleClass(t){return this.hasClass(t)?this.rmClass(t):this.addClass(t),this}addStyle(t,e){return this.element.style[t]=e,this}setStyle(t){for(let e in t)this.addStyle(e,t[e]);return this}rmStyle(...t){for(let e of t)this.element.style.removeProperty(e);return this}hasStyle(...t){for(let e of t)if(!this.element.style.getPropertyValue(s(e)))return!1;return!0}setAttrs(t){for(let e in t)this.addAttr(e,t[e]);return this}addAttr(t,e){return this.element.attributes[t]=e,this.element.setAttribute(t,e),this}rmAttr(...t){for(let e of t)this.element.removeAttribute(e),delete this.element.attributes[e];return this}hasAttr(...t){for(let e of t)if(!(e in this.element.attributes))return!1;return!0}getAttr(t){return this.element.attributes[t]}when(t,e){return{changed:n=>{this.on(t,(()=>{n(e(this))}))}}}on(t,e){return e&&this.element.addEventListener(t,(t=>e(this,t))),this}once(t,e){if(e){const n=s=>{e(this,s),this.element.removeEventListener(t,n)};this.element.addEventListener(t,n)}return this}clicked(t){return this.on("click",t)}keyPressed(t,e){return e?this.on("keypress",((n,s)=>{s.code!=e&&s.key!=e||t(this,s)})):this.on("keypress",t)}changed(t){return this.on("change",t)}submited(t){return this.on("submit",t)}remove(){return u(this,void 0,void 0,(function*(){return yield this.element.remove(),this}))}clear(){return this.element.value="",this.element.dispatchEvent(new InputEvent("input")),this}disable(){return this.setDisabled(!0),this.addAttr("disabled","disabled"),this}enable(){return this.setDisabled(!1),this}setDisabled(t){t?this.addAttr("disabled","disabled"):this.rmAttr("disabled")}q(t){const e=this.element.querySelector(t);if(e)return new m(e)}find(t){for(const e of this._children)if(t(e))return e}findTag(t){for(const e of this._children)if(e instanceof m&&t(e))return e}_setChildrenParent(t){return t instanceof m&&(t.parent=this),t}_childrenFilterPredicate(t){return!(t instanceof m&&t._meta.isHidden)}_getElementForChild(t){return"string"==typeof t?document.createTextNode(t):t instanceof m?t.element:t instanceof Node?t:null}_getElementChildren(t){this._mutationObserver||(this._mutationObserver=new MutationObserver(((e,n)=>{this._setCachedChildren(t)})),this._mutationObserver.observe(this.element,{childList:!0}),this._setCachedChildren(t))}_setCachedChildren(t){let e=t.childNodes,n=[],s=e.length;for(;s--;)1==e[s].nodeType&&n.unshift(e[s]);this._cachedChildren=n}}function p(t,e=[],n=!1){return new m(t,e,n)}function g(t,e,n,s){var i,r;let o=!1;if(s){const e=t.element.remove;t.element.remove=()=>u(this,void 0,void 0,(function*(){console.log("element.remove");const n=s(t);(!n||n instanceof Promise&&(yield n))&&e.call(t.element),console.log("element.remove end")}))}if(e){const e=t.show;t.show=()=>u(this,void 0,void 0,(function*(){console.log("element.show");const n=e.call(t);return n instanceof Promise?yield n:n}))}const a=new MutationObserver(((s,i)=>u(this,void 0,void 0,(function*(){let r=!1,a=!1;for(let i of s)e&&Array.from(i.addedNodes).includes(t.element)&&(r=!0),n&&Array.from(i.removedNodes).includes(t.element)&&(a=!0);if(r&&e){const n=e(t,i);n instanceof Promise&&(yield n),o||(i.disconnect(),i.observe(t.element.parentElement,{childList:!0}),o=!0)}a&&n&&n(t,i)}))));return a.observe(null!==(r=null===(i=t.parent)||void 0===i?void 0:i.element)&&void 0!==r?r:document.body,{childList:!0,subtree:!0}),a}const _=(t,e)=>(g(t,e.start,e.removed,e.beforeRemove),t);function y(t){return d.attachedTag&&d.attachedTagStack.push(d.attachedTag),d.attachedTag=t,t}function v(){d.attachedTagStack.length>0?d.attachedTag=d.attachedTagStack.pop():d.attachedTag=null}function b(){d.attachedTag=null,d.attachedTagStack=[]}function w(t={root:"body"}){const e=new m(`(${t.root})`);return y(e),e}const R={ul:(t,e=!1)=>p("ul",t.map((t=>p("li",[t],e)))),style:(t,e=!1)=>p("style",[d.css.generateCss(t)],e)},C=new Proxy({},{get:(t,e,n)=>{const s=e.toString(),i=(...t)=>R[s]?R[s](t,!1):p(s,t);return Object.defineProperty(i,"attach",{get:()=>(...t)=>R[s]?R[s](t,!0):p(s,t,!0)}),i}});function S(t,e){let n={},s=[];e&&s.push(e);const i=(t,e)=>{n[t]||(n[t]=[]),n[t].includes(e)||n[t].push(e)},o=(t,e)=>{if(n[e])for(const s of n[e])s(t[e]);for(const e of s)e(t)};for(let e of Object.getOwnPropertyNames(t))(r(t[e])||t[e]instanceof Array)&&(t[e]=S(t[e],(()=>o(t,e))));const a=new Proxy(t,{deleteProperty:function(t,e){return o(t,e),delete t[e],!0},get:(t,e)=>((t,e)=>{const n=t[e];try{r(t[e])?n.changed=t=>i(e,t):n.__proto__&&(n.__proto__.changed=t=>i(e,t))}catch(t){}return n})(t,e),set:(t,e,n)=>"changed"==e?(t[e]=n,!0):(t[e]=n,o(t,e),!0)});return a.changed=t=>{s.push(t)},a}const I=/[\-\[\]{}()+?.,\\\^$|#\s]/g,x=/([:*])(\w+)/g;function P(t,e){var n=exports.toString.call(t).charAt(8);return"R"===n?t.test(e):"F"===n?t(e):t==e}const k=(t,e={})=>{let n={},s=[],i=t;return"string"==typeof i?(i=i.replace(I,"\\$&"),i=i.replace(x,(function(t,e,n){return s.push(n),":"===e?"([^/]*)":"(.*)"})),i=new RegExp("^"+i+"$"),n.parse=function(t){let n,r,o=0,a={},h=t.match(i);if(!h)return null;for(;o<s.length;){if(n=s[o++],r=h[o],e&&n in e&&!P(e[n],r))return null;a[n]=r}return a},n.stringify=function(e){let n,s,i=t;for(n in e)s=new RegExp("[:*]"+n+"\\b"),i=i.replace(s,e[n]);return i.replace(x,"")}):(n.parse=function(t){let e=t.match(i);return e&&{captures:e.slice(1)}},n.stringify=function(){return""}),n};const{div:E,a:L}=C;class N{get currentRoute(){return this._currentRoute}constructor(t){var e;this._routes={},this._routeMatchers=[],this.params={},this.query=new URLSearchParams,this._options=t,this._rootParent=t.rootParent,this._window=null!==(e=t.window)&&void 0!==e?e:window,this._location=this._window.location,this._history=this._window.history,this._initRouteMatchers(),this._modifyLocationFunctions(),this._listenEvents(),this.navigate(this._options.initialRoute)}navigate(t,e){const n=new URLSearchParams(e).toString();console.debug(`[Router] -> Navigate to ${t}`),t!=this._currentRoute&&this._history.pushState("data","",t+n?"?"+n:"")}_setRoute(){return t=this,e=void 0,s=function*(){console.debug(`[Router] -> _setRoute ${this._currentRoute}`),this._currentRouteTag&&(yield this._currentRouteTag.hide());const t=this._getRoute();this._rootParent.append(t),this._currentRouteTag=t},new((n=void 0)||(n=Promise))((function(i,r){function o(t){try{h(s.next(t))}catch(t){r(t)}}function a(t){try{h(s.throw(t))}catch(t){r(t)}}function h(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}h((s=s.apply(t,e||[])).next())}));var t,e,n,s}_getEffectiveRoute(){let t=this._currentRoute,e=1e4;for(;"string"==typeof this._options.routes[t]&&e--;){let e=this._options.routes[t];if("string"!=typeof e)break;console.debug(`[Router] -> _getRoute ${t} is alias for ${e}`),t=e}return t}_getRoute(){console.debug(`[Router] -> _getRoute ${this._currentRoute}`);let t=this._getEffectiveRoute();console.log("Searching for matcher");for(let e of this._routeMatchers){const n=e.matcher.parse(t);if(n){t=e.key,this.params=n,this.query=new URLSearchParams(this._location.search);break}}if(t in this._options.routes||(console.debug(`[Router] -> _getRoute ${t} not found, fallback to ${this._options.fallbackRoute}`),t=this._options.fallbackRoute),!(t in this._options.routes))return console.debug(`[Router] -> _getRoute ${t} not found in the router, fallback to "noRoot" or default error`),this._options.noRoot?this._options.noRoot(this):E("No route found for: "+t);if(this._routes[t])return console.debug(`[Router] -> _getRoute ${t} is cached, using that`),this._routes[t].show(),this._routes[t];let e=this._options.routes[t];if("function"!=typeof e)throw new Error("Can find route builder for "+this._currentRoute);return console.debug(`[Router] -> _getRoute ${t} is not cached, creating new one`),this._routes[t]=e(this)}_setCurrentRoute(){this.currentRoute!=this._location.pathname&&(this._currentRoute=this._location.pathname,this._setRoute())}_listenEvents(){this._window.addEventListener("popstate",this._setCurrentRoute.bind(this)),this._window.addEventListener("pushstate",this._setCurrentRoute.bind(this))}_modifyLocationFunctions(){const t=this._history.pushState;this._history.pushState=(...e)=>{t.call(this._history,...e),this._window.dispatchEvent(new Event("pushstate"))}}_initRouteMatchers(){for(let t in this._options.routes)this._routeMatchers.push({key:t,matcher:k(t)})}}let T;function A(t){return T=new N(t),T}function $(t,e,n){return L(t).addAttr("href","javascript:;").setStyle({margin:"0 8px 0 0"}).clicked((()=>{if(!T)throw new Error("Link can\t navigate, there is no router available");T.navigate(e,n)}))}const O={};var F=e.wc,j=e.Kh,U=e.rU,q=e.F0,B=e.iF,H=e.ub,M=e.om,D=e.nU,V=e.Dk,Z=e.HO,J=e.ZP,K=e.og,z=e.lW,Q=e.xZ,W=e.S1,G=e.Kn,X=e.EP,Y=e.SB,tt=e.xj,et=e.Nd,nt=e.C6,st=e._q,it=e.fL,rt=e.Qs,ot=e.Uq;export{F as CTag,j as CssGenerator,U as Link,q as Router,B as allTags,H as attach,M as attached,D as callOrReturn,V as camelToDash,Z as dashToCamel,J as default,K as detach,z as detachAll,Q as fromJson,W as init,G as isObject,X as makeRouter,Y as onLifecycle,tt as removeFromList,et as router,nt as state,st as tag,it as text,rt as toJson,ot as withLifecycle};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,