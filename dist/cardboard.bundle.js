var t={d:(e,n)=>{for(var s in n)t.o(n,s)&&!t.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:n[s]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)},e={};function n(t,e){const n=e.indexOf(t);return-1!==n&&(e.splice(n,1),!0)}t.d(e,{wc:()=>f,Kh:()=>a,vp:()=>R,rU:()=>B,F0:()=>N,iF:()=>C,ub:()=>g,om:()=>d,nU:()=>h,Dk:()=>s,ZP:()=>$,og:()=>y,lW:()=>v,TB:()=>I,xZ:()=>o,S1:()=>w,Kn:()=>i,EP:()=>O,SB:()=>p,xj:()=>n,Nd:()=>A,C6:()=>S,_q:()=>m,fL:()=>l,Qs:()=>r,Uq:()=>_});const s=t=>t.replace(/([A-Z])/g,(t=>`-${t.toLowerCase()}`));function i(t){return"object"==typeof t&&!(t instanceof Array)}const r=t=>JSON.parse(t),o=t=>JSON.stringify(t),h=(t,...e)=>"function"==typeof t?t(...e):t;class a{generateCss(t){let e=t instanceof Array?t:[t],n="";for(const t of e)for(const e in t)n+=this.generateBlock(e,t[e]);return n}generateBlock(t,e){return this.generateBlockContent(t,e).join("")}generateBlockContent(t,e){let n="",s=[];for(const r in e)i(e[r])?s.push(this.generateBlockContent(t+r,e[r])):e[r]&&(n+=this.generateStyle(r,e[r]));return s.unshift(`${t}{${n}}`),s}generateStyle(t,e){return`${s(t)}:${e};`}}function l(t,e){const n=document.createTextNode(""),s=/\B\$([0-9]+|[a-z][a-z0-9_$]*)/gi,r=()=>{n.nodeValue=e?t.replace(s,((t,n)=>null!=e[n]?e[n].toString():t)):t};if(e&&i(e))for(let n in e)t.includes(`$${n}`)&&e[n].changed(r);return r(),n}var c=function(t,e,n,s){return new(n||(n=Promise))((function(i,r){function o(t){try{a(s.next(t))}catch(t){r(t)}}function h(t){try{a(s.throw(t))}catch(t){r(t)}}function a(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,h)}a((s=s.apply(t,e||[])).next())}))};let u={attachedTag:null,attachedTagStack:[],css:new a};function d(){return u.attachedTag}class f{get parent(){return this._parent}set parent(t){this._parent=t}get children(){return this._getElementChildren(this.element),this._cachedChildren}get value(){return this.element.value}get style(){return this.element.style}setValue(t){return this.element.value=t,this}get consumeValue(){const t=this.value;return this.clear(),t}get id(){return this.element.id}setId(t){return this.element.id=t,this}constructor(t,e=[],n=!1){if(this._parent=null,this._children=[],this._cachedChildren=[],this._attachable=!1,this._meta={isHidden:!1,nextSiblingID:null},this._attachable=n,"string"==typeof t&&t.match(/\(.+\)/))this._attachable=!1,this.element=document.querySelector(t.match(/\((.+)\)/)[1]);else if("string"==typeof t)this.element=document.createElement(t);else{if(!(t instanceof HTMLElement))throw new Error("Invalid argument 0");this._attachable=!1,this.element=t}u.attachedTag&&this._attachable&&u.attachedTag.append(this),e.length>0&&this.setChildren(e)}setChildren(t){return this.element.replaceChildren(...this._mapChildren(t)),this._children=t,this}append(...t){return this.element.append(...this._mapChildren(t)),this._children.push(...t),this}prepend(...t){return this.element.prepend(...this._mapChildren(t)),this._children.unshift(...t),this}consume(t,e){return t.changed((t=>e(this,t))),e(this,t),this}show(){return c(this,void 0,void 0,(function*(){if(!this.parent.children.includes(this.element)){const t=this.parent._children.indexOf(this);if(0==t)this.parent.element.prepend(this.element);else if(t==this.parent._children.length-1)this.parent.element.append(this.element);else{let e=0;for(let n=t-1;n>=0;n--){const t=this.parent._children[n];t instanceof f&&t._meta.isHidden&&e++}const n=this.parent.element.childNodes[t-e];this.parent.element.insertBefore(this.element,n)}}return this._meta.isHidden=!1,!0}))}hide(){return c(this,void 0,void 0,(function*(){this.parent.children.includes(this.element)&&(yield this.remove(),this._meta.isHidden=!0)}))}doIf(t,e,n,s=!1){if(s){let t=e;e=n,n=t}const i=t=>{t?e(t):n(t)};return t.changed(i),i(t),this}doIfNot(t,e,n){return this.doIf(t,e,n,!0)}hideIf(t,e=!1){const n=t=>{const n=e?!t:!!t;this._meta.isHidden=n,this.parent&&(n?this.hide():this.show())};return t.changed(n),n(t),this}hideIfNot(t){return this.hideIf(t,!0)}classIf(t,e,n=!1){return this.doIf(t,(()=>this.addClass(...h(e,this))),(()=>this.rmClass(...h(e,this))),n)}classIfNot(t,e){return this.classIf(t,e,!0)}textIf(t,e,n="",s=!1){return this.doIf(t,(()=>this.text(h(e,this))),(()=>this.text(h(n,this))),s)}textIfNot(t,e,n=""){return this.textIf(t,e,n,!0)}attrIf(t,e,n="",s=!1){return this.doIf(t,(()=>this.addAttr(e,h(n,this))),(()=>this.rmAttr(e)),s)}attrIfNot(t,e,n=""){return this.attrIf(t,e,n,!0)}disableIf(t,e=!1){return this.attrIf(t,"disabled","",e)}disableIfNot(t){return this.disableIf(t,!0)}styleIf(t,e,n="",s=!1){return this.doIf(t,(()=>this.addStyle(e,h(n,this))),(()=>this.rmStyle(e)),s)}styleIfNot(t,e,n=""){return this.styleIf(t,e,n,!0)}stylesIf(t,e,n=!1){return this.doIf(t,(()=>this.setStyle(h(e,this))),(()=>this.rmStyle(...Object.keys(e))),n)}stylesIfNot(t,e){return this.stylesIf(t,e,!0)}listen(t,e,n){return t.on(e,((t,e)=>n(this,t,e)))}text(t,e){return null==t?this.element.textContent:e&&t?this.setChildren([l(t,e)]):(this.element.textContent=t,this)}config(t){if(t.attr&&this.setAttrs(t.attr),t.classList&&this.addClass(...t.classList),t.className&&this.className(t.className),t.style&&this.setStyle(t.style),t.text&&this.text(t.text),t.value&&this.setValue(t.value),t.children&&this.append(...t.children),t.on)for(const e in t.on)this.on(e,t.on[e]);return this}addClass(...t){return this.element.classList.add(...t),this}className(t){return this.element.className=t,this}rmClass(...t){for(let e of t)this.element.classList.remove(e);return this}hasClass(...t){for(let e of t)if(!this.element.classList.contains(e))return!1;return!0}replaceClass(t,e){return this.element.classList.replace(t,e),this}toggleClass(t){return this.hasClass(t)?this.rmClass(t):this.addClass(t)}addStyle(t,e){return this.element.style[t]=e,this}setStyle(t){for(let e in t)this.addStyle(e,t[e]);return this}rmStyle(...t){for(let e of t)this.element.style.removeProperty(e);return this}hasStyle(...t){for(let e of t)if(!this.element.style.getPropertyValue(s(e)))return!1;return!0}setAttrs(t){for(let e in t)this.addAttr(e,t[e]);return this}addAttr(t,e=""){return this.element.attributes[t]=e,this.element.setAttribute(t,e),this}rmAttr(...t){for(let e of t)this.element.removeAttribute(e),delete this.element.attributes[e];return this}hasAttr(...t){for(let e of t)if(!(e in this.element.attributes))return!1;return!0}getAttr(t){return this.element.attributes[t]}when(t,e){return{changed:n=>{this.on(t,(()=>n(e(this))))}}}on(t,e){return e&&this.element.addEventListener(t,(t=>e(this,t))),this}once(t,e){if(e){const n=s=>{e(this,s),this.element.removeEventListener(t,n)};this.element.addEventListener(t,n)}return this}clicked(t){return this.on("click",t)}keyPressed(t,e){return e?this.on("keypress",((n,s)=>{s.code!=e&&s.key!=e||t(this,s)})):this.on("keypress",t)}changed(t){return this.on("change",t)}submited(t){return this.on("submit",t)}remove(){return c(this,void 0,void 0,(function*(){return yield this.element.remove(),this}))}clear(){return this.element.value="",this.element.dispatchEvent(new InputEvent("input")),this}disable(){return this.setDisabled(!0)}enable(){return this.setDisabled(!1)}setDisabled(t){return t?this.addAttr("disabled"):this.rmAttr("disabled")}q(t){const e=this.element.querySelector(t);if(e)return new f(e)}find(t){for(const e of this._children)if(t(e))return e}findTag(t){for(const e of this._children)if(e instanceof f&&t(e))return e}_setChildrenParent(t){return t instanceof f&&(t.parent=this),t}_childrenFilterPredicate(t){return!(t instanceof f&&t._meta.isHidden)}_getElementForChild(t){return"string"==typeof t?document.createTextNode(t):t instanceof f?t.element:t instanceof Node?t:null}_getElementChildren(t){this._mutationObserver||(this._mutationObserver=new MutationObserver((()=>{this._setCachedChildren(t)})),this._mutationObserver.observe(this.element,{childList:!0}),this._setCachedChildren(t))}_setCachedChildren(t){let e=t.childNodes,n=[],s=e.length;for(;s--;)1==e[s].nodeType&&n.unshift(e[s]);this._cachedChildren=n}_mapChildren(t){return t.map(this._setChildrenParent.bind(this)).filter(this._childrenFilterPredicate.bind(this)).map(this._getElementForChild)}}function m(t,e=[],n=!1){return new f(t,e,n)}function p(t,e,n,s){var i,r;let o=!1;if(s){const e=t.element.remove;t.element.remove=()=>c(this,void 0,void 0,(function*(){const n=s(t);return(!n||n instanceof Promise&&(yield n))&&e.call(t.element),n}))}if(e){const e=t.show;t.show=()=>c(this,void 0,void 0,(function*(){const n=e.call(t);return n instanceof Promise?yield n:n}))}const h=new MutationObserver(((s,i)=>c(this,void 0,void 0,(function*(){let r=!1,h=!1;for(let i of s)e&&Array.from(i.addedNodes).includes(t.element)&&(r=!0),n&&Array.from(i.removedNodes).includes(t.element)&&(h=!0);if(r&&e){const n=e(t);n instanceof Promise&&(yield n),o||(i.disconnect(),i.observe(t.element.parentElement,{childList:!0}),o=!0)}h&&n&&n(t)}))));return h.observe(null!==(r=null===(i=t.parent)||void 0===i?void 0:i.element)&&void 0!==r?r:document.body,{childList:!0,subtree:!0}),h}const _=(t,e)=>(p(t,e.start,e.removed,e.beforeRemove),t);function g(t){return u.attachedTag&&u.attachedTagStack.push(u.attachedTag),u.attachedTag=t,t}function y(){u.attachedTagStack.length>0?u.attachedTag=u.attachedTagStack.pop():u.attachedTag=null}function v(){u.attachedTag=null,u.attachedTagStack=[]}function w(t={root:"body"}){const e=new f(`(${t.root})`);return g(e),e}const b={ul:(t,e=!1)=>m("ul",t.map((t=>m("li",[t],e)))),style:(t,e=!1)=>m("style",[u.css.generateCss(t)],e)},C=new Proxy({},{get:(t,e,n)=>{const s=e.toString(),i=(...t)=>b[s]?b[s](t,!1):m(s,t);return Object.defineProperty(i,"attach",{get:()=>(...t)=>b[s]?b[s](t,!0):m(s,t,!0)}),i}});function S(t,e){let n={},s=[];e&&s.push(e);const r=(t,e)=>{n[t]||(n[t]=[]),n[t].includes(e)||n[t].push(e)},o=(t,e)=>{if(n[e])for(const s of n[e])s(t[e]);for(const e of s)e(t)};for(let e of Object.getOwnPropertyNames(t))(i(t[e])||t[e]instanceof Array)&&(t[e]=S(t[e],(()=>o(t,e))));const h=new Proxy(t,{deleteProperty:function(t,e){return o(t,e),delete t[e],!0},get:(t,e)=>((t,e)=>{const n=t[e];try{i(t[e])?n.changed=t=>r(e,t):n.__proto__&&(n.__proto__.changed=t=>r(e,t))}catch(t){}return n})(t,e),set:(t,e,n)=>"changed"==e?(t[e]=n,!0):(t[e]=n,o(t,e),!0)});return h.changed=s.push.bind(s),h}class R{constructor(){this._listeners=[]}listen(t){return this._listeners.push(t),this}remove(t){n(t,this._listeners)}dispatch(t){return this._listeners.forEach((e=>e(t))),this}}function I(){return new R}const x=/[\-\[\]{}()+?.,\\\^$|#\s]/g,E=/([:*])(\w+)/g;function P(t,e){var n=exports.toString.call(t).charAt(8);return"R"===n?t.test(e):"F"===n?t(e):t==e}const k=(t,e={})=>{let n={},s=[],i=t;return"string"==typeof i?(i=i.replace(x,"\\$&"),i=i.replace(E,(function(t,e,n){return s.push(n),":"===e?"([^/]*)":"(.*)"})),i=new RegExp("^"+i+"$"),n.parse=function(t){let n,r,o=0,h={},a=t.match(i);if(!a)return null;for(;o<s.length;){if(n=s[o++],r=a[o],e&&n in e&&!P(e[n],r))return null;h[n]=r}return h},n.stringify=function(e){let n,s,i=t;for(n in e)s=new RegExp("[:*]"+n+"\\b"),i=i.replace(s,e[n]);return i.replace(E,"")}):(n.parse=function(t){let e=t.match(i);return e&&{captures:e.slice(1)}},n.stringify=function(){return""}),n};const{div:L,a:T}=C;class N{get currentRoute(){return this._currentRoute}constructor(t){var e;this._routes={},this._routeMatchers=[],this.params={},this.query=new URLSearchParams,this._options=t,this._rootParent=t.rootParent,this._window=null!==(e=t.window)&&void 0!==e?e:window,this._location=this._window.location,this._history=this._window.history,this._initRouteMatchers(),this._modifyPushState(),this._listenEvents(),this.navigate(this._options.initialRoute)}navigate(t,e){const n=new URLSearchParams(e),s=n.toString(),i=this.query.toString();t==this._currentRoute&&s===i||(this.query=n,this._history.pushState("data","",t+(s?"?"+s:"")))}_setRoute(){return t=this,e=void 0,s=function*(){this._currentRouteTag&&(yield this._currentRouteTag.hide());const t=this._getRoute();t.parent?yield t.show():(this._hookLifecycle(t),this._rootParent.append(t)),this._currentRouteTag=t},new((n=void 0)||(n=Promise))((function(i,r){function o(t){try{a(s.next(t))}catch(t){r(t)}}function h(t){try{a(s.throw(t))}catch(t){r(t)}}function a(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,h)}a((s=s.apply(t,e||[])).next())}));var t,e,n,s}_hookLifecycle(t){const e=this._options;(e.remove||e.start)&&p(t,e.start?e.start:null,e.remove?e.remove:null,e.beforeRemove?e.beforeRemove:null)}_getEffectiveRoute(){let t,e=this._currentRoute,n=1e4;for(;"string"==typeof(t=this._options.routes[e])&&n--&&"string"==typeof t;)e=t;return e}_getRoute(){let t=this._getEffectiveRoute(),e=t;this.query=new URLSearchParams(this._location.search);let n=!1;for(let t of this._routeMatchers){const s=t.matcher.parse(e);if(s){e=t.key,this.params=s,n=!0;break}}if(n||(e=this._options.fallbackRoute),!(e in this._options.routes))return this._options.noRouteBuilder?this._options.noRouteBuilder(this):L("No route found for: "+t);if(this._routes[e])return this._routes[e].show(),this._routes[e];let s=this._options.routes[e];if("function"!=typeof s)throw new Error("Can find route builder for "+this._currentRoute);return this._routes[e]=s(this)}_setCurrentRoute(){this.currentRoute!=this._location.pathname&&(this._currentRoute=this._location.pathname,this._setRoute())}_listenEvents(){this._window.addEventListener("popstate",this._setCurrentRoute.bind(this)),this._window.addEventListener("pushstate",this._setCurrentRoute.bind(this))}_modifyPushState(){const t=this._history.pushState;this._history.pushState=(...e)=>{t.call(this._history,...e),this._window.dispatchEvent(new window.Event("pushstate"))}}_initRouteMatchers(){for(let t in this._options.routes)this._routeMatchers.push({key:t,matcher:k(t)})}}let A;function O(t){return A=new N(t)}function B(t,e,n){return T(t).addAttr("href","javascript:;").setStyle({margin:"0 8px 0 0"}).clicked((()=>{if(!A)throw new Error("Link can\t navigate, there is no router available");A.navigate(e,n)}))}const $={};var j=e.wc,q=e.Kh,F=e.vp,U=e.rU,M=e.F0,D=e.iF,H=e.ub,V=e.om,Z=e.nU,J=e.Dk,K=e.ZP,z=e.og,Q=e.lW,W=e.TB,G=e.xZ,X=e.S1,Y=e.Kn,tt=e.EP,et=e.SB,nt=e.xj,st=e.Nd,it=e.C6,rt=e._q,ot=e.fL,ht=e.Qs,at=e.Uq;export{j as CTag,q as CssGenerator,F as EventEmitter,U as Link,M as Router,D as allTags,H as attach,V as attached,Z as callOrReturn,J as camelToDash,K as default,z as detach,Q as detachAll,W as eventEmitter,G as fromJson,X as init,Y as isObject,tt as makeRouter,et as onLifecycle,nt as removeFromList,st as router,it as state,rt as tag,ot as text,ht as toJson,at as withLifecycle};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,