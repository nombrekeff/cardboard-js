var t={d:(e,s)=>{for(var n in s)t.o(s,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:s[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)},e={};function s(t,e){const s=e.indexOf(t);return-1!==s&&e.splice(s,1),e}t.d(e,{wc:()=>m,Kh:()=>l,rU:()=>T,F0:()=>x,iF:()=>R,ub:()=>y,om:()=>f,nU:()=>a,Dk:()=>n,HO:()=>i,ZP:()=>E,og:()=>v,lW:()=>b,xZ:()=>h,S1:()=>w,Kn:()=>r,EP:()=>N,SB:()=>p,xj:()=>s,Nd:()=>k,C6:()=>I,_q:()=>_,fL:()=>c,Qs:()=>o,Uq:()=>g});const n=t=>t.replace(/([A-Z])/g,(t=>`-${t.toLowerCase()}`)),i=t=>t.replace(/(\-[a-z])/g,(t=>t.toUpperCase().replace("-","")));function r(t){return"object"==typeof t&&!(t instanceof Array)}const o=t=>JSON.parse(t),h=t=>JSON.stringify(t),a=(t,...e)=>"function"==typeof t?t(...e):t;class l{generateCss(t){let e=t instanceof Array?t:[t],s="";for(const t of e)for(const e in t)s+=this.generateBlock(e,t[e]);return s}generateBlock(t,e){return this.generateBlockContent(t,e).join("")}generateBlockContent(t,e){let s="",n=[];for(const i in e)r(e[i])?n.push(this.generateBlockContent(t+i,e[i])):e[i]&&(s+=this.generateStyle(i,e[i]));return n.unshift(`${t}{${s}}`),n}generateStyle(t,e){return`${n(t)}:${e};`}}function c(t,e){const s=document.createTextNode(""),n=/\B\$([0-9]+|[a-z][a-z0-9_$]*)/gi,i=()=>{s.nodeValue=e?t.replace(n,((t,s)=>null!=e[s]?e[s].toString():t)):t};if(e&&r(e))for(let s in e)t.includes(`$${s}`)&&e[s].changed((()=>{i()}));return i(),s}var u=function(t,e,s,n){return new(s||(s=Promise))((function(i,r){function o(t){try{a(n.next(t))}catch(t){r(t)}}function h(t){try{a(n.throw(t))}catch(t){r(t)}}function a(t){var e;t.done?i(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(o,h)}a((n=n.apply(t,e||[])).next())}))};let d={attachedTag:null,attachedTagStack:[],css:new l};function f(){return d.attachedTag}class m{get parent(){return this._parent}set parent(t){this._parent=t}get children(){return this._getElementChildren(this.element),this._cachedChildren}get value(){return this.element.value}get style(){return this.element.style}setValue(t){return this.element.value=t,this}get consumeValue(){const t=this.value;return this.clear(),t}get id(){return this.element.id}setId(t){return this.element.id=t,this}constructor(t,e=[],s=!1){if(this._parent=null,this._children=[],this._cachedChildren=[],this._attachable=!1,this._meta={isHidden:!1,nextSiblingID:null},this._attachable=s,"string"==typeof t&&t.match(/\(.+\)/))this._attachable=!1,this.element=document.querySelector(t.match(/\((.+)\)/)[1]);else if("string"==typeof t)this.element=document.createElement(t);else{if(!(t instanceof HTMLElement))throw new Error("Invalid argument 0");this._attachable=!1,this.element=t}d.attachedTag&&this._attachable&&d.attachedTag.append(this),e.length>0&&this.setChildren(e)}setChildren(t){return this.element.replaceChildren(...t.map(this._setChildrenParent.bind(this)).filter(this._childrenFilterPredicate.bind(this)).map(this._getElementForChild)),this._children=t,this}append(...t){return this.element.append(...t.map(this._setChildrenParent.bind(this)).filter(this._childrenFilterPredicate.bind(this)).map(this._getElementForChild)),this._children.push(...t),this}prepend(...t){return this.element.prepend(...t.filter(this._childrenFilterPredicate.bind(this)).map(this._getElementForChild)),this._children.unshift(...t),this}consume(t,e){return t.changed((t=>e(this,t))),e(this,t),this}show(){return u(this,void 0,void 0,(function*(){if(!this.parent.children.includes(this.element)){const t=this.parent._children.indexOf(this);if(0==t)this.parent.element.prepend(this.element);else if(t==this.parent._children.length-1)this.parent.element.append(this.element);else{let e=0;for(let s=t-1;s>=0;s--){const t=this.parent._children[s];t instanceof m&&t._meta.isHidden&&e++}const s=this.parent.element.childNodes[t-e];this.parent.element.insertBefore(this.element,s)}}return this._meta.isHidden=!1,!0}))}hide(){return u(this,void 0,void 0,(function*(){this.parent.children.includes(this.element)&&(console.log(this.remove),yield this.remove(),this._meta.isHidden=!0)}))}doIf(t,e,s,n=!1){if(n){let t=e;e=s,s=t}const i=t=>{t?e(t):s(t)};return t.changed(i),i(t),this}doIfNot(t,e,s){return this.doIf(t,e,s,!0)}hideIf(t,e=!1){const s=t=>{const s=e?!t:!!t;this._meta.isHidden=s,this.parent&&(s?this.hide():this.show())};return t.changed(s),s(t),this}hideIfNot(t){return this.hideIf(t,!0)}classIf(t,e,s=!1){return this.doIf(t,(()=>this.addClass(...a(e,this))),(()=>this.rmClass(...a(e,this))),s)}classIfNot(t,e){return this.classIf(t,e,!0)}textIf(t,e,s="",n=!1){return this.doIf(t,(()=>this.text(a(e,this))),(()=>this.text(a(s,this))),n)}textIfNot(t,e,s=""){return this.textIf(t,e,s,!0)}attrIf(t,e,s="",n=!1){return this.doIf(t,(()=>this.addAttr(e,a(s,this))),(()=>this.rmAttr(e)),n)}attrIfNot(t,e,s=""){return this.attrIf(t,e,s,!0)}disableIf(t,e=!1){return this.attrIf(t,"disabled","",e)}disableIfNot(t){return this.disableIf(t,!0)}styleIf(t,e,s="",n=!1){return this.doIf(t,(()=>this.addStyle(e,a(s,this))),(()=>this.rmStyle(e)),n)}styleIfNot(t,e,s=""){return this.styleIf(t,e,s,!0)}stylesIf(t,e,s=!1){return this.doIf(t,(()=>this.setStyle(a(e,this))),(()=>this.rmStyle(...Object.keys(e))),s)}stylesIfNot(t,e){return this.stylesIf(t,e,!0)}listen(t,e,s){return t.on(e,((t,e)=>s(this,t,e))),this}text(t,e){return null==t?this.element.textContent:e&&t?this.setChildren([c(t,e)]):(this.element.textContent=t,this)}config(t){if(t.attr&&this.setAttrs(t.attr),t.classList&&this.addClass(...t.classList),t.className&&this.className(t.className),t.style&&this.setStyle(t.style),t.text&&this.text(t.text),t.value&&this.setValue(t.value),t.children&&this.append(...t.children),t.on)for(const e in t.on)this.on(e,t.on[e]);return this}addClass(...t){return this.element.classList.add(...t),this}className(t){return this.element.className=t,this}rmClass(...t){for(let e of t)this.element.classList.remove(e);return this}hasClass(...t){for(let e of t)if(!this.element.classList.contains(e))return!1;return!0}replaceClass(t,e){return this.element.classList.replace(t,e),this}toggleClass(t){return this.hasClass(t)?this.rmClass(t):this.addClass(t),this}addStyle(t,e){return this.element.style[t]=e,this}setStyle(t){for(let e in t)this.addStyle(e,t[e]);return this}rmStyle(...t){for(let e of t)this.element.style.removeProperty(e);return this}hasStyle(...t){for(let e of t)if(!this.element.style.getPropertyValue(n(e)))return!1;return!0}setAttrs(t){for(let e in t)this.addAttr(e,t[e]);return this}addAttr(t,e){return this.element.attributes[t]=e,this.element.setAttribute(t,e),this}rmAttr(...t){for(let e of t)this.element.removeAttribute(e),delete this.element.attributes[e];return this}hasAttr(...t){for(let e of t)if(!(e in this.element.attributes))return!1;return!0}getAttr(t){return this.element.attributes[t]}when(t,e){return{changed:s=>{this.on(t,(()=>{s(e(this))}))}}}on(t,e){return e&&this.element.addEventListener(t,(t=>e(this,t))),this}once(t,e){if(e){const s=n=>{e(this,n),this.element.removeEventListener(t,s)};this.element.addEventListener(t,s)}return this}clicked(t){return this.on("click",t)}keyPressed(t,e){return e?this.on("keypress",((s,n)=>{n.code!=e&&n.key!=e||t(this,n)})):this.on("keypress",t)}changed(t){return this.on("change",t)}submited(t){return this.on("submit",t)}remove(){return u(this,void 0,void 0,(function*(){return yield this.element.remove(),this}))}clear(){return this.element.value="",this.element.dispatchEvent(new InputEvent("input")),this}disable(){return this.setDisabled(!0),this.addAttr("disabled","disabled"),this}enable(){return this.setDisabled(!1),this}setDisabled(t){t?this.addAttr("disabled","disabled"):this.rmAttr("disabled")}q(t){const e=this.element.querySelector(t);if(e)return new m(e)}find(t){for(const e of this._children)if(t(e))return e}findTag(t){for(const e of this._children)if(e instanceof m&&t(e))return e}_setChildrenParent(t){return t instanceof m&&(t.parent=this),t}_childrenFilterPredicate(t){return!(t instanceof m&&t._meta.isHidden)}_getElementForChild(t){return"string"==typeof t?document.createTextNode(t):t instanceof m?t.element:t instanceof Node?t:null}_getElementChildren(t){this._mutationObserver||(this._mutationObserver=new MutationObserver(((e,s)=>{this._setCachedChildren(t)})),this._mutationObserver.observe(this.element,{childList:!0}),this._setCachedChildren(t))}_setCachedChildren(t){let e=t.childNodes,s=[],n=e.length;for(;n--;)1==e[n].nodeType&&s.unshift(e[n]);this._cachedChildren=s}}function _(t,e=[],s=!1){return new m(t,e,s)}function p(t,e,s,n){var i,r;let o=!1;if(n){const e=t.element.remove;t.element.remove=()=>u(this,void 0,void 0,(function*(){console.log("element.remove");const s=n(t);(!s||s instanceof Promise&&(yield s))&&e.call(t.element),console.log("element.remove end")}))}if(e){const e=t.show;t.show=()=>u(this,void 0,void 0,(function*(){console.log("element.show");const s=e.call(t);return s instanceof Promise?yield s:s}))}const h=new MutationObserver(((n,i)=>u(this,void 0,void 0,(function*(){let r=!1,h=!1;for(let i of n)e&&Array.from(i.addedNodes).includes(t.element)&&(r=!0),s&&Array.from(i.removedNodes).includes(t.element)&&(h=!0);if(r&&e){const s=e(t,i);s instanceof Promise&&(yield s),o||(i.disconnect(),i.observe(t.element.parentElement,{childList:!0}),o=!0)}h&&s&&s(t,i)}))));return h.observe(null!==(r=null===(i=t.parent)||void 0===i?void 0:i.element)&&void 0!==r?r:document.body,{childList:!0,subtree:!0}),h}const g=(t,e)=>(p(t,e.start,e.removed,e.beforeRemove),t);function y(t){return d.attachedTag&&d.attachedTagStack.push(d.attachedTag),d.attachedTag=t,t}function v(){d.attachedTagStack.length>0?d.attachedTag=d.attachedTagStack.pop():d.attachedTag=null}function b(){d.attachedTag=null,d.attachedTagStack=[]}function w(t={root:"body"}){const e=new m(`(${t.root})`);return y(e),e}const C={ul:(t,e=!1)=>_("ul",t.map((t=>_("li",[t],e)))),style:(t,e=!1)=>_("style",[d.css.generateCss(t)],e)},R=new Proxy({},{get:(t,e,s)=>{const n=e.toString(),i=(...t)=>C[n]?C[n](t,!1):_(n,t);return Object.defineProperty(i,"attach",{get:()=>(...t)=>C[n]?C[n](t,!0):_(n,t,!0)}),i}});function I(t,e){let s={},n=[];e&&n.push(e);const i=(t,e)=>{s[t]||(s[t]=[]),s[t].includes(e)||s[t].push(e)},o=(t,e)=>{if(s[e])for(const n of s[e])n(t[e]);for(const e of n)e(t)};for(let e of Object.getOwnPropertyNames(t))(r(t[e])||t[e]instanceof Array)&&(t[e]=I(t[e],(()=>o(t,e))));const h=new Proxy(t,{deleteProperty:function(t,e){return o(t,e),delete t[e],!0},get:(t,e)=>((t,e)=>{const s=t[e];try{r(t[e])?s.changed=t=>i(e,t):s.__proto__&&(s.__proto__.changed=t=>i(e,t))}catch(t){}return s})(t,e),set:(t,e,s)=>"changed"==e?(t[e]=s,!0):(t[e]=s,o(t,e),!0)});return h.changed=t=>{n.push(t)},h}const{div:S,a:P}=R;class x{get currentRoute(){return this._currentRoute}constructor(t){var e;this._routes={},this._options=t,this._rootParent=t.rootParent,this._window=null!==(e=t.window)&&void 0!==e?e:window,this._location=this._window.location,this._history=this._window.history,this._modifyPushState(),this._listenEvents(),this.navigate(this._options.initialRoute)}navigate(t){console.debug(`[Router] -> Navigate to ${t}`),t!=this._currentRoute&&this._history.pushState("data","",t)}_setRoute(){return t=this,e=void 0,n=function*(){console.debug(`[Router] -> _setRoute ${this._currentRoute}`),this._currentRouteTag&&(yield this._currentRouteTag.hide());const t=this._getRoute();this._rootParent.append(t),this._currentRouteTag=t},new((s=void 0)||(s=Promise))((function(i,r){function o(t){try{a(n.next(t))}catch(t){r(t)}}function h(t){try{a(n.throw(t))}catch(t){r(t)}}function a(t){var e;t.done?i(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(o,h)}a((n=n.apply(t,e||[])).next())}));var t,e,s,n}_getRoute(){console.debug(`[Router] -> _getRoute ${this._currentRoute}`);let t=this._currentRoute,e=1e4;for(;"string"==typeof this._options.routes[t]&&e--;){let e=this._options.routes[t];if("string"!=typeof e)break;console.debug(`[Router] -> _getRoute ${t} is alias for ${e}`),t=e}if(t in this._options.routes||(console.debug(`[Router] -> _getRoute ${t} not found, fallback to ${this._options.fallbackRoute}`),t=this._options.fallbackRoute),!(t in this._options.routes))return console.debug(`[Router] -> _getRoute ${t} not found in the router, fallback to "noRoot" or default error`),this._options.noRoot?this._options.noRoot(this):S("No route found for: "+t);if(this._routes[t])return console.debug(`[Router] -> _getRoute ${t} is cached, using that`),this._routes[t].show(),this._routes[t];let s=this._options.routes[t];if("function"!=typeof s)throw new Error("Can find route builder for "+this._currentRoute);return console.debug(`[Router] -> _getRoute ${t} is not cached, creating new one`),this._routes[t]=s(this)}_setCurrentRoute(){this.currentRoute!=this._location.pathname&&(this._currentRoute=this._location.pathname,this._setRoute())}_listenEvents(){this._window.addEventListener("popstate",this._setCurrentRoute.bind(this)),this._window.addEventListener("pushstate",this._setCurrentRoute.bind(this))}_modifyPushState(){const t=this._history.pushState;this._history.pushState=(...e)=>{t.call(this._history,...e),this._window.dispatchEvent(new Event("pushstate"))}}}let k;function N(t){return k=new x(t),k}function T(t,e){return P(t).addAttr("href","javascript:;").setStyle({margin:"0 8px 0 0"}).clicked((()=>{if(!k)throw new Error("Link can\t navigate, there is no router available");k.navigate(e)}))}const E={};var L=e.wc,A=e.Kh,O=e.rU,$=e.F0,F=e.iF,j=e.ub,B=e.om,H=e.nU,q=e.Dk,D=e.HO,U=e.ZP,V=e.og,Z=e.lW,J=e.xZ,K=e.S1,z=e.Kn,M=e.EP,Q=e.SB,W=e.xj,G=e.Nd,X=e.C6,Y=e._q,tt=e.fL,et=e.Qs,st=e.Uq;export{L as CTag,A as CssGenerator,O as Link,$ as Router,F as allTags,j as attach,B as attached,H as callOrReturn,q as camelToDash,D as dashToCamel,U as default,V as detach,Z as detachAll,J as fromJson,K as init,z as isObject,M as makeRouter,Q as onLifecycle,W as removeFromList,G as router,X as state,Y as tag,tt as text,et as toJson,st as withLifecycle};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,