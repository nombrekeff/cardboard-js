{"version":3,"sources":["../src/context.ts","../src/events.ts","../src/util.ts","../src/tag.ts","../src/text.ts","../src/observables.ts","../src/state.ts","../src/css-generator.ts","../src/lifecycle.ts","../src/all-tags.ts","../src/style-manager.ts","../src/each.ts","../src/cardboard.ts"],"names":["context_exports","__export","checkInitialized","clearMountPoints","context","createGlobalObserver","getMountPoint","isInitialized","mountPoint","resetMountPoints","restoreMountPoint","withMountPoint","events_exports","CEvent","CMappedEvent","mappedEvent","singleEvent","util_exports","arraysEqual","camelToDash","deepEquals","generateUID","isArray","isObject","removeFromList","swapItems","uuidv4","val","item","list","index","str","obj","args","array","from","to","temp","a","b","i","length","keys","key","idNumber","c","fn","data","el","evt","tag","first","scopedCallback","_addedEvt","_removedEvt","mutations","observer","mut","n","tag_exports","CTag","text_exports","text","observables_exports","Observable","compute","computeMultiple","createObservable","equalTo","getValue","grab","greaterThan","greaterThanOr","isEmpty","isObservable","lessThan","lessThanOr","notEmpty","notEqualTo","destroyer","transform","defaultVal","target","p","receiver","newValue","callback","other","observable","cb","observables","cons","newVal","textTemplate","node","interpolatePattern","updateNode","m","g1","_a","_CTag","arg0","children","mountToParent","match","selector","element","newParent","checked","value","id","__async","parentEl","expectedIndex","hiddenBefore","child","nextEl","consumer","ifTrue","ifFalse","invert","_","handleHide","correctedValue","classes","elseText","attr","style","styles","className","targetClass","replaceClass","property","styleNames","attrs","evtName","t","listener","result","cl","disabled","predicate","nodes","mapped","state_exports","listState","state","stateAdd","stateAddAt","stateRemove","stateRemoveWhere","initialValue","initialData","_list","d","newData","css_generator_exports","genBlock","genBlockContent","genCss","styleSheet","stylesheets","generatedCss","sheet","inside","blocks","newSelector","lifecycle_exports","onLifecycle","withLifecycle","onMounted","onUnmounted","beforeUnmounted","tempElRemove","tempOnStart","onAddedCb","onRemovedCb","_b","handler","all_tags_exports","allTags","interceptors","r","tagName","style_manager_exports","StyleManager","STYLE_TAG_ID","styleTag","error","css","DiffState","each","builder","elements","oldData","nodeParentIndex","elementsCopy","actionMap","entry","elAt","fromIndex","toIndex","elementFrom","elementTo","parentNode","nextSiblingNode","tempCopy","MAX_UPDATE_TRIES","updateList","tries","diff","diffList","nextIndex","nextState","newLength","oldLength","removedCount","oi","newEntry","oldEntry","existsNew","existsOld","oldIndex","init","options","Cardboard","__spreadProps","__spreadValues"],"mappings":"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","file":"cardboard.cjs","sourcesContent":["import { singleEvent, type CEvent } from \"./events.js\";\nimport { CTag } from \"./tag.js\";\nimport type { StyleManager } from \"./types.js\";\n\nexport type CardboardContext = {\n    intersectionObserver?: IntersectionObserver;\n    styleManager?: StyleManager;\n    mountPoint?: CTag;\n    mountPointHistory: CTag[];\n    observer?: {\n        onAdded: CEvent<Node>;\n        onRemoved: CEvent<Node>;\n    };\n    initialized?: boolean;\n};\n\nexport const context: CardboardContext = {\n    mountPoint: undefined,\n    mountPointHistory: [],\n    styleManager: undefined,\n    intersectionObserver: undefined,\n    observer: undefined,\n    initialized: false,\n};\n\nexport const isInitialized = () => context.initialized === true;\nexport const checkInitialized = () => {\n    if (!isInitialized()) {\n        throw new Error(\"Cardboard is not initialized. Please call `init()`, as some features will not work.\");\n    }\n};\n\n/**\n * Returns the current mountPoint {@link CTag}. See {@link mountPoint} for more information.\n */\nexport const getMountPoint = () => context.mountPoint;\n\n/**\n * Makes the given tag the mount point. This means that when other tags are created with \"mountToParent\" or  (using `<tag_name>.mount()`, `tag('<tag_name>', [], true)`),\n * they will be added as children of this tag.\n * You can call mountPoint multiple times, and the last mount point tag will be used.\n * Then when you've finished, you can call {@link restoreMountPoint} to go back to the previously mounted tag if there is one.\n * You can clear all mount points using {@link clearMountPoints}.\n *\n * @example\n * ```ts\n * mountPoint(div()); // Div 1\n * div.mount();  // added as child of div\n * p.mount();    // added as child of div\n *\n * mountPoint(div()); // Div 2\n * div.mount();  // added as child of new div\n * p.mount();    // added as child of new div\n *\n * restoreMountPoint();      // Back to div 1\n * clearMountPoints();       // Clears all mount points, no mount point after this call\n * ```\n */\nexport const mountPoint = (tag: CTag) => {\n    if (context.mountPoint) {\n        context.mountPointHistory.push(context.mountPoint);\n    }\n    context.mountPoint = tag;\n    return tag;\n};\n\n/**\n * Restore the currently mounted tag ({@link mountPoint}). \n * Goes back in the stack of mount points tags.\n * If there is no previous mount point tag, it will not do anything.\n */\nexport const restoreMountPoint = () => {\n    context.mountPoint = context.mountPointHistory.pop();\n};\n\n/**\n * Restores all mount points. There will be no mount points tag after calling this function.\n */\nexport const clearMountPoints = () => {\n    context.mountPoint = undefined;\n    context.mountPointHistory = [];\n};\n\n/**\n * Clears the mount point history and resets the mount point to the first one.\n * This means that the mount point will be the first tag that was mounted, \n * and all other mount points will be cleared.\n */\nexport const resetMountPoints = () => {\n    let first = context.mountPointHistory.shift();\n    context.mountPoint = first;\n    context.mountPointHistory = [];\n};\n\nexport type ScopedCallback = (tag: CTag) => void;\n\n/**\n * Sets the mount point to the given tag, calls the scoped callback, and then restores the mount point.\n * Useful for creating a temporary mount point for a specific tag, and then restoring the previous mount point.\n * \n * @param tag \n * @param scopedCallback \n */\nexport const withMountPoint = (tag: CTag, scopedCallback: ScopedCallback) => {\n    mountPoint(tag);\n    scopedCallback(tag);\n    restoreMountPoint();\n}\n\n// TODO: Optimize this. Instead of observing everything, let lifecycles listen just to the parent of the element instead of everything.\nexport const createGlobalObserver = () => {\n    const _addedEvt = singleEvent<Node>();\n    const _removedEvt = singleEvent<Node>();\n\n    const observer = new window.MutationObserver((mutations, observer) => {\n        for (const mut of mutations) {\n            for (const n of Array.from(mut.addedNodes)) {\n                _addedEvt.dispatch(n);\n            }\n            for (const n of Array.from(mut.removedNodes)) {\n                _removedEvt.dispatch(n);\n            }\n        }\n    });\n\n    observer.observe(window.document.body, {\n        childList: true,\n        subtree: true,\n    });\n\n    return {\n        onAdded: _addedEvt,\n        onRemoved: _removedEvt,\n    };\n};","import { removeFromList } from './util.js';\n\n/**\n * Single event listener/emitter, listen to, and trigger events. (for mapped events use {@link CMappedEvent}).\n *\n * @example\n * ```ts\n * const evt = new CEvent<bool>();\n * evt.listen(listener);\n * evt.dispatch(true);\n * evt.remove(listener);\n * ```\n */\nexport class CEvent<T> {\n  protected _listeners: Array<(data: T | undefined) => void> = [];\n\n  listen(fn: (data?: T) => void) {\n    this._listeners.push(fn);\n  }\n\n  remove(fn: (data?: T) => void) {\n    removeFromList(fn, this._listeners);\n  }\n\n  dispatch(data?: T) {\n    this._listeners.forEach((el) => el(data));\n  }\n\n  destroy() {\n    this._listeners = [];\n  }\n}\n\n/**\n * Mapped event listener/emitter, listen to, and trigger events. (for single events use {@link CEvent}).\n *\n * @example\n * ```ts\n * const evt = new CMappedEvent<bool>();\n * evt.listen('evt', listener);\n * evt.dispatch('evt', true);\n * evt.remove('evt', listener);\n * ```\n */\n\nexport class CMappedEvent<T> {\n  private _listeners: Record<string, Array<(data?: T) => void>> = {};\n\n  listen(evt: string, fn: (data?: T) => void) {\n    if (!(evt in this._listeners)) {\n      this._listeners[evt] = [fn];\n    }\n    else if (this._listeners[evt]) {\n      this._listeners[evt].push(fn);\n    }\n  }\n\n  remove(evt: string, fn: (data?: T) => void) {\n    removeFromList(fn, this._listeners[evt]);\n  }\n\n  dispatch(evt: string, data?: T) {\n    if (evt in this._listeners) {\n      this._listeners[evt].forEach((el) => el(data));\n    }\n  }\n\n  destroy() {\n    this._listeners = {};\n  }\n}\n\nexport const singleEvent = <T>() => {\n  return new CEvent<T>();\n};\n\nexport const mappedEvent = <T>() => {\n  return new CMappedEvent<T>();\n};\n","/** Removes an item from an array if it exists. It returns whether it was removed or not */\nexport const removeFromList = <T>(item: T, list?: T[]) => {\n  if (!list) return false;\n\n  const index = list.indexOf(item);\n\n  if (index !== -1) {\n    list.splice(index, 1);\n    return true;\n  }\n\n  return false;\n};\n\nexport const camelToDash = str => str.replace(/([A-Z])/g, val => `-${val.toLowerCase()}`);\n\nexport const isObject = (obj: any): boolean => {\n  return typeof obj === 'object' && !(obj instanceof Array);\n};\nexport const isArray = (obj) => {\n  return Object.prototype.toString.call(obj) === '[object Array]';\n};\nexport const val = <T>(val: T | ((...args: any) => T), ...args): T => {\n  if (typeof val === 'function') {\n    return (val as any)(...args);\n  }\n  return val;\n};\nexport const swapItems = (array: any[], from: number, to: number) => {\n  const temp = array[from];\n  array[from] = array[to];\n  array[to] = temp;\n  return array;\n};\nexport const arraysEqual = (a?: any[], b?: any[]) => {\n  if (a === b) return true;\n  if (a == null || b == null) return false;\n  if (a.length !== b.length) return false;\n\n  // If you don't care about the order of the elements inside\n  // the array, you should sort both arrays here.\n  // Please note that calling sort on an array will modify that array.\n  // you might want to clone your array first.\n\n  for (let i = 0; i < a.length; ++i) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n};\n\n/* eslint-disable  */\n/* istanbul ignore next */\nexport const deepEquals = (a, b) => {\n  if (a === b) return true;\n  if (a && b && a.length !== b.length) return false;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!deepEquals(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!deepEquals(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a !== a && b !== b;\n}\n\n/**\n * Generates a unique ID for a Cardboard tag.\n * If an `idNumber` is provided, it will return a string in the format `c_<idNumber>`.\n * If no `idNumber` is provided, it will generate a random UUID in the format `c_xxxxxxxxxx`.\n * \n * @returns A unique ID string for a Cardboard tag.\n */\nexport function generateUID(idNumber?: number): string {\n  if (!idNumber) return uuidv4();\n  return `c_${idNumber}`;\n}\n\nexport function uuidv4() {\n  return \"c_1000000010\".replace(/[018]/g, c =>\n    (+c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> +c / 4).toString(16)\n  );\n}","import type {\n  IObservable,\n  NoOp,\n  Primitive,\n  StyleMap,\n  TagChild,\n  TagChildren,\n  TagConfig,\n  TextObj,\n} from './types';\nimport { CssProperty } from './css-properties.js';\nimport { PickPropertyValues } from './css-property-values.js';\nimport { TagName } from './tag-names.js';\nimport { val, camelToDash } from './util.js';\nimport { text } from './text.js';\nimport { createObservable, isObservable } from './observables.js';\nimport { CommonAttributes } from './attributes.js';\nimport { checkInitialized, context } from './context.js';\n\n\n/**\n * This is the main class in Cardboard. Even though Cardboard is designed to not need to use this class directly, you can if you want.\n *\n * CTag contains a reference to an HTMLElement, its parent, and provides a set of methods to interact with it.\n */\nexport class CTag {\n  /** Reference to the HTMLElement that this @type {CTag} represents */\n  el: HTMLElement & { remove: () => (Promise<boolean> | any) };\n\n  private _visible = false;\n  get visible() {\n    return this._visible;\n  }\n\n  set visible(newValue: boolean) {\n    this._visible = newValue;\n    this.el.dispatchEvent(new CustomEvent('visible', {\n      detail: {\n        visible: newValue,\n        tag: this,\n      },\n      bubbles: true,\n      composed: true,\n    }));\n  }\n\n  /**\n   * Any function inside this array, will be called whenever the CTag is {@link destroy}ed\n   * Used to remove HTML Event Listeners and Observable listeners\n   */\n  private readonly _destroyers: NoOp[] = [];\n\n  /** @param parent Reference to the parent @type {CTag} of this element */\n  private _parent?: CTag;\n\n  get parent(): CTag | undefined {\n    return this._parent;\n  }\n\n  set parent(newParent: CTag) {\n    this._parent = newParent;\n  }\n\n  /** Holds the list of all children, the ones that are currently in the DOM and those that are not */\n  private _children: TagChild[] = [];\n\n  private _cachedChildren: Node[] = [];\n  get children() {\n    return this._getChildren(this.el);\n  }\n\n  private readonly _meta = {\n    isHidden: false,\n    nextSiblingID: null,\n  };\n\n  get value() {\n    return (this.el as any).value;\n  }\n\n  setValue(newValue: string) {\n    (this.el as any).value = newValue;\n    return this;\n  }\n\n  get checked() {\n    return (this.el as any).checked;\n  }\n\n  setChecked(checked: boolean) {\n    (this.el as any).checked = checked;\n    return this;\n  }\n\n  get style() {\n    return this.el.style;\n  }\n\n  get className() {\n    return this.el.className;\n  }\n\n  get classList() {\n    return this.el.classList;\n  }\n\n  /** Gets the value of the element and clears the value */\n  get consumeValue() {\n    const value = this.value;\n    this.clear();\n    return value;\n  }\n\n  get id() {\n    return this.el.id;\n  }\n\n  setId(id: string) {\n    this.el.id = id;\n    return this;\n  }\n\n  constructor(arg0: TagName | HTMLElement, children: TagChildren = [], mountToParent: boolean = false) {\n    const isSelector = typeof arg0 === 'string' && arg0.match(/\\(.+\\)/);\n\n    if (isSelector) {\n      const match = arg0.match(/\\(([\\.\\#]?[a-zA-Z][a-zA-Z0-9_$]+)\\)/);\n      const selector = match ? match[1] : null;\n      if (!selector) {\n        throw new Error(`'${arg0}' is not a valid selector`);\n      }\n\n      const element = document.querySelector(selector);\n\n      if (!element) {\n        throw new Error('Can\\'t find element for selector: ' + arg0);\n      }\n\n      this.el = element as HTMLElement;\n    }\n    else if (typeof arg0 === 'string') {\n      this.el = document.createElement(arg0);\n\n      if (context.mountPoint && mountToParent) {\n        context.mountPoint.append(this);\n      }\n    }\n    else if (arg0 instanceof HTMLElement) {\n      this.el = arg0;\n    }\n    else {\n      throw new Error('Invalid argument: ' + arg0);\n    }\n\n    if (children.length > 0) this.setChildren(children);\n\n    // Used by other parts of Cardboard to identify this tag\n    (this.el as any).tag = this;\n  }\n\n  /** Sets the children, removes previous children  */\n  setChildren(children: TagChildren) {\n    this.el.replaceChildren(...this._mapChildren(children));\n    this._children = children;\n    return this;\n  }\n\n  append(...children: TagChildren) {\n    this.el.append(...this._mapChildren(children));\n    this._children.push(...children);\n    return this;\n  }\n\n  prepend(...children: TagChildren) {\n    this.el.prepend(...this._mapChildren(children));\n    this._children.unshift(...children);\n    return this;\n  }\n\n  /**\n   * If the element is currently hidden it will add this element to the page wherever it's supposed to be.\n   * I will be placed exactly in the correct position, even if there are other elements hidden.\n   */\n  async show() {\n    if (this.parent && !this.parent.children.includes(this.el)) {\n      const parentEl = this.parent.el;\n      // Get's the position of the element if all the children are visible\n      const expectedIndex = this.parent._children.indexOf(this);\n\n      // If the element should be the first child in the parent\n      if (expectedIndex === 0) {\n        parentEl.prepend(this.el);\n      }\n      // If the element should be the last child in the parent\n      else if (expectedIndex === this.parent._children.length - 1) {\n        parentEl.append(this.el);\n      }\n      // If the element should be the nth child in the parent\n      else {\n        // Calculate how many hidden children are before this element\n        let hiddenBefore = 0;\n        for (let i = expectedIndex - 1; i >= 0; i--) {\n          const child = this.parent._children[i];\n          if (child instanceof CTag && child._meta.isHidden) {\n            hiddenBefore++;\n          }\n        }\n\n        // Get the \"real\" children in the dom.\n        // The index takes into account the items that are hidden\n        const nextEl = parentEl.childNodes[expectedIndex - hiddenBefore];\n        parentEl.insertBefore(this.el, nextEl);\n      }\n    }\n    this._meta.isHidden = false;\n    return true;\n  }\n\n  /** Hide this element (removed from DOM) */\n  async hide() {\n    if (this.parent && this.parent.children.includes(this.el)) {\n      this.parent.el.insertBefore(document.createComment(this.el.id), this.el as any);\n      await this.remove();\n      this._meta.isHidden = true;\n    }\n  }\n\n  /** Whenever the observable changes, it will call the consumer */\n  consume<T>(observable: IObservable<T>, consumer: (self: CTag, newValue?: T) => void) {\n    if (observable.changed) {\n      const cb = (newValue) => consumer(this, newValue);\n      observable.changed(cb);\n\n      this._destroyers.push(() => {\n        // Destroy reference to the observable, we don't need it anymore\n        observable.remove(cb);\n        (observable as any) = null;\n      });\n    }\n    else {\n      console.warn('An invalid Observable was supplied to `tag.consume`');\n    }\n\n    consumer(this, ('value' in observable) ? observable.value : observable);\n    return this;\n  }\n\n  /**\n   * When the observable changes, it will call {ifTrue} when the observable is true. Or {ifFalse} when the observable is false.\n   * If {invert} is set to true, the condition will be inversed, but you can also use {@link doIfNot}\n   */\n  doIf<T>(observable: IObservable<T>, ifTrue: (value?: T) => void, ifFalse: (value?: T) => void, invert = false) {\n    if (invert) {\n      const temp = ifTrue;\n      ifTrue = ifFalse;\n      ifFalse = temp;\n    }\n\n    const callback = (_, value) => {\n      // eslint-disable-next-line no-extra-boolean-cast\n      if (!!value) ifTrue(value);\n      else ifFalse(value);\n    };\n\n    return this.consume(observable, callback);\n  }\n\n  /**\n   * The oposite of {this.doIf}\n   * When the observable changes, it will call {ifTrue} if the observable is false. Or {ifFalse} if the observable is true.\n   */\n  doIfNot<T>(observable: IObservable<T>, ifTrue: (value: T) => void, ifFalse: (value: T) => void) {\n    return this.doIf(observable, ifTrue, ifFalse, true);\n  }\n\n  /**\n   * Hide this element when the consumer is truthy. Updates whenever the observable changes.\n   * If {invert} is set to true, the condition will be inversed, but you can also use {@link hideIfNot}\n   */\n  hideIf<T>(observable: IObservable<T>, invert = false) {\n    const handleHide = (_, value: any) => {\n      const correctedValue = invert ? !value : !!value;\n      this._meta.isHidden = correctedValue;\n\n      if (!this.parent) return;\n      if (!correctedValue) void this.show();\n      else void this.hide();\n    };\n\n    return this.consume(observable, handleHide);\n  }\n\n  /** Hide this element when the consumer is falsy. Updates whenever the observable changes. */\n  hideIfNot<T>(observable: IObservable<T>) {\n    return this.hideIf(observable, true);\n  }\n\n  /**\n   * Adds classes to the element when the consumer is truthy. Updates whenever the observable changes.\n   * You can pass in an array of classes, or a function that returns a list of classes.\n   * If {invert} is set to true, the condition will be inversed, but you can also use {@link classIfNot}\n   */\n  classIf<T>(observable: IObservable<T>, classes: string[] | ((self: CTag) => string[]), invert = false) {\n    return this.doIf(\n      observable,\n      () => this.addClass(...val(classes, this)),\n      () => this.rmClass(...val(classes, this)),\n      invert,\n    );\n  }\n\n  /**\n   * Adds classes to the element when the consumer is falsy. Updates whenever the observable changes.\n   * You can pass in an array of classes, or a function that returns a list of classes.\n   * For the oposite you can also use {@link classIf}\n   */\n  classIfNot<T>(observable: IObservable<T>, classes: string[] | ((self: CTag) => string[])) {\n    return this.classIf(observable, classes, true);\n  }\n\n  /**\n   * Sets {text} when the consumer is true, and sets {elseText (default='')} when the consumer is false.\n   * Both {text} and {elseText} can be a string or a function that returns a string.\n   * Updates whenever the observable changes.\n   * If {invert} is set to true, the condition will be inversed, but you can also use {@link textIfNot}\n   */\n  textIf<T>(\n    observable: IObservable<T>,\n    text: string | ((self: CTag) => string),\n    elseText: string | ((self: CTag) => string) = '',\n    invert = false,\n  ) {\n    return this.doIf(\n      observable,\n      () => this.text(val(text, this)),\n      () => this.text(val(elseText, this)),\n      invert,\n    );\n  }\n\n  /**\n   * Sets {text} when the consumer is falsy, and sets {elseText (default='')} when the consumer is truthy.\n   * Both {text} and {elseText} can be a string or a function that returns a string.\n   * Updates whenever the observable changes.\n   */\n  textIfNot<T>(\n    observable: IObservable<T>,\n    text: string | ((self: CTag) => string),\n    elseText: string | ((self: CTag) => string) = '',\n  ) {\n    return this.textIf(observable, text, elseText, true);\n  }\n\n  /**\n   * Add attribute to the element when the consumer is truthy. Updates whenever the observable changes.\n   * {value} can be a string or a function that returns a string.\n   * If {invert} is set to true, the condition will be inversed, but you can also use {@link attrIfNot}\n   */\n  attrIf<T>(observable: IObservable<T>, attr: CommonAttributes, value: string | ((self: CTag) => string) = '', invert = false) {\n    return this.doIf(\n      observable,\n      () => this.addAttr(attr, val(value, this)),\n      () => this.rmAttr(attr),\n      invert,\n    );\n  }\n\n  /**\n   * Add attribute to the element when the consumer is falsy. Updates whenever the observable changes.\n   * {value} can be a string or a function that returns a string.\n   * If {invert} is set to true, the condition will be inversed\n   */\n  attrIfNot<T>(observable: IObservable<T>, attr: CommonAttributes, value: string | ((self: CTag) => string) = '') {\n    return this.attrIf(observable, attr, value, true);\n  }\n\n  /**\n   * Disable this element when the consumer is truthy. Updates whenever the observable changes.\n   * If {invert} is set to true, the condition will be inversed, but you can also use {@link disableIfNot}\n   */\n  disableIf<T>(observable: IObservable<T>, invert = false) {\n    return this.attrIf(observable, 'disabled', '', invert);\n  }\n\n  /** Disable this element when the consumer is falsy. Updates whenever the observable changes. */\n  disableIfNot<T>(observable: IObservable<T>) {\n    return this.disableIf(observable, true);\n  }\n\n  /**\n   * Add style to the element when the consumer is truthy. Updates whenever the observable changes.\n   * If {invert} is set to true, the condition will be inversed, but you can also use {@link styleIfNot}\n   * {value} can be a string or a function that returns a string.\n   */\n  styleIf<T>(observable: IObservable<T>, style: string, value: string | ((self: CTag) => string) = '', invert = false) {\n    return this.doIf(\n      observable,\n      () => this.addStyle(style, val(value, this)),\n      () => this.rmStyle(style),\n      invert,\n    );\n  }\n\n  /**\n   * Add style to the element when the consumer is falsy. Updates whenever the observable changes.\n   * {value} can be a string or a function that returns a string.\n   */\n  styleIfNot<T>(observable: IObservable<T>, style: string, value: string | ((self: CTag) => string) = '') {\n    return this.styleIf(observable, style, value, true);\n  }\n\n  /**\n   * Add multiple styles to the element when the consumer is truthy. Updates whenever the observable changes.\n   * {styles} can be a {@link StyleMap} or a function that returns a {@link StyleMap}.\n   * If {invert} is set to true, the condition will be inversed, but you can also use {@link stylesIfNot}\n   */\n  stylesIf<T>(observable: IObservable<T>, styles: StyleMap | ((self: CTag) => StyleMap), invert = false) {\n    return this.doIf(\n      observable,\n      () => this.setStyle(val(styles, this)),\n      () => this.rmStyle(...Object.keys(styles)),\n      invert,\n    );\n  }\n\n  /**\n   * Add multiple styles to the element when the consumer is falsy. Updates whenever the observable changes.\n   * {styles} can be a {@link StyleMap} or a function that returns a {@link StyleMap}.\n   * For the oposite use  {@link stylesIf}\n   */\n  stylesIfNot<T>(observable: IObservable<T>, styles: StyleMap | ((self: CTag) => StyleMap)) {\n    return this.stylesIf(observable, styles, true);\n  }\n\n  /**\n   * Listen to an event on the element. Like addEventListener.\n   */\n  listen<K extends keyof HTMLElementEventMap>(\n    tag: CTag,\n    evt: K,\n    consumer: (self: CTag, other: CTag, evt: HTMLElementEventMap[K]) => void,\n  ) {\n    return tag.on(evt, (other, evt) => {\n      consumer(this, other, evt);\n    });\n  }\n\n  /**\n   * If {newText} is provided, it sets the `textContent` of the element.\n   * If {newText} is provided, and a state is provided. It will use the {newText} as a template,\n   * that will be interpolated with the values in the state, each time the state changes. It acts like {@link text}\n   *\n   * If no argument is provided, it returns the `textContent` of the element.\n   * @see https://github.com/nombrekeff/cardboard-js/wiki/Managing-Text\n   */\n  text<T extends Record<string, Primitive>, K extends TextObj, J extends string>(textTemplate?: string, obj?: IObservable<T> | K): J extends string ? CTag : string {\n    if (textTemplate == null) {\n      return this.el.textContent as any;\n    }\n\n    if (obj && textTemplate) {\n      return this.setChildren([text(textTemplate, obj)]) as any;\n    }\n\n    this.el.textContent = textTemplate;\n\n    return this as any;\n  }\n\n  /**\n   * Configure the element in a single call by passing @param {TagConfig} c\n   * instead of having to call a method for each property you want to changes\n   */\n  config(c: TagConfig) {\n    if (c.attr) this.setAttrs(c.attr);\n    if (c.classList) this.addClass(...c.classList);\n    if (c.className) this.setClassName(c.className);\n    if (c.style) this.setStyle(c.style);\n    if (c.text) this.text(c.text);\n    if (c.value) this.setValue(c.value);\n    if (c.children) this.append(...c.children);\n    if (c.on) {\n      for (const key of Object.keys(c.on)) {\n        this.on(key, c.on[key]);\n      }\n    }\n\n    return this;\n  }\n\n  /** Add classes to the elements class list */\n  addClass(...classes: string[]) {\n    this.classList.add(...classes);\n    return this;\n  }\n\n  /** Set the elements class name */\n  setClassName(className: string) {\n    this.el.className = className;\n    return this;\n  }\n\n  /** Remove classes from class list */\n  rmClass(...classes: string[]) {\n    for (const key of classes) {\n      this.classList.remove(key);\n    }\n    return this;\n  }\n\n  /** Check if classes are present in this element */\n  hasClass(...classes: string[]) {\n    for (const key of classes) {\n      if (!this.classList.contains(key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /** Replace a class with another */\n  replaceClass(targetClass: string, replaceClass: string) {\n    this.classList.replace(targetClass, replaceClass);\n    return this;\n  }\n\n  /** Toggle a class. If it's present it's removed, if it's not present its added. */\n  toggleClass(targetClass: string): CTag {\n    return this.hasClass(targetClass) ? this.rmClass(targetClass) : this.addClass(targetClass);\n  }\n\n  /** Add a single style */\n  addStyle<K extends CssProperty>(property: K, value: PickPropertyValues<K>) {\n    this.el.style[property as string] = value;\n    return this;\n  }\n\n  /** Set multiple styles at once */\n  setStyle(styles: StyleMap) {\n    for (const key in styles) {\n      this.addStyle(key, styles[key] ?? '');\n    }\n    return this;\n  }\n\n  /** Remove styles */\n  rmStyle(...styleNames: string[]) {\n    for (const key of styleNames) {\n      this.style.removeProperty(camelToDash(key));\n    }\n    return this;\n  }\n\n  /** Check if this element has styles */\n  hasStyle(...styles: CssProperty[]) {\n    for (const key of styles) {\n      if (!this.style.getPropertyValue(camelToDash(key))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /** Adds a set of attributes to the element */\n  setAttrs(attrs: Record<string, string | undefined>) {\n    for (const key in attrs) {\n      this.addAttr(key, attrs[key]);\n    }\n    return this;\n  }\n\n  /** Adds a single attribute to the element */\n  addAttr(key: CommonAttributes, value: string = '') {\n    this.el.attributes[key as string] = value;\n    this.el.setAttribute(key, value);\n    return this;\n  }\n\n  /** Remove attributes from the element */\n  rmAttr(...attrs: CommonAttributes[]) {\n    for (const key of attrs) {\n      this.el.removeAttribute(key);\n      delete this.el.attributes[key];\n    }\n    return this;\n  }\n\n  /** Check if this element has attributes */\n  hasAttr(...attr: CommonAttributes[]) {\n    for (const key of attr) {\n      if (!(key in this.el.attributes)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /** Get an attributes value */\n  getAttr(attr: CommonAttributes) {\n    return this.el.attributes[attr];\n  }\n\n  /**\n   * Returns a {@link IObservable} that fires when the Event {@link evtName} is fired in this element\n   *\n   * The return value of {@link fn} will be passed to the listeners of the {@link IObservable}\n   */\n  when<K extends keyof HTMLElementEventMap>(\n    evtName: K | string,\n    fn: (self: CTag, evt: HTMLElementEventMap[K]) => any,\n  ): IObservable<any> {\n    const cons = createObservable<any>({});\n    this.on(evtName, (t, evt) => {\n      cons.dispatch(fn(t, evt));\n    });\n    return cons;\n  }\n\n  /** Add an event listener for a particular event */\n  on<K extends keyof HTMLElementEventMap>(evtName: K | string, fn: (tag: CTag, evt: HTMLElementEventMap[K]) => void) {\n    if (fn) {\n      const cb = (evt: any) => fn(this, evt);\n      this.el.addEventListener(evtName, cb);\n      this._destroyers.push(() => {\n        this.el.removeEventListener(evtName, cb);\n      });\n    }\n    return this;\n  }\n\n  /** Add an event listener for a particular event that will only fire once */\n  once<K extends keyof HTMLElementEventMap>(evtName: K & string, fn: (tag: CTag, evt: HTMLElementEventMap[K]) => void) {\n    const listener = (evt) => {\n      fn(this, evt);\n      this.el.removeEventListener(evtName, listener);\n    };\n    this.el.addEventListener(evtName, listener);\n    return this;\n  }\n\n  /** Add a **click** event listener */\n  clicked(fn: (tag: CTag, evt: MouseEvent) => void) {\n    return this.on('click', fn);\n  }\n\n  /** Add a **keypress** event listener */\n  keyPressed(fn: (tag: CTag, evt: KeyboardEvent) => void, key?: string) {\n    if (key) {\n      return this.on('keypress', (_, evt) => {\n        if (evt.code === key || evt.key === key) {\n          fn(this, evt);\n        }\n      });\n    }\n\n    return this.on('keypress', fn);\n  }\n\n  /** Add a **change** event listener */\n  changed(fn: (tag: CTag, evt: Event) => void) {\n    return this.on('change', fn);\n  }\n\n  /** Add a **submit** event listener */\n  submited(fn: (tag: CTag, evt: SubmitEvent) => void) {\n    return this.on('submit', fn);\n  }\n\n  /**\n   * Remove element from the DOM, but keep data as is. Can then be added again.\n   * To fully remove the element use {@link destroy}\n   */\n  async remove() {\n    // Might be a promise (it's overriden by `withLifecycle`)\n    const result: any = this.el.remove();\n    if (result instanceof Promise) {\n      await result;\n    }\n\n    await (this.el as any).remove();\n    return this;\n  }\n\n  /**\n   * Destroy the element, should not be used afterwards\n   */\n  destroy() {\n    context.intersectionObserver?.unobserve(this.el);\n    this._children.forEach((cl) => {\n      if (cl instanceof CTag) {\n        cl.destroy();\n      }\n    });\n\n    this._destroyers.forEach(listener => listener());\n    this._children = [];\n    this._cachedChildren = [];\n    void this.remove();\n  }\n\n  /**\n   * Clears the `value` of the element. If you are getting the value and then clearing, consider using {@link consumeValue}\n   */\n  clear() {\n    (this.el as any).value = '';\n    // Trigger input event, so clearing is treated as input!\n    this.el.dispatchEvent(new InputEvent('input'));\n    return this;\n  }\n\n  /** Disable the element */\n  disable() {\n    return this.setDisabled(true);\n  }\n\n  /** Enable the element */\n  enable() {\n    return this.setDisabled(false);\n  }\n\n  /** Set whether the element should be disabled or not */\n  setDisabled(disabled: boolean) {\n    return disabled ? this.addAttr('disabled') : this.rmAttr('disabled');\n  }\n\n  /** Query a child in this element (in the DOM) */\n  q(selector): CTag | undefined {\n    const element = this.el.querySelector(selector);\n    if (element) return new CTag(element);\n  }\n\n  /** Find a child in this element (in the DOM or NOT) */\n  find(predicate: (el: TagChild) => boolean) {\n    for (const child of this._children) {\n      if (predicate(child)) {\n        return child;\n      }\n    }\n  }\n\n  findTag(predicate: (el: CTag) => boolean) {\n    for (const child of this._children) {\n      if (child instanceof CTag && predicate(child)) {\n        return child;\n      }\n    }\n  }\n\n  private _childrenFilterPredicate(item) {\n    if (item instanceof CTag && item._meta.isHidden) {\n      return false;\n    }\n    return true;\n  }\n\n  private _getElementForChild(cl: TagChild): Node | null {\n    if (typeof cl === 'string') return document.createTextNode(cl);\n    if (isObservable(cl)) {\n      return text('$val', { val: (cl as IObservable) });\n    }\n    if (cl instanceof CTag) return cl.el;\n    if (cl instanceof Node) return cl;\n    return null;\n  }\n\n  // Update cached child nodes whenever this elements childs change\n  // This makes it a lot faster to get children.\n  // If the children have not changed, there's no need to set the children, use the previous ones\n  private _observer: MutationObserver;\n  private _getChildren(element: HTMLElement) {\n    if (!this._observer) {\n      this._observer = new window.MutationObserver(() => {\n        this._cacheChildren(element);\n      });\n      this._observer.observe(this.el, { childList: true });\n      this._cacheChildren(element);\n    }\n    return this._cachedChildren;\n  }\n\n  private _cacheChildren(element: HTMLElement) {\n    const nodes = element.childNodes,\n      children: Node[] = [];\n    let i = nodes.length;\n\n    while (i--) {\n      if (nodes[i].nodeType === 1) {\n        children.unshift(nodes[i]);\n      }\n    }\n\n    this._cachedChildren = children;\n  }\n\n  private _mapChildren(children: TagChildren): Node[] {\n    const mapped: Node[] = [];\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      // for (const child of children) {\n      if (child instanceof CTag) {\n        child.parent = this;\n      }\n\n      if (this._childrenFilterPredicate(child)) {\n        const element = this._getElementForChild(child);\n        if (element != null) mapped.push(element);\n      }\n    }\n    return mapped;\n  }\n}\n\n/**\n * This function can do the following based on the first argument:\n * * create a tag if you provide a tag name: (`div`, `abbr`, `custom-tag`, ...),\n * * wrap around an existing element in the page if you pass in a selector: (`'(body)'`, `'(#id)'`, `'(.class)'`), any selector is allowed.\n * * wrap around an element passed in\n *\n * Then it can receive a list of children to be added.\n * Receives a third argument for mounting this tag to the currently mounted tag ({@link context.mountPoint}).\n *\n * @example\n * ```ts\n * tag('div');\n * tag('(body)');\n * tag('(.someclass)');\n * tag(document.querySelector('#something'));\n * ```\n */\nexport const tag = (arg0: string | HTMLElement, children: TagChildren = [], mountToParent: boolean = false) => {\n  checkInitialized();\n  return new CTag(arg0, children, mountToParent);\n};\n","import type { IObservable, Primitive, TextObj } from './types.js';\nimport { isObservable } from './observables.js';\nimport { isObject } from './util.js';\n\n/**\n * Create a **TextNode** from text, and optionally reacts to a {@link IObservable}, interpolating the defined variables in the text each time the state changes.\n *\n * If you provide a {@link IObservable} as the second argument, the text will act as a template\n * and can reference properties in the state: `$count`, `$someValue`.\n *\n * When the state properties changes, the text node will be automatically updated with the new text.\n * Only the properties that are referenced in the template will be listened to.\n *\n * **NOTE** If you're not interpolating, and dont need to change the text, you can directly pass in a string ('string') instead of (`text('string')`).\n *\n * @see https://github.com/nombrekeff/cardboard-js/wiki/Managing-Text\n *\n * @example\n * ```ts\n * const st = state({ count: 0 });\n *\n * p(text('Raw text!'));\n * p(text(`Count: $count`, st));\n * ```\n */\nexport const text = <T extends Record<string, Primitive>, K extends TextObj>(textTemplate: string, obj?: IObservable<T> | K): Node => {\n  const node = document.createTextNode(''),\n    interpolatePattern = /\\B\\$([0-9]+|[a-z][a-z0-9_$]*)/gi;\n\n  if (!obj) {\n    node.nodeValue = textTemplate;\n    return node;\n  }\n\n  const updateNode = (data: Record<string, Primitive>) => {\n    node.nodeValue = !data\n      ? textTemplate\n      : textTemplate.replace(interpolatePattern, (m, g1) =>\n        (data[g1] ?? m).toString(),\n      );\n  };\n\n  if (isObservable(obj)) {\n    (obj as IObservable<Record<string, any>>).changed((val) => updateNode(val));\n    updateNode((obj as IObservable).value);\n  }\n  else if (isObject(obj)) {\n    for (const key of Object.getOwnPropertyNames(obj)) {\n      // We're just interested in listening to the obj that are references in the text.\n      if (textTemplate.includes(`$${key}`) && isObservable(obj[key])) {\n        obj[key].changed(() => updateNode(obj as any));\n      }\n    }\n\n    updateNode(obj as any);\n  }\n\n  return node;\n};\n","import { CEvent } from './events.js';\nimport { isArray, isObject } from './util.js';\nimport type { IObservable, IObservableOr, WithLength } from './types.js';\n\n/**\n * A class that holds a value and notifies whenever the value changes.\n * @see https://github.com/nombrekeff/cardboard-js/wiki/Observers\n */\nexport class Observable<T = any> extends CEvent<T> implements IObservable<T> {\n  private _value: T;\n  private readonly _destroyer?: () => void;\n\n  get value(): T {\n    return this._value;\n  }\n\n  /** Set the value, and dispatch to all listeners. */\n  set value(val: T) {\n    this.dispatch(val);\n  }\n\n  constructor(val: T, destroyer?: () => void) {\n    super();\n\n    if (val && (isObject(val) || isArray(val))) {\n      val = new Proxy((val as any), {\n        get(target, p, receiver) {\n          return target[p];\n        },\n        set: (target, p, newValue, receiver) => {\n          if (target[p] === newValue) return true;\n\n          target[p] = newValue;\n          super.dispatch(target);\n          return true;\n        },\n        deleteProperty: (target, p) => {\n          delete target[p];\n          super.dispatch(target);\n          return true;\n        },\n      });\n    }\n\n    this._value = val;\n    this._destroyer = destroyer;\n  }\n\n  valueOf() {\n    return this._value;\n  }\n\n  toString() {\n    return (this._value as any).toString();\n  }\n\n  /**\n   * Add a listener for when this Observable changes.\n   */\n  changed(callback: (val: T) => void) {\n    this.listen(callback);\n    return this;\n  }\n\n  /**\n  * Remove a listener for when this Observable changes.\n  */\n  remove(callback: (val: T) => void) {\n    super.remove(callback);\n    return this;\n  }\n\n  /**\n   * Set's the new value, and calls all the listeners.\n   * You can additionaly set the {@link value} directly.\n   */\n  dispatch(val: T) {\n    if (val === this._value) {\n      return this;\n    }\n    this._value = val;\n    super.dispatch(val);\n    return this;\n  }\n\n  destroy() {\n    if (this._destroyer) this._destroyer();\n    (this._value as any) = null;\n    super.destroy();\n  }\n\n  /**\n   * Creates a new {@link Observable} whose value is derived from another {@link Observable}.\n   * The new {@link Observable} automatically updates and notifies listeners whenever the source {@link Observable} changes.\n   *\n   * @example\n   * ```ts\n   * const value = createObservable(2);\n   * const isGreater = value.computed((value) => value > 5);\n   * // > isGreater == false;\n   * value.dispatch(6);\n   * // > isGreater == true;\n   * ```\n   */\n  computed = <K>(transform: (val: T) => K) => compute(this, transform);\n\n  /** @see {@link greaterThan} */\n  greaterThan = (val: IObservableOr<number> | number = 0) => greaterThan(this as any, val);\n  /** @see {@link greaterThanOr} */\n  greaterThanOr = (val: IObservableOr<number> = 0) => greaterThanOr(this as any, val);\n  /** @see {@link lessThan} */\n  lessThan = (val: IObservableOr<number> = 0) => lessThan(this as any, val);\n  /** @see {@link lessThanOr} */\n  lessThanOr = (val: IObservableOr<number> = 0) => lessThanOr(this as any, val);\n  /** @see {@link equalTo} */\n  equalTo = <K>(val: IObservableOr<K>) => equalTo(this as any, val);\n  /** @see {@link notEqualTo} */\n  notEqualTo = <K>(val: IObservableOr<K>) => notEqualTo(this as any, val);\n  /** @see {@link isEmpty} */\n  isEmpty = <K extends WithLength>() => isEmpty(this as any as IObservable<K>);\n  /** @see {@link notEmpty} */\n  notEmpty = <K extends WithLength>() => notEmpty(this as any as IObservable<K>);\n  /** @see {@link grab} */\n  grab = <K extends keyof T>(key: K, defaultVal?: T[K]) => grab(this as any, key, defaultVal);\n}\n\n/** Check if a given object {@link obj} is a {@link Observable}  */\nexport const isObservable = (obj: any) => {\n  return obj instanceof Observable;\n};\n\n/**\n * Create a new {@link Observable}  \n * > Consider using `state(...)` instead.\n * @see https://github.com/nombrekeff/cardboard-js/wiki/Observers\n */\nexport const createObservable = <T>(val: T, destroyer?: () => void): IObservable<T> => {\n  return new Observable<T>(val, destroyer);\n};\n\n/**\n * Creates a new {@link Observable} whose value is derived from another {@link Observable}.\n * The new {@link Observable} automatically updates and notifies listeners whenever the source {@link Observable} changes.\n *\n * @example\n * ```ts\n * const value = createObservable(2);\n * // Create a derived observable that is true if value > 5\n * const isGreater = compute(value, (v) => v > 5);\n * // isGreater.value == false\n * value.dispatch(6);\n * // isGreater.value == true\n * ```\n */\nexport const compute = <T, K>(\n  other: IObservable<T>,\n  transform: (val: T) => K,\n): IObservable<K> => {\n  // eslint-disable-next-line prefer-const\n  let observable: IObservable<K> | null;\n\n  const cb = (val) => observable?.dispatch(transform(val));\n\n  observable = createObservable<K>(transform(other.value), () => {\n    // remove callback in other observable when destroyed\n    // remove references, free memory\n    other.remove(cb);\n    observable = null;\n    (other as any) = null;\n  });\n\n  other.changed(cb);\n\n  return observable as any;\n};\n\nexport type ExtractValue<T extends Array<IObservable<any>>> =\n  { [K in keyof T]: T[K] extends IObservable<infer V> ? V : never };\n\nexport const computeMultiple = <T extends IObservable[], K>(\n  observables: [...T],\n  transform: (...v: [...ExtractValue<T>]) => K,\n): IObservable<K> => {\n  const cons = createObservable<K>(transform(...(observables.map(c => c.value) as any)));\n\n  for (const other of observables) {\n    other.changed(() => cons.dispatch(\n      transform(...(observables.map(c => c.value) as any))\n    ));\n  }\n  return cons as any;\n};\n\nexport const getValue = <T>(val: IObservableOr<T>): T => {\n  return isObservable(val) ? (val as IObservable<T>).value : val as T;\n};\n\n/** {@link compute} an observable and return a new {@link Observable} indicating if the value is greater than {@link val} */\nexport const greaterThan = (observable: IObservable<number>, val: IObservable<number> | number = 0) => {\n  return compute(observable, (newVal) => newVal > getValue(val));\n};\n\n/** {@link compute} an observable and return a new {@link Observable} indicating if the value is greater than or equal {@link val} */\nexport const greaterThanOr = (observable: IObservable<number>, val: IObservableOr<number> = 0) => {\n  return compute(observable, (newVal) => newVal >= getValue(val));\n};\n\n/** {@link compute} an observable and return a new {@link Observable} indicating if the value is less than {@link val} */\nexport const lessThan = (observable: IObservable<number>, val: IObservableOr<number> = 0) => {\n  return compute(observable, (newVal) => newVal < getValue(val));\n};\n\n/** {@link compute} an observable and return a new {@link Observable} indicating if the value is less than or equal {@link val} */\nexport const lessThanOr = (observable: IObservable<number>, val: IObservableOr<number> = 0) => {\n  return compute(observable, (newVal) => newVal <= getValue(val));\n};\n\n/** {@link compute} an observable and return a new {@link Observable} indicating if the value is equal to {@link val} */\nexport const equalTo = <T>(observable: IObservable<T>, val: IObservableOr<T>) => {\n  return compute(observable, (newVal) => newVal === getValue(val));\n};\n\n/** {@link compute} an observable and return a new {@link Observable} indicating if the value is NOT equal to {@link val} */\nexport const notEqualTo = <T>(observable: IObservable<T>, val: IObservableOr<T>) => {\n  return compute(observable, (newVal) => newVal !== getValue(val));\n};\n\n/** {@link compute} an observable and return a new {@link Observable} indicating if the value is NOT empty */\nexport const isEmpty = <T extends WithLength>(observable: IObservable<T>) => {\n  return compute(observable, (newVal) => newVal.length <= 0);\n};\n\n/** {@link compute} an observable and return a new {@link Observable} indicating if the value is NOT empty */\nexport const notEmpty = <T extends WithLength>(observable: IObservable<T>) => {\n  return compute(observable, (newVal) => newVal.length > 0);\n};\n\n/** {@link compute} an observable and return a new {@link Observable} that is equal to some property of the original {@link Observable} */\nexport const grab = <T, K extends keyof T>(observable: IObservable<T>, key: K, defaultVal?: T[K]) => {\n  return compute(observable, (newVal) => newVal ? (newVal[key] ? newVal[key] : defaultVal) : defaultVal);\n};\n\n","import type { IObservable, State } from './types';\nimport { createObservable, getValue } from './observables.js';\n\n/**\n * `state` creates a reactive value that can the be used with tags to create dinamic and reactive apps.\n *\n * @see https://github.com/nombrekeff/cardboard-js/wiki/State\n *\n * @example\n * ```ts\n * const count = state(0);\n * count.changed(() => { ... });\n * count.dispatch(2);\n * count.value++;\n *\n * div().hideIf(count);\n * div().disableIf(count);\n * div(template('Count is: $count', { count: count }));\n * ```\n */\nexport const state = <T>(initialValue: T): State<T> => {\n  return createObservable(initialValue);\n};\n\n/**\n * `listState` creates a reactive list of values that can be used with tags to manage dynamic and reactive apps.\n * It wraps each item with a {@link State} (aka. {@link IObservable}) to allow for individual item reactivity.\n * @see https://github.com/nombrekeff/cardboard-js/wiki/ListState\n *\n * @example\n * ```javascript\n * const myList = listState([1, 2, 3]);\n *\n * myList.add(4);\n * myList.addAt(0, 0);\n * myList.remove(2);\n * myList.removeWhere(item => item === 3);\n * const listValues = myList.listValue;\n * const listLength = myList.length;\n *\n * // Listen to changes in the list\n * myList.list.changed(() => {\n *   // List has changed\n * });\n * ```\n */\nexport const listState = <T>(initialData: T[]) => {\n  const _list = state<Array<State<T>>>(\n    initialData.map((d) => createObservable(d)),\n  );\n\n  const add = (item: T) => {\n    stateAdd(_list, createObservable(item));\n  };\n\n  const addAt = (item: T, index: number) => {\n    stateAddAt(_list, createObservable(item), index);\n  };\n\n  return {\n    /**\n     * The reactive list of items.\n     * Each item is wrapped in a {@link State} to allow for individual reactivity.\n     */\n    get list() {\n      return _list;\n    },\n    /**\n     * The raw list of items.\n     */\n    get listValue() {\n      return _list.value;\n    },\n    add,\n    addAt,\n    remove: stateRemove.bind({}, _list),\n    removeWhere: stateRemoveWhere.bind({}, _list),\n    length: _list.computed((_list) => _list.length),\n  };\n};\n/**\n * `stateAdd` adds an item to a reactive list.\n * It creates a new array with the existing items and the new item, then updates the state.\n * \n * @example\n * ```typescript\n * const myList = state([]);\n * stateAdd(myList, 'new item');\n * ```\n */\nexport const stateAdd = <T>(state: State<T[]>, item: T) => {\n  state.value = [...state.value, item];\n};\n\n/**\n * `stateAddAt` adds an item to a reactive list at a specific index.\n * It creates a new array with the existing items and the new item at the specified index, then updates the state.\n * \n * @example\n * ```typescript\n * const myList = state([]);\n * stateAddAt(myList, 'new item', 0);\n * ```\n */\nexport const stateAddAt = <T>(state: State<T[]>, item: T, index: number) => {\n  let newData: any = [...state.value];\n  newData.splice(index, 0, item);\n  state.value = newData;\n  newData = [];\n};\n\n/**\n * `stateRemoveWhere` removes items from a reactive list based on a callback function.\n * It filters the list and updates the state with the remaining items.\n * \n * @example\n * ```typescript\n * const myList = state([1, 2, 3, 4]);\n * stateRemoveWhere(myList, (item) => item % 2 === 0); // Removes even numbers\n * ```\n */\nexport const stateRemoveWhere = <T>(state: State<T[]>, cb: (item: T, index: number) => boolean) => {\n  state.value = state.value.filter((el, i) => !cb(el, i));\n};\n\n/**\n * `stateRemove` removes a specific item from a reactive list.\n * It finds the index of the item in the list and calls `stateRemoveWhere` to remove it.\n * \n * @example\n * ```typescript\n * const myList = state([1, 2, 3, 4]);\n * stateRemove(myList, 2); // Removes the item with value 2\n * ```\n */\nexport const stateRemove = <T>(state: State<T[]>, item: T) => {\n  const index = state.value.findIndex(state => getValue(state) === getValue(item));\n  stateRemoveWhere(state, (_, i) => {\n    return index === i;\n  });\n};\n","import type { NestedStyleMap } from './types';\nimport { camelToDash, isObject } from './util.js';\n\nexport const genCss = (\n  styleSheet:\n    | Record<string, NestedStyleMap>\n    | Array<Record<string, NestedStyleMap>>,\n) => {\n  const stylesheets = styleSheet instanceof Array ? styleSheet : [styleSheet];\n  let generatedCss = '';\n\n  for (const sheet of stylesheets) {\n    for (const key in sheet) {\n      generatedCss += genBlock(key, sheet[key]);\n    }\n  }\n  return generatedCss;\n};\n\nexport const genBlock = (selector: string, style: NestedStyleMap): string => {\n  return genBlockContent(selector, style).join('');\n};\n\nexport const genBlockContent = (\n  selector: string,\n  style: NestedStyleMap,\n): string[] => {\n  let inside = '';\n  const blocks: string[] = [];\n\n  for (const key in style) {\n    if (isObject(style[key])) {\n      let newSelector = selector;\n\n      newSelector += key;\n\n      blocks.push(...genBlockContent(newSelector, style[key] as NestedStyleMap));\n    }\n    else if (style[key]) {\n      inside += `${camelToDash(key)}:${style[key] as string};`;\n    }\n  }\n\n  blocks.unshift(`${selector}{${inside}}`);\n\n  return blocks;\n};\n","import { context, createGlobalObserver } from './cardboard.js';\nimport { type CTag } from './tag.js';\nimport { type AtLeastOne } from './types.js';\n\n\n/**\n * Will call {mounted} when the element is added to the DOM.\n * And will call {beforeUnmounted} before the element is removed from the DOM.\n * Finally will call {onUnmounted} when the element is removed from the DOM.\n */\nexport function onLifecycle(\n    tag: CTag,\n    onMounted?: (tag: CTag) => Promise<boolean> | boolean,\n    onUnmounted?: (tag: CTag) => void,\n    beforeUnmounted?: (tag: CTag) => Promise<boolean> | boolean,\n) {\n    if (beforeUnmounted) {\n        const tempElRemove = tag.el.remove;\n        tag.el.remove = async () => {\n            const result = beforeUnmounted(tag);\n            if (!result || (result instanceof Promise && (await result))) {\n                tempElRemove.call(tag.el);\n            }\n            return result.valueOf();\n        };\n    }\n\n    if (onMounted) {\n        const tempOnStart = tag.show;\n        tag.show = async () => {\n            const result = tempOnStart.call(tag);\n            if (result instanceof Promise) {\n                return await result;\n            }\n            return result;\n        };\n    }\n\n    if (!context.observer) {\n        context.observer = createGlobalObserver();\n    }\n\n    let onAddedCb, onRemovedCb;\n    context.observer.onAdded.listen(onAddedCb = async (node: Node) => {\n        let isAdded = node === tag.el || node.contains(tag.el);\n        if (isAdded && onMounted) {\n            const result = onMounted(tag);\n            if (result instanceof Promise) {\n                await result;\n            }\n        }\n    });\n    context.observer.onRemoved.listen(onRemovedCb = (node: Node) => {\n        let isRemoved = node === tag.el || node.contains(tag.el);\n        if (isRemoved && onUnmounted) {\n            onUnmounted(tag);\n        }\n    });\n\n    // Using `any` here to avoid TypeScript errors, as `_destroyers` is not typed in the CTag interface.\n    (tag as any)._destroyers.push(() => {\n        // Remove listeners and references (clear memory)\n        context.observer?.onRemoved.remove(onRemovedCb);\n        context.observer?.onAdded.remove(onAddedCb);\n        onUnmounted = undefined;\n        onMounted = undefined;\n    });\n};\n\n/**\n * `withLifecycle` is a utility function that adds lifecycle hooks to a Cardboard tag.\n * \n * Will call `handler.mounted` when the element is added to the DOM.  \n * Then call `handler.beforeUnmount` **before** the element is removed from the DOM.  \n * Finally call `handler.unmounted` **when** the element is removed from the DOM.  \n * \n * @example\n * ```typescript\n * const myTag = withLifecycle(\n *   div('Hello World'),\n *   {\n *     mounted: (tag) => {\n *       console.log('Mounted:', tag);\n *       return true; // or false to prevent mounting\n *     },                                       \n *     unmounted: (tag) => {\n *       console.log('Unmounted:', tag);\n *     },\n *     beforeUnmount: (tag) => {\n *       console.log('Before Unmount:', tag);\n *       return true; // or false to prevent unmounting\n *     },\n *    }\n *  );\n */\nexport const withLifecycle = (\n    tag: CTag,\n    handler: AtLeastOne<{\n        // Add object here so handlers can be seen when instecting the `withLifecycle` function.\n        // This is useful for IDEs to show the available properties.\n        mounted?: (tag: CTag) => Promise<boolean> | boolean;\n        unmounted?: (tag: CTag) => void;\n        beforeUnmounted?: (tag: CTag) => Promise<boolean> | boolean;\n    }>,\n): CTag => {\n    onLifecycle(tag, handler.mounted, handler.unmounted, handler.beforeUnmounted);\n    return tag;\n};\n","import { genCss } from \"./css-generator.js\";\nimport { CTag, tag } from \"./tag.js\";\nimport type { AllTags, StyleSet, TagBuilder, TagChildren } from \"./types.js\";\n\n\n/** Override any tag function we want, to give it some custom behaviour, process the children, etc... */\nconst interceptors: Record<string, TagBuilder | ((styles: StyleSet[]) => CTag)> = {\n  ul: (children: TagChildren, mountToParent: boolean = false) => {\n    return tag(\n      'ul',\n      children.map((cl) => {\n        return tag('li', [cl], mountToParent);\n      }),\n    );\n  },\n  style: (styles: StyleSet[], mountToParent: boolean = false) => {\n    return tag('style', [genCss(styles)], mountToParent);\n  },\n};\n\n/**\n * List of all HTML tag functions. From `div` to `abbr` :)\n * If you want to create any other tag, use the {@link tag} function.\n *\n * @type {AllTags}\n * @example\n * ```ts\n * const { div, p, abbr, img, style, ... } = allTags;\n * ```\n */\nexport const allTags: AllTags = new Proxy(\n  {},\n  {\n    get: (t, p, r) => {\n      const tagName = p.toString();\n      const fn = (...children: any[]) => {\n        return interceptors[tagName] ? interceptors[tagName](children, false) : tag(tagName, children);\n      };\n\n      Object.defineProperty(fn, 'mount', {\n        get: () => {\n          return (...children: any[]) => {\n            return interceptors[tagName] ? interceptors[tagName](children, true) : tag(tagName, children, true);\n          };\n        },\n      });\n\n      return fn;\n    },\n  },\n) as AllTags;\n","import { genCss } from \"./css-generator.js\";\nimport { tag, CTag } from \"./tag.js\";\nimport { NestedStyleMap } from \"./types.js\";\n\nconst STYLE_TAG_ID = 'cardboard-styles';\n\nexport class StyleManager {\n    styleTag: CTag;\n    rules: Set<string>;\n\n    generatedIdsCount: number = 0;\n\n    constructor() {\n        this.rules = new Set();\n        let styleTag: CTag | null = null;\n\n        try {\n            styleTag = tag(`(#${STYLE_TAG_ID})`);\n        } catch (error) {\n            styleTag = tag('style').setId(STYLE_TAG_ID);\n        }\n\n        tag('(head)').append(styleTag);\n\n        this.styleTag = styleTag;\n    }\n\n    public add(styleSheet: Record<string, NestedStyleMap> | Array<Record<string, NestedStyleMap>>) {\n        const css = genCss(styleSheet);\n\n        if (!this.rules.has(css)) {\n            this.rules.add(css);\n            this.styleTag.append(css);\n        }\n    }\n}\n","import { isObservable } from './observables.js';\nimport { deepEquals } from './util.js';\nimport type { CTag } from './tag.js';\nimport type { IObservable, IObservableOr } from './types.js';\n\nexport enum DiffState {\n  unchanged = 'unchanged',\n  added = 'added',\n  removed = 'removed',\n  swap = 'swap',\n}\nexport interface DiffEntry<T = unknown> {\n  state: DiffState,\n  index: number,\n  entry: T,\n  targetEntry?: T;\n  targetIndex?: number,\n}\n\n/**\n * Render a {@link CTag} for each item in the provided list.\n *\n * `each` can work with a goold old array, or with a {@link IObservable}.\n * If you provide a `Observable`, the list will update whenever the `Observable` changes.\n *\n * @param observable - An array or an {@link IObservable} that contains the list of items to render.\n * @param builder - A function that takes an item from the list and returns a {@link CTag} to render.\n * @param key - An optional function that returns a unique key for each item in the list. This is used to optimize the rendering process.\n * \n * @see https://github.com/nombrekeff/cardboard-js/wiki/Logic\n *\n * @example\n * Static list\n * ```ts\n * const colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'];\n * div(\n *     each(colors, (color) =>\n *        button(color).addStyle('color', color)\n *     )\n * );\n * ```\n *\n * @example\n * Dynamic list\n * ```ts\n *  const colors = state(['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']);\n *  const selectedColor = state('red');\n *  div(\n *    each(colors, (color) =>\n *        button(color)\n *         .addStyle('color', color)\n *         .stylesIf(equalTo(selectedColor, color), { fontWeight: 'bold' });\n *    )\n *  );\n * ```\n */\nexport function each<T>(\n  observable: IObservableOr<T[]>,\n  builder: (val: T) => CTag,\n  key?: (val: T) => any,\n): Node {\n  const node = document.createTextNode(''), elements: CTag[] = [];\n  let oldData: T[] = [],\n    nodeParentIndex: number = 0,\n    elementsCopy: CTag[] = [];\n\n  // Inserts a new element into the DOM and the elements array at the specified index.\n  // Uses the transform function to create the element and places it before the next sibling or anchor node.\n  const actionAdd = (entry: DiffEntry<T>) => {\n    if (entry.index >= 0) {\n      const el = builder(entry.entry);\n      const elAt = elements[entry.index];\n      elements.splice(entry.index, 0, el);\n      node.parentElement?.insertBefore(el.el, elAt ? elAt.el : node);\n    }\n  };\n\n  // Removes the element at the specified index from the DOM and calls its destroy method.\n  // Also removes the element from the internal elements array to keep it in sync.\n  const actionRemove = (entry: DiffEntry<T>) => {\n    node.parentElement?.removeChild(elementsCopy[entry.index].el);\n    elementsCopy[entry.index].destroy();\n\n    // This is done because if we use the original index, and the array changes size,\n    // the indexes will not match\n    const i = elements.indexOf(elementsCopy[entry.index]);\n    elements.splice(i, 1);\n  };\n\n  // Swaps two elements in the DOM and updates their positions in the internal arrays.\n  // Ensures the visual order matches the new data order after a swap operation.\n  const actionSwap = (entry: DiffEntry<T>) => {\n    const fromIndex = entry.index,\n      toIndex = entry.targetIndex ?? 0;\n\n    if (fromIndex >= 0 && toIndex >= 0) {\n      const elementFrom = elementsCopy[fromIndex];\n      const elementTo = elementsCopy[toIndex];\n\n      const parentNode = elementFrom.el.parentNode;\n      const nextSiblingNode = elementFrom.el.nextSibling;\n\n      if (parentNode && nextSiblingNode === elementTo.el) {\n        parentNode.insertBefore(elementTo.el, elementFrom.el);\n      }\n      else if (elementTo.el.parentNode) {\n        elementTo.el.parentNode.insertBefore(elementFrom.el, elementTo.el);\n\n        if (nextSiblingNode && parentNode) {\n          parentNode.insertBefore(elementTo.el, nextSiblingNode);\n        }\n        else if (parentNode) {\n          parentNode.appendChild(elementTo.el);\n        }\n      }\n\n      const tempCopy = elementsCopy[fromIndex];\n      elementsCopy[fromIndex] = elementsCopy[toIndex];\n      elementsCopy[toIndex] = tempCopy;\n\n      const temp = elements[fromIndex];\n      elements[fromIndex] = elements[toIndex];\n      elements[toIndex] = temp;\n    }\n  };\n\n  // Map of actions to perform based on the diff state\n  // This is used to avoid using a switch statement, which is slower\n  // and to keep the code cleaner.\n  const actionMap = {\n    [DiffState.added]: actionAdd,\n    [DiffState.removed]: actionRemove,\n    [DiffState.swap]: actionSwap,\n  };\n\n  // Maximum number of tries to find the parent element\n  // This is used to avoid infinite loops in case the parent element is not found\n  const MAX_UPDATE_TRIES = 100;\n\n  // This function updates the list of elements based on the new data.\n  // It calculates the differences between the old and new data using `diffList`,\n  // and applies the necessary actions to the DOM.\n  const updateList = (newData: T[], tries = 0) => {\n    // If the node has no parent element, it means it has not been mounted yet,\n    // so we wait a bit and try again.\n    if (!node.parentElement) {\n      // If we have not reached the max tries, we wait a bit and try again\n      if (tries < MAX_UPDATE_TRIES) {\n        setTimeout(() => updateList(newData, tries + 1), 1);\n      } else {\n        console.warn(`[each]: parentElement not found after max retries`);\n      }\n      return;\n    }\n\n    if (!nodeParentIndex) {\n      const children = Array.from(node.parentElement?.childNodes ?? []);\n      nodeParentIndex = children.indexOf(node);\n    }\n\n    // Create the diff between the new data and the old data\n    const diff = diffList(newData, oldData, key);\n\n    // If the diff is empty, it means the data has not changed, so we do nothing\n    if (diff.length <= 0) return;\n\n    // Process the diff and apply the actions\n    for (let index = 0; index < diff.length; index++) {\n      const data = diff[index];\n      const nextIndex = diff[index + 1] ? diff[index + 1].index : null;\n      const nextState = diff[index + 1] ? diff[index + 1].state : null;\n      actionMap[data.state](data);\n      if (nextState === DiffState.swap && nextIndex === data.targetIndex) {\n        index++;\n      }\n    }\n\n    // Set the new data as the old data for the next update\n    oldData = [...newData].slice(0);\n\n    // Update the elementsCopy to match the new data\n    elementsCopy = elements.slice(0);\n  };\n\n  updateList('value' in observable ? observable.value : observable);\n\n  if (isObservable(observable)) {\n    (observable as IObservable).changed(updateList);\n  }\n\n  return node;\n}\n\n/**\n * Compares 2 lists, returns an array of {@link DiffEntry} with the operations needed to make in the {@link oldData} to create the new list.\n * It only returns the actions that are needed, if an element does not need to move, then it's not returned\n * \n * @param newData - The new data to compare against the old data.\n * @param oldData - The old data to compare against the new data.\n * @param key - A function that returns a unique key for each item in the list. This is used to optimize the rendering process.\n */\nexport function diffList<T>(\n  newData: T[], oldData: T[],\n  key: (item: T) => any = (item: T) => item\n): Array<DiffEntry<T>> {\n  const diff: Array<DiffEntry<T>> = [],\n    newLength = newData.length,\n    oldLength = oldData.length;\n\n  // If the data is the same, don't do anything\n  if (newLength === oldLength && (newData == oldData || deepEquals(oldData, newData))) {\n    return diff;\n  }\n\n  // If all items have been removed, just remove them, no need to diff\n  if (newLength <= 0) {\n    for (let i = 0; i < oldLength; i++) {\n      diff[i] = {\n        entry: oldData[i],\n        state: DiffState.removed,\n        index: i,\n      };\n    }\n    return diff;\n  }\n\n  // If there was no data before, add all items\n  if (!oldLength) {\n    for (let i = 0; i < newLength; i++) {\n      diff[i] = {\n        entry: newData[i],\n        state: DiffState.added,\n        index: i,\n      };\n    }\n    return diff;\n  }\n\n  // Count of how many items have been removed so far (inside the loop)\n  let removedCount = 0;\n\n  // diff the old data with the new one\n  for (let oi = 0; oi < oldLength; oi++) {\n    const newEntry = newData[oi - removedCount],\n      oldEntry = oldData[oi],\n      areEqual = key(oldEntry) == key(newEntry);\n\n    if (areEqual || deepEquals(oldEntry, newEntry)) {\n      continue;\n    }\n\n    const existsNew = !!newData.find(item => key(oldEntry) == key(item)),\n      existsOld = !!oldData.find(item => key(newEntry) == key(item));\n\n    // If the new entry does not exist in the old data, it means it was added\n    if (!existsOld && existsNew) {\n      diff.push({\n        entry: newEntry,\n        state: DiffState.added,\n        index: oi - removedCount,\n      });\n      removedCount--;\n      continue;\n    }\n\n    // If the old entry does not exist in the new data, it means it was removed\n    // `newEntry` can be undefined if the newData is shorter than the oldData\n    // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n    if ((existsOld && !existsNew) || newEntry == null) {\n      diff.push({\n        entry: oldEntry,\n        state: DiffState.removed,\n        index: oi,\n      });\n      removedCount++;\n      continue;\n    }\n\n    // If the new entry exists in the old data, it means it was swapped\n    if (newData.indexOf(oldEntry) >= 0) {\n      diff.push({\n        entry: newEntry,\n        targetEntry: oldEntry,\n        state: DiffState.swap,\n        index: oldData.indexOf(newData[oi - removedCount]),\n        targetIndex: oldData.indexOf(oldData[oi]),\n      });\n\n      // This swaps items, this is needed to create cohesive swapping\n      const oldIndex = oldData.indexOf(newEntry);\n      const temp = oldData[oi];\n      oldData[oi] = newData[oi - removedCount];\n      oldData[oldIndex] = temp;\n      continue;\n    }\n  }\n\n  // Add any new items that were not in the old data\n  if (removedCount != oldLength) {\n    for (let i = oldLength - removedCount; i < newLength; i++) {\n      const newEntry = newData[i];\n      diff.push({\n        entry: newEntry,\n        state: DiffState.added,\n        index: i,\n      });\n    }\n  }\n\n  return diff;\n}\n","import * as _context from './context.js';\nimport * as _tag from './tag.js';\nimport * as _state from './state.js';\nimport * as _css from './css-generator.js';\nimport * as _util from './util.js';\nimport * as _text from './text.js';\nimport * as _events from './events.js';\nimport * as _lifecycle from './lifecycle.js';\nimport * as _observables from './observables.js';\nimport * as _alltags from './all-tags.js';\nimport * as _styles from './style-manager.js';\n\nexport * from './context.js';\nexport * from './tag.js';\nexport * from './state.js';\nexport * from './css-generator.js';\nexport * from './util.js';\nexport * from './text.js';\nexport * from './events.js';\nexport * from './each.js';\nexport * from './lifecycle.js';\nexport * from './observables.js';\nexport * from './all-tags.js';\nexport type * from './types';\n\n\n/**\n * It initializes the framework & makes the body tag the mount point ({@link mountPoint}).\n * You can pass in a selector for an element you want to be the default tag (\"body\" by default).\n */\nexport const init = (options: { selector: string } = { selector: 'body' }) => {\n  _context.context.initialized = true;\n  _context.context.observer = _context.createGlobalObserver();\n  _context.context.styleManager = new _styles.StyleManager();\n  \n  const tag = new _tag.CTag(`(${options.selector})`);\n  return _context.mountPoint(tag);\n};\n\n// Import the version from package.json\n\nexport const Cardboard = {\n  ..._tag,\n  ..._state,\n  ..._css,\n  ..._util,\n  ..._text,\n  ..._events,\n  ..._observables,\n  ..._lifecycle,\n  ..._context,\n  ..._alltags,\n  ..._styles,\n  init,\n  version: '0.0.6',\n};\n"]}