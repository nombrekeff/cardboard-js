{"version":3,"sources":["/Users/manoloedge/Documents/dev/self/cardboard-js/dist/cardboard.cjs","../src/util.ts"],"names":["removeFromList","item","list","index","camelToDash","str","val"],"mappings":"AAAA,6EAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CCCrM,IAAMA,CAAAA,CAAiB,CAAIC,CAAAA,CAASC,CAAAA,CAAAA,EAAe,CACxD,EAAA,CAAI,CAACA,CAAAA,CAAM,MAAO,CAAA,CAAA,CAElB,IAAMC,CAAAA,CAAQD,CAAAA,CAAK,OAAA,CAAQD,CAAI,CAAA,CAE/B,OAAIE,CAAAA,GAAU,CAAA,CAAA,CAAA,CACZD,CAAAA,CAAK,MAAA,CAAOC,CAAAA,CAAO,CAAC,CAAA,CACb,CAAA,CAAA,CAAA,CAGF,CAAA,CACT,CAAA,CAEaC,CAAAA,uBAAcC,CAAAA,EAAOA,CAAAA,CAAI,OAAA,CAAQ,UAAA,CAAYC,CAAAA,EAAO,CAAA,CAAA,EAAIA,CAAAA,CAAI,WAAA,CAAY,CAAC,CAAA,CAAA","file":"/Users/manoloedge/Documents/dev/self/cardboard-js/dist/cardboard.cjs","sourcesContent":[null,"/** Removes an item from an array if it exists. It returns whether it was removed or not */\nexport const removeFromList = <T>(item: T, list?: T[]) => {\n  if (!list) return false;\n\n  const index = list.indexOf(item);\n\n  if (index !== -1) {\n    list.splice(index, 1);\n    return true;\n  }\n\n  return false;\n};\n\nexport const camelToDash = str => str.replace(/([A-Z])/g, val => `-${val.toLowerCase()}`);\n\nexport const isObject = (obj: any): boolean => {\n  return typeof obj === 'object' && !(obj instanceof Array);\n};\nexport const isArray = (obj) => {\n  return Object.prototype.toString.call(obj) === '[object Array]';\n};\nexport const val = <T>(val: T | ((...args: any) => T), ...args): T => {\n  if (typeof val === 'function') {\n    return (val as any)(...args);\n  }\n  return val;\n};\nexport const swapItems = (array: any[], from: number, to: number) => {\n  const temp = array[from];\n  array[from] = array[to];\n  array[to] = temp;\n  return array;\n};\nexport const arraysEqual = (a?: any[], b?: any[]) => {\n  if (a === b) return true;\n  if (a == null || b == null) return false;\n  if (a.length !== b.length) return false;\n\n  // If you don't care about the order of the elements inside\n  // the array, you should sort both arrays here.\n  // Please note that calling sort on an array will modify that array.\n  // you might want to clone your array first.\n\n  for (let i = 0; i < a.length; ++i) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n};\n\n/* eslint-disable  */\n/* istanbul ignore next */\nexport const deepEquals = (a, b) => {\n  if (a === b) return true;\n  if (a && b && a.length !== b.length) return false;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!deepEquals(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!deepEquals(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a !== a && b !== b;\n}\n\n/**\n * Generates a unique ID for a Cardboard tag.\n * If an `idNumber` is provided, it will return a string in the format `c_<idNumber>`.\n * If no `idNumber` is provided, it will generate a random UUID in the format `c_xxxxxxxxxx`.\n * \n * @returns A unique ID string for a Cardboard tag.\n */\nexport function generateUID(idNumber?: number): string {\n  if (!idNumber) return uuidv4();\n  return `c_${idNumber}`;\n}\n\nexport function uuidv4() {\n  return \"c_1000000010\".replace(/[018]/g, c =>\n    (+c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> +c / 4).toString(16)\n  );\n}"]}